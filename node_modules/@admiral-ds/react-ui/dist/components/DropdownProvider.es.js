import{jsx}from"react/jsx-runtime";import{createContext,useContext,useState,useCallback,useMemo}from"react";const DropdownContext=createContext({}),DropdownProvider=({rootRef,...props})=>{const[dropdowns,setDropdowns]=useState([]),[currentActiveMenu,setCurrentActiveMenu]=useState(void 0),activateMenu=useCallback(menuRef=>{setCurrentActiveMenu(menuRef)},[]),deactivateMenu=useCallback(menuRef=>{setCurrentActiveMenu(prevValue=>prevValue===menuRef?void 0:prevValue)},[]),removeDropdown=useCallback(removeDropdown=>{setDropdowns(prevDrops=>{const index=prevDrops.indexOf(removeDropdown);return index>-1?prevDrops.slice(0,index):prevDrops})},[]),addDropdown=useCallback(newDropdown=>{setDropdowns(prevDrops=>[...prevDrops,newDropdown])},[]),providerValue=useMemo(()=>({addDropdown,removeDropdown,dropdowns,rootRef,activateMenu,deactivateMenu,currentActiveMenu}),[addDropdown,removeDropdown,dropdowns,rootRef,activateMenu,deactivateMenu,currentActiveMenu]);return jsx(DropdownContext.Provider,{value:providerValue,children:props.children})};function useDropdown(dropdownRef){const{dropdowns=[],addDropdown,removeDropdown,activateMenu,deactivateMenu,currentActiveMenu}=useContext(DropdownContext),dropdownIndex=dropdowns.indexOf(dropdownRef);return{addDropdown,removeDropdown,dropdowns:dropdownIndex>-1?dropdowns.slice(dropdownIndex+1,dropdowns.length):[],activateMenu,deactivateMenu,currentActiveMenu}}const useDropdownsClickOutside=(e,dropdowns)=>!dropdowns.some(element=>element.current&&element.current.contains(e.target));export{DropdownContext,DropdownProvider,useDropdown,useDropdownsClickOutside};
//# sourceMappingURL=DropdownProvider.es.js.map
