"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),styled=require("styled-components"),SelectTreeNode=require("./SelectTreeNode.cjs.js"),keyboardKey=require("../common/keyboardKey.cjs.js"),utils=require("./utils.cjs.js");function _interopDefault(e){return e&&e.__esModule?e:{default:e}}function _interopNamespace(e){if(e&&e.__esModule)return e;var n=Object.create(null);return e&&Object.keys(e).forEach(function(k){if("default"!==k){var d=Object.getOwnPropertyDescriptor(e,k);Object.defineProperty(n,k,d.get?d:{enumerable:!0,get:function(){return e[k]}})}}),n.default=e,Object.freeze(n)}var e__namespace=_interopNamespace(e);const TreeItem=_interopDefault(styled).default.ul`
  list-style: none;
  margin: 0;
  padding: 0;
`,SelectTree=({list,dimension="m",expandAll=!1,onChange,...props})=>{const[handleGuard,setHandleGuard]=e__namespace.useState(!1),handleExpandAll=node=>{void 0===node.expanded&&node.children&&(node.expanded=expandAll,node.children&&node.children.forEach(handleExpandAll))},handleChangeList=(type,e)=>{const checked=e.target.checked,key=e.target.getAttribute("data-key"),traverseNodes=node=>{if(node.id===key){if("buttonclick"===type){const expanded=node.expanded;node.expanded=!expanded}if("inputchange"===type&&(node.status=checked?"checked":"unchecked",checked&&utils.checkParent(list,node),node.children&&node.children.forEach(checkAllNodes)),"keydown"===type){const code=keyboardKey.keyboardKey.getCode(e);code===keyboardKey.keyboardKey.Enter||code===keyboardKey.keyboardKey[" "]?node.expanded=!0:code===keyboardKey.keyboardKey.Escape&&(node.expanded=!1)}}node.children&&node.children.forEach(traverseNodes)},checkAllNodes=node=>{"status"in node&&(node.status=checked?"checked":"unchecked",node.checked=checked),node.children&&node.children.forEach(checkAllNodes)};list.forEach(traverseNodes),onChange?.([...list])},handleButtonClick=e__namespace.useCallback(e=>{handleChangeList("buttonclick",e)},[]),handleChange=e__namespace.useCallback(e=>{handleChangeList("inputchange",e)},[]),handleKeyDown=e__namespace.useCallback(e=>{handleChangeList("keydown",e)},[]);return e__namespace.useEffect(()=>{expandAll&&(list.forEach(handleExpandAll),onChange?.([...list]))},[expandAll]),handleGuard||(utils.setNodeStatus(list),setHandleGuard(!0)),utils.updateNodeStatus(list),jsxRuntime.jsx(TreeItem,{...props,children:list.map(node=>jsxRuntime.jsx(SelectTreeNode.SelectTreeNode,{node,onChange:handleChange,dimension,expandAll,onButtonClick:handleButtonClick,onKeyDown:handleKeyDown,level:0},node.id))})};SelectTree.displayName="SelectTree",exports.SelectTree=SelectTree;
//# sourceMappingURL=index.cjs.js.map
