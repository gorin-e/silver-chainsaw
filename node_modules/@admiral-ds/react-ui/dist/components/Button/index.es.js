import{jsxs,jsx}from"react/jsx-runtime";import{forwardRef,Children}from"react";import styled from"styled-components";import{SpinnerIcon}from"../Spinner/SpinnerIcon.es.js";import{appearanceMixin}from"./appearanceMixin/index.es.js";import{ButtonIconContainer,dimensionMixin}from"./dimensionMixin.es.js";export{PaddingForButtonWithIconLeft,PaddingForButtonWithIconRight}from"./dimensionMixin.es.js";import{mediumGroupBorderRadius}from"../themes/borderRadius.es.js";import{skeletonAnimationMixin}from"../skeleton/animation.es.js";const ButtonContent=styled.div`
  vertical-align: top;

  display: inline-flex;
  gap: 8px;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: flex-start;
  align-items: center;
  max-width: calc(100% - ${p=>p.$addPadding}px);

  > * {
    display: inline-block;
    flex: 0 1 auto;
    white-space: nowrap;
  }
  > ${ButtonIconContainer} {
    flex: 0 0 auto;
  }

  height: 24px;
  & > svg {
    width: 24px;
    height: 24px;
  }

  .button-group[data-dimension='m'] &&,
  .button-group[data-dimension='l'] &&,
  .button-group[data-dimension='xl'] && {
    height: 24px;
    & > svg {
      width: 24px;
      height: 24px;
    }
  }
  .button-group[data-dimension='s'] &&,
  [data-dimension='s'] & {
    height: 20px;
    & > svg {
      width: 20px;
      height: 20px;
    }
  }
`,SpinnerContainer=styled(ButtonIconContainer)`
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  container-type: inline-size;
  .button-group[data-appearance='primary'] & {
    & path {
      fill: ${p=>`var(--admiral-color-Special_StaticWhite, ${p.theme.color["Special/Static White"]})`};
    }
  }
  .button-group[data-appearance='secondary'] &,
  .button-group[data-appearance='tertiary'] & {
    & path {
      fill: ${p=>`var(--admiral-color-Primary_Primary60Main, ${p.theme.color["Primary/Primary 60 Main"]})`};
    }
  }
`,AdditionalPadding=styled.div`
  display: inline-block;
  width: 2px;
`,Button=forwardRef(({appearance="primary",dimension="xl",type="button",loading=!1,skeleton=!1,iconStart,iconEnd,icon,iconPlace="left",children,buttonCssMixin,displayAsDisabled,displayAsSquare,...props},ref)=>{const hasIconStart=!!iconStart||!!icon&&"left"===iconPlace,hasIconEnd=!!iconEnd||!!icon&&"right"===iconPlace,additionalPadding=(displayAsSquare||hasIconStart?0:2)+(displayAsSquare||hasIconEnd?0:2);return jsxs(StyledButton,{ref,$appearance:appearance,$dimension:dimension,type,$loading:loading,$skeleton:skeleton,$buttonCssMixin:buttonCssMixin,$displayAsSquare:displayAsSquare,$displayAsDisabled:displayAsDisabled,...props,children:[loading&&jsx(SpinnerContainer,{children:jsx(SpinnerIcon,{$inverse:"secondary"!==appearance&&"tertiary"!==appearance&&"ghost"!==appearance})}),!displayAsSquare&&!hasIconStart&&jsx(AdditionalPadding,{}),jsxs(ButtonContent,{$addPadding:additionalPadding,children:[hasIconStart?jsx(ButtonIconContainer,{children:iconStart||icon}):null,Children.toArray(children).map((child,index)=>"string"==typeof child?jsx("div",{children:child},child+index):child),hasIconEnd?jsx(ButtonIconContainer,{children:iconEnd||icon}):null]}),!displayAsSquare&&!hasIconEnd&&jsx(AdditionalPadding,{})]})}),StyledButton=styled.button.attrs(props=>({"data-dimension":props.$dimension,"data-appearance":[props.$appearance,props.$displayAsDisabled?"disabled":void 0].filter(val=>void 0!==val).join(" ")}))`
  position: relative;
  box-sizing: border-box;
  display: inline-block;
  white-space: nowrap;
  border: none;
  border-radius: ${p=>p.$skeleton?0:`var(--admiral-border-radius-Medium, ${mediumGroupBorderRadius(p.theme.shape)})`};
  appearance: none;
  vertical-align: middle;
  cursor: ${p=>p.disabled?"not-allowed":"pointer"};
  ${p=>(p.$loading||p.$skeleton)&&"pointer-events: none"};

  ${appearanceMixin};
  ${dimensionMixin};
  ${p=>p.$buttonCssMixin};
  ${({$skeleton})=>$skeleton&&skeletonAnimationMixin};

  ${ButtonContent} {
    ${p=>p.$loading||p.$skeleton?"visibility: hidden;":""}
  }
`;Button.displayName="Button";export{Button,ButtonIconContainer,dimensionMixin};
//# sourceMappingURL=index.es.js.map
