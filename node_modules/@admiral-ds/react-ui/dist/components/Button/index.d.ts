import type { ButtonHTMLAttributes, ReactNode } from 'react';
import type { css } from 'styled-components';
import type { ButtonAppearance, Dimension } from './types';
export type { ButtonAppearance } from './types';
export * from './dimensionMixin';
type IconPlace = 'left' | 'right';
export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
    /** Внешний вид кнопки */
    appearance?: ButtonAppearance;
    /** Размер кнопки */
    dimension?: Dimension;
    /** Оставаясь активной для нажатия, кнопка отображается в заблокированном стиле */
    displayAsDisabled?: boolean;
    /** Отображать кнопку квадратной*/
    displayAsSquare?: boolean;
    /** Состояние загрузки */
    loading?: boolean;
    /** Состояние скелетона */
    skeleton?: boolean;
    /**
     * @deprecated Помечено как deprecated в версии 5.2.0, будет удалено в 9.x.x версии.
     * Взамен используйте iconStart или iconEnd
     *
     * Иконка кнопки
     */
    icon?: ReactNode;
    /** Иконка перед текстом кнопки */
    iconStart?: ReactNode;
    /** Иконка после текста кнопки */
    iconEnd?: ReactNode;
    /**
     * @deprecated Помечено как deprecated в версии 5.2.0, будет удалено в 9.x.x версии.
     * Взамен используйте iconStart или iconEnd
     *
     * Расположение иконки кнопки
     */
    iconPlace?: IconPlace;
    /** Позволяет добавлять миксин для кнопок, созданный с помощью styled css  */
    buttonCssMixin?: ReturnType<typeof css>;
}
export declare const Button: import("react").ForwardRefExoticComponent<ButtonProps & import("react").RefAttributes<HTMLButtonElement>>;
//# sourceMappingURL=index.d.ts.map