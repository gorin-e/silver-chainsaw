import{forwardRef,useState,useRef,useMemo,createElement,useLayoutEffect}from"react";import{jsxs,Fragment,jsx}from"react/jsx-runtime";import styled from"styled-components";import"../form/InputField/index.es.js";import{CheckboxField}from"../form/CheckboxField/index.es.js";import"../form/DateField/index.es.js";import"../form/SelectField/index.es.js";import"../form/FieldSet/index.es.js";import"../form/SuggestField/index.es.js";import"../form/TextField/index.es.js";import"../form/SliderInputField/index.es.js";import"../form/SliderRangeField/index.es.js";import"../form/TimeField/index.es.js";import"../form/NumberInputField/index.es.js";import"../form/EditModeField/index.es.js";import"../form/EditModeAreaField/index.es.js";import"../form/PhoneInputField/index.es.js";import"../form/InputExField/index.es.js";import"../form/FileInputField/index.es.js";import"../form/MultiInputField/index.es.js";import"../form/TreeSelectField/index.es.js";import{IconButton}from"../IconButton/index.es.js";import{StyledDropdownContainer}from"../DropdownContainer/index.es.js";import{ReactComponent as SvgPlusOutline}from"../../node_modules/@admiral-ds/icons/build/service/PlusOutline.svg.es.js";import{Menu}from"../Menu/index.es.js";import{MenuItem}from"../Menu/MenuItem.es.js";import{Tooltip}from"../Tooltip/index.es.js";import{refSetter}from"../common/utils/refSetter.es.js";import{checkOverflow}from"../common/utils/checkOverflow.es.js";const ColumnsMenu=styled(Menu)`
  width: 320px;
`,ColumnsMenuItem=styled(MenuItem)`
  display: flex;
  justify-content: flex-start;
  flex-flow: nowrap;
`,StyledCheckboxField=styled(CheckboxField)`
  flex-shrink: 0;
  margin-right: 8px;
`,TextWrapper=styled.span`
  overflow: hidden;
  text-overflow: ellipsis;
`,ColumnMenuItem=({visible,title,...props})=>{const itemRef=useRef(null),textRef=useRef(null),[overflow,setOverflow]=useState(!1),[tooltipVisible,setTooltipVisible]=useState(!1),[hovered,setHovered]=useState(!1);return useLayoutEffect(()=>{textRef.current&&checkOverflow(textRef.current)!==overflow&&setOverflow(checkOverflow(textRef.current))},[tooltipVisible,overflow]),useLayoutEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}const text=textRef.current;if(text)return text.addEventListener("mouseenter",show),text.addEventListener("mouseleave",hide),()=>{text.removeEventListener("mouseenter",show),text.removeEventListener("mouseleave",hide)}},[]),jsxs(ColumnsMenuItem,{...props,ref:itemRef,onHover:()=>setHovered(!0),onLeave:()=>setHovered(!1),children:[jsx(StyledCheckboxField,{checked:visible,onChange:()=>{},hovered}),jsx(TextWrapper,{ref:textRef,children:title}),tooltipVisible&&overflow&&jsx(Tooltip,{targetElement:itemRef.current,renderContent:()=>title})]})},ColumnsButton=forwardRef(({columns=[],menuDimension="l",buttonDimension="l",disabled,onColumnsChange,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,...props},ref)=>{const[opened,setOpened]=useState(!1),buttonRef=useRef(null),renderColumns=useMemo(()=>columns.map((column,index)=>({id:index.toString(),render:options=>{const title=column.name??column.title,id=column.name??column.id;return createElement(ColumnMenuItem,{...options,title,visible:column.visible,dimension:menuDimension,onClick:()=>{(({id,visible})=>{if(onColumnsChange&&columns.length>0){const newValue=[...columns],item=newValue.find(column=>column.name?column.name===id:column.id===id);item&&(item.visible=visible),onColumnsChange(newValue)}})({id,visible:!column.visible})},key:index})}})),[columns,menuDimension]);return jsxs(Fragment,{children:[jsx(IconButton,{ref:refSetter(ref,buttonRef),dimension:buttonDimension,onClick:()=>{setOpened(prevOpened=>!prevOpened)},disabled:disabled||0===columns.length,...props,children:jsx(SvgPlusOutline,{})}),opened&&jsx(StyledDropdownContainer,{targetElement:buttonRef.current,alignSelf:"flex-end",onClickOutside:e=>{e.target&&buttonRef.current?.contains(e.target)||setOpened(!1)},dropContainerCssMixin,className:dropContainerClassName,style:dropContainerStyle,children:jsx(ColumnsMenu,{model:renderColumns,selected:""})})]})});export{ColumnsButton};
//# sourceMappingURL=ColumnsButton.es.js.map
