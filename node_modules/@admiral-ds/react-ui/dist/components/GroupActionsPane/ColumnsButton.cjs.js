"use strict";var e=require("react"),jsxRuntime=require("react/jsx-runtime"),styled=require("styled-components");require("../form/InputField/index.cjs.js");var index$1=require("../form/CheckboxField/index.cjs.js");require("../form/DateField/index.cjs.js"),require("../form/SelectField/index.cjs.js"),require("../form/FieldSet/index.cjs.js"),require("../form/SuggestField/index.cjs.js"),require("../form/TextField/index.cjs.js"),require("../form/SliderInputField/index.cjs.js"),require("../form/SliderRangeField/index.cjs.js"),require("../form/TimeField/index.cjs.js"),require("../form/NumberInputField/index.cjs.js"),require("../form/EditModeField/index.cjs.js"),require("../form/EditModeAreaField/index.cjs.js"),require("../form/PhoneInputField/index.cjs.js"),require("../form/InputExField/index.cjs.js"),require("../form/FileInputField/index.cjs.js"),require("../form/MultiInputField/index.cjs.js"),require("../form/TreeSelectField/index.cjs.js");var index$2=require("../IconButton/index.cjs.js"),index$3=require("../DropdownContainer/index.cjs.js"),PlusOutline=require("../../node_modules/@admiral-ds/icons/build/service/PlusOutline.svg.cjs.js"),index=require("../Menu/index.cjs.js"),MenuItem=require("../Menu/MenuItem.cjs.js"),index$4=require("../Tooltip/index.cjs.js"),refSetter=require("../common/utils/refSetter.cjs.js"),checkOverflow=require("../common/utils/checkOverflow.cjs.js");function _interopDefault(e){return e&&e.__esModule?e:{default:e}}var styled__default=_interopDefault(styled);const ColumnsMenu=styled__default.default(index.Menu)`
  width: 320px;
`,ColumnsMenuItem=styled__default.default(MenuItem.MenuItem)`
  display: flex;
  justify-content: flex-start;
  flex-flow: nowrap;
`,StyledCheckboxField=styled__default.default(index$1.CheckboxField)`
  flex-shrink: 0;
  margin-right: 8px;
`,TextWrapper=styled__default.default.span`
  overflow: hidden;
  text-overflow: ellipsis;
`,ColumnMenuItem=({visible,title,...props})=>{const itemRef=e.useRef(null),textRef=e.useRef(null),[overflow,setOverflow]=e.useState(!1),[tooltipVisible,setTooltipVisible]=e.useState(!1),[hovered,setHovered]=e.useState(!1);return e.useLayoutEffect(()=>{textRef.current&&checkOverflow.checkOverflow(textRef.current)!==overflow&&setOverflow(checkOverflow.checkOverflow(textRef.current))},[tooltipVisible,overflow]),e.useLayoutEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}const text=textRef.current;if(text)return text.addEventListener("mouseenter",show),text.addEventListener("mouseleave",hide),()=>{text.removeEventListener("mouseenter",show),text.removeEventListener("mouseleave",hide)}},[]),jsxRuntime.jsxs(ColumnsMenuItem,{...props,ref:itemRef,onHover:()=>setHovered(!0),onLeave:()=>setHovered(!1),children:[jsxRuntime.jsx(StyledCheckboxField,{checked:visible,onChange:()=>{},hovered}),jsxRuntime.jsx(TextWrapper,{ref:textRef,children:title}),tooltipVisible&&overflow&&jsxRuntime.jsx(index$4.Tooltip,{targetElement:itemRef.current,renderContent:()=>title})]})},ColumnsButton=e.forwardRef(({columns=[],menuDimension="l",buttonDimension="l",disabled,onColumnsChange,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,...props},ref)=>{const[opened,setOpened]=e.useState(!1),buttonRef=e.useRef(null),renderColumns=e.useMemo(()=>columns.map((column,index)=>({id:index.toString(),render:options=>{const title=column.name??column.title,id=column.name??column.id;return e.createElement(ColumnMenuItem,{...options,title,visible:column.visible,dimension:menuDimension,onClick:()=>{(({id,visible})=>{if(onColumnsChange&&columns.length>0){const newValue=[...columns],item=newValue.find(column=>column.name?column.name===id:column.id===id);item&&(item.visible=visible),onColumnsChange(newValue)}})({id,visible:!column.visible})},key:index})}})),[columns,menuDimension]);return jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(index$2.IconButton,{ref:refSetter.refSetter(ref,buttonRef),dimension:buttonDimension,onClick:()=>{setOpened(prevOpened=>!prevOpened)},disabled:disabled||0===columns.length,...props,children:jsxRuntime.jsx(PlusOutline.ReactComponent,{})}),opened&&jsxRuntime.jsx(index$3.StyledDropdownContainer,{targetElement:buttonRef.current,alignSelf:"flex-end",onClickOutside:e=>{e.target&&buttonRef.current?.contains(e.target)||setOpened(!1)},dropContainerCssMixin,className:dropContainerClassName,style:dropContainerStyle,children:jsxRuntime.jsx(ColumnsMenu,{model:renderColumns,selected:""})})]})});exports.ColumnsButton=ColumnsButton;
//# sourceMappingURL=ColumnsButton.cjs.js.map
