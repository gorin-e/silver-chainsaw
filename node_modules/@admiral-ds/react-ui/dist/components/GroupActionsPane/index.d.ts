/// <reference types="react" />
import type { css } from 'styled-components';
import type { Dimension as ButtonDimension } from '../../components/TextButton/types';
import type { DropContainerStyles } from '../../components/DropdownContainer';
export type PaneDimension = 's' | 'm' | 'l' | 'xl';
export type PaneMenuProps = {
    /** Функция закрытия меню настроек */
    closeMenu: () => void;
};
export interface PaneColumn {
    /**
     * @deprecated Помечено как deprecated в версии 5.1.0, будет удалено в 9.x.x версии.
     * Используйте id для уникального идентификатора колонки и title для заголовка колонки
     **/
    name?: string;
    /** Уникальный идентификатор колонки
     * В 9.x.x версии данный параметр станет обязательным, заменив собой name
     */
    id?: string;
    /** Заголовок колонки
     * В 9.x.x версии данный параметр станет обязательным, заменив собой name
     */
    title?: string;
    visible: boolean;
}
export interface ActionRenderProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    dimension: ButtonDimension;
}
export interface GroupActionsPaneProps extends React.HTMLAttributes<HTMLDivElement> {
    /** Размер панели */
    dimension?: PaneDimension;
    /** Массив объектов с видимостью колонок */
    columns?: Array<PaneColumn>;
    /** Значение строки поиска */
    searchValue?: string;
    /** Обработчик изменения видимости колонок */
    onColumnsChange?: (columns: Array<PaneColumn>) => void;
    /** Обработчик открытия строки поиска */
    onSearchEnter?: () => void;
    /** Обработчик смены фокусировки со строки поиска */
    onSearchLeave?: () => void;
    /** Обработчик изменения строки поиска */
    onChangeSearchValue?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    /**
     * @deprecated Помечено как deprecated в версии 8.4.0, будет удалено в 10.x.x версии.
     * Взамен используйте параметр renderSettingsMenu.
     *
     * Объект, отображаемый в качестве меню настройки
     **/
    settingsMenu?: React.ReactNode;
    /** Функция отрисовки содержимого меню настроек */
    renderSettingsMenu?: (obj: PaneMenuProps) => React.ReactNode;
    /** Признак блокировки кнопок настройки таблицы */
    settingsButtonsDisabled?: boolean;
    /** Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,
     * по умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме
     **/
    locale?: {
        /** Placeholder инпута */
        inputPlaceholder?: string;
    };
    /**
     * @deprecated Помечено как deprecated в версии 4.8.0, будет удалено в 9.x.x версии.
     * Взамен используйте  columnsButtonDropContainerStyle.dropContainerCssMixin
     *
     * Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css
     **/
    dropContainerCssMixin?: ReturnType<typeof css>;
    /** Позволяет добавлять стили и className для выпадающего меню кнопки настройки видимости колонок  */
    columnsButtonDropContainerStyle?: DropContainerStyles;
    /** Позволяет добавлять стили и className для выпадающего меню кнопки настроек  */
    settingsButtonDropContainerStyle?: DropContainerStyles;
}
export declare const GroupActionsPane: {
    ({ children, searchValue, dimension, columns, settingsMenu, renderSettingsMenu, onColumnsChange, onSearchEnter, onSearchLeave, onChangeSearchValue, settingsButtonsDisabled, locale, dropContainerCssMixin, columnsButtonDropContainerStyle, settingsButtonDropContainerStyle, ...props }: React.PropsWithChildren<GroupActionsPaneProps>): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export type PaneSeparatorProps = {
    dimension?: 's' | 'm';
} & React.HTMLAttributes<HTMLDivElement>;
export declare const PaneSeparator: import("react").ForwardRefExoticComponent<{
    dimension?: "s" | "m" | undefined;
} & import("react").HTMLAttributes<HTMLDivElement> & import("react").RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=index.d.ts.map