/// <reference types="react" />
import type { css } from 'styled-components';
import type { PaneColumn } from '../../components/GroupActionsPane';
export type MenuDimension = 's' | 'm' | 'l';
export interface RenderOptionProps {
    /** Активная секция MenuItems */
    selected?: boolean;
    /** Акцентная секция MenuItems */
    hovered?: boolean;
    /** Отключение секции */
    disabled?: boolean;
    /** Обработчик клика по item */
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    /** Обработчик наведения мыши на item */
    onHover?: React.MouseEventHandler<HTMLElement>;
}
export interface ItemProps {
    id: string;
    render: (options: RenderOptionProps) => React.ReactNode;
    disabled?: boolean;
}
export interface ColumnsButtonProps extends React.HTMLAttributes<HTMLButtonElement>, RenderOptionProps {
    columns?: Array<PaneColumn>;
    onColumnsChange?: (columns: Array<PaneColumn>) => void;
    buttonDimension?: 's' | 'l';
    menuDimension?: MenuDimension;
    /** Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css  */
    dropContainerCssMixin?: ReturnType<typeof css>;
    /** Позволяет добавлять класс на контейнер выпадающего меню  */
    dropContainerClassName?: string;
    /** Позволяет добавлять стили на контейнер выпадающего меню  */
    dropContainerStyle?: React.CSSProperties;
}
export declare const ColumnsButton: import("react").ForwardRefExoticComponent<ColumnsButtonProps & import("react").RefAttributes<HTMLButtonElement>>;
//# sourceMappingURL=ColumnsButton.d.ts.map