/// <reference types="react" />
import type { DataAttributes } from 'styled-components';
import type { BreadcrumbsProps } from '../../components/Breadcrumbs';
export declare const Crumb: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, {
    $dimension: BreadcrumbsProps['dimension'];
}>> & string;
export declare const Content: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, never>> & string;
export declare const CrumbAnchor: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, {
    $active?: boolean | undefined;
}>> & string;
export interface BreadcrumbProps extends React.HTMLAttributes<HTMLLIElement>, DataAttributes {
    /** Текст хлебной крошки */
    text: string;
    /** Иконка перед текстом хлебной крошки */
    iconStart?: React.ReactNode;
    /** Url хлебной крошки (href атрибут, используемый во внутреннем Anchor) */
    url?: string;
    /** Позволяет вместо внутреннего Anchor отрендерить любой другой компонент (https://styled-components.com/docs/api#as-polymorphic-prop)
     * Кроме последней неактивной вкладки, она по умолчанию рендерится как span и не является кликабельной.
     */
    linkAs?: React.ElementType;
    /** Дополнительные параметры, которые можно передать во внутренний Anchor */
    linkProps?: {
        [key: string]: string;
    };
    /** Размер компонента */
    dimension?: BreadcrumbsProps['dimension'];
    /** Конфиг функция пропсов для хлебной крошки. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */
    containerPropsConfig?: (props: React.ComponentProps<typeof Crumb> & DataAttributes) => Partial<React.ComponentProps<typeof Crumb>> & DataAttributes;
}
interface InternalBreadcrumbProps {
    /** Признак активности хлебной крошки */
    active?: boolean;
    /** Отображать хлебную крошку вместе с разделителем */
    displaySeparator?: boolean;
}
export declare const Breadcrumb: import("react").ForwardRefExoticComponent<BreadcrumbProps & InternalBreadcrumbProps & import("react").RefAttributes<HTMLLIElement>>;
export {};
//# sourceMappingURL=BreadCrumb.d.ts.map