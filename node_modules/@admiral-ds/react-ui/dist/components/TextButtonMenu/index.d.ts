import type { HTMLAttributes, ReactNode } from 'react';
import type { Appearance, Dimension } from '../../components/TextButton/types';
import type { MenuModelItemProps } from '../../components/Menu/MenuItem';
import type { DropMenuComponentProps, DropMenuStyleProps } from '../../components/DropMenu';
export interface TextButtonMenuProps extends Omit<HTMLAttributes<HTMLButtonElement>, 'onChange'>, Omit<DropMenuComponentProps, 'targetElement'>, DropMenuStyleProps {
    /** Внешний вид кнопки */
    appearance?: Appearance;
    /** Размер кнопки */
    dimension?: Dimension;
    /** Текст кнопки */
    text?: string;
    /** Иконка перед текстом кнопки */
    iconStart?: ReactNode;
    /** Состояние загрузки */
    loading?: boolean;
    /** Опции выпадающего списка */
    items: Array<MenuModelItemProps>;
    /** Выбранная опция */
    selected?: string;
    /**
     * @deprecated Помечено как deprecated в версии 3.2.0, будет удалено в версии 9.х.х.
     * Взамен используйте параметр onSelectItem
     *
     * Колбек на изменение выбранной опции */
    onChange?: (id: string) => void;
    /**
     * @deprecated Помечено как deprecated в версии 3.2.0, будет удалено в версии 9.х.х.
     * Взамен используйте параметры isVisible и onVisibilityChange
     *
     * Колбек на открытие меню */
    onOpen?: () => void;
    /**
     * @deprecated Помечено как deprecated в версии 3.2.0, будет удалено в версии 9.х.х.
     * Взамен используйте параметры isVisible и onVisibilityChange
     *
     * Колбек на закрытие меню */
    onClose?: () => void;
    /** Отключение компонента */
    disabled?: boolean;
    /** Состояние skeleton */
    skeleton?: boolean;
}
export declare const TextButtonMenu: import("react").ForwardRefExoticComponent<TextButtonMenuProps & import("react").RefAttributes<HTMLButtonElement>>;
//# sourceMappingURL=index.d.ts.map