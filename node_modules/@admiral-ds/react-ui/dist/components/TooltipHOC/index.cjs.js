"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),refSetter=require("../common/utils/refSetter.cjs.js"),index=require("../Tooltip/index.cjs.js"),fixedForwardRef=require("../common/fixedForwardRef.cjs.js");exports.TooltipHoc=function(Component){return fixedForwardRef.fixedForwardRef((props,ref)=>{const{renderContent,container,withDelay,tooltipRef,tooltipPosition,tooltipDimension,...wrappedCompProps}=props,emptyContent=!renderContent()&&0!==renderContent(),anchorElementRef=e.useRef(null),[visible,setVisible]=e.useState(!1),[node,setNode]=e.useState(null),[timer,setTimer]=e.useState();return e.useEffect(()=>{function show(){setTimer(setTimeout(()=>setVisible(!0),withDelay?index.TOOLTIP_DELAY:0))}function hide(){clearTimeout(timer),setVisible(!1)}if(node)return node.addEventListener("mouseenter",show),node.addEventListener("focus",show),node.addEventListener("mouseleave",hide),node.addEventListener("blur",hide),()=>{timer&&clearTimeout(timer),node.removeEventListener("mouseenter",show),node.removeEventListener("focus",show),node.removeEventListener("mouseleave",hide),node.removeEventListener("blur",hide)}},[node,setTimer,setVisible,timer]),jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(Component,{...wrappedCompProps,ref:refSetter.refSetter(ref,anchorElementRef,setNode)}),visible&&!emptyContent&&jsxRuntime.jsx(index.Tooltip,{targetElement:anchorElementRef.current,renderContent,container,tooltipPosition,dimension:tooltipDimension,ref:tooltipRef})]})})};
//# sourceMappingURL=index.cjs.js.map
