import{jsxs,Fragment,jsx}from"react/jsx-runtime";import{useRef,useState,useEffect}from"react";import{refSetter}from"../common/utils/refSetter.es.js";import{Tooltip,TOOLTIP_DELAY}from"../Tooltip/index.es.js";import{fixedForwardRef}from"../common/fixedForwardRef.es.js";function TooltipHoc(Component){return fixedForwardRef((props,ref)=>{const{renderContent,container,withDelay,tooltipRef,tooltipPosition,tooltipDimension,...wrappedCompProps}=props,emptyContent=!renderContent()&&0!==renderContent(),anchorElementRef=useRef(null),[visible,setVisible]=useState(!1),[node,setNode]=useState(null),[timer,setTimer]=useState();return useEffect(()=>{function show(){setTimer(setTimeout(()=>setVisible(!0),withDelay?TOOLTIP_DELAY:0))}function hide(){clearTimeout(timer),setVisible(!1)}if(node)return node.addEventListener("mouseenter",show),node.addEventListener("focus",show),node.addEventListener("mouseleave",hide),node.addEventListener("blur",hide),()=>{timer&&clearTimeout(timer),node.removeEventListener("mouseenter",show),node.removeEventListener("focus",show),node.removeEventListener("mouseleave",hide),node.removeEventListener("blur",hide)}},[node,setTimer,setVisible,timer]),jsxs(Fragment,{children:[jsx(Component,{...wrappedCompProps,ref:refSetter(ref,anchorElementRef,setNode)}),visible&&!emptyContent&&jsx(Tooltip,{targetElement:anchorElementRef.current,renderContent,container,tooltipPosition,dimension:tooltipDimension,ref:tooltipRef})]})})}export{TooltipHoc};
//# sourceMappingURL=index.es.js.map
