import type { TooltipDimension } from '../../components/Tooltip';
import type { CSSProperties } from 'react';
export declare const TooltipWrapper: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const TooltipContainer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $dimension?: TooltipDimension | undefined;
}>> & string;
export declare const FakeTarget: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const Portal: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("../../components/PositionInPortal").PositionInPortalProps & {
    children?: import("react").ReactNode;
}, "ref"> & {
    ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
}, {
    $flexDirection?: CSSProperties['flexDirection'];
}>> & string & Omit<({ targetElement, rootRef, fullContainerWidth, ...props }: import("react").PropsWithChildren<import("../../components/PositionInPortal").PositionInPortalProps>) => import("react").ReactPortal, keyof import("react").Component<any, {}, any>>;
//# sourceMappingURL=style.d.ts.map