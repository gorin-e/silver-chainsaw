import{jsxs,jsx}from"react/jsx-runtime";import{forwardRef,Children,useMemo,cloneElement,isValidElement,useState,useEffect,useRef}from"react";import styled,{css}from"styled-components";import{CarouselButton}from"./CarouselButton.es.js";import{CarouselSlider,CarouselSliderItem}from"../CarouselSlider/index.es.js";import{getSwipeType}from"../common/utils/touchUtils.es.js";const Content=styled.div`
  position: relative;
  display: flex;
  transition: ${p=>p.$showAnimation?`all ${p.$animationDuration}ms ease-in-out`:"none"};
  transform: translateX(-${p=>100*p.$currentItem}%);
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }

  > * {
    width: 100%;
    flex-shrink: 0;
    flex-grow: 1;
  }
  ${p=>p.$contentCssMixin};
`,ContentWrapper=styled.div`
  overflow: hidden;
  width: 100%;
  height: 100%;
  position: relative;
`,Wrapper=styled.div`
  display: flex;
  width: 100%;
  position: relative;
`,Container=styled.div`
  position: relative;
  box-sizing: border-box;
  width: 100%;
  display: flex;
  flex-direction: column;
`,innerSliderPositionMixin=css`
  position: absolute;
  margin-top: 0;
  margin-bottom: 10px;
  bottom: 0;
`,StyledCarouselSlider=styled(CarouselSlider)`
  align-self: center;
  margin-top: 10px;
  margin-bottom: 0;
  ${p=>"inner"===p.$sliderPosition&&innerSliderPositionMixin};
`,getNextItemFinite=(currentItem,maxItems)=>currentItem<maxItems-1?currentItem+1:currentItem,getPrevItemFinite=(currentItem,_maxItems)=>currentItem>0?currentItem-1:currentItem,getNextItemInfinite=(currentItem,maxItems)=>(currentItem+1)%maxItems,getPrevItemInfinite=(currentItem,maxItems)=>currentItem>0?(currentItem-1)%maxItems:maxItems-1,nothing=()=>{},Carousel=forwardRef(({defaultItem,currentItem,onCurrentItemChange,showButtons=!0,buttonAppearance="default",infiniteScroll=!1,animationDuration=300,sliderPosition="inner",sliderAppearance="default",contentCssMixin,prevButtonPropsConfig=nothing,nextButtonPropsConfig=nothing,children,...props},ref)=>{const getPrevItem=infiniteScroll?getPrevItemInfinite:getPrevItemFinite,getNextItem=infiniteScroll?getNextItemInfinite:getNextItemFinite,items=Children.toArray(children),length=items.length,contentItems=useMemo(()=>{const slides=[],preCloneSlides=[],postCloneSlides=[];return Children.forEach(children,(elem,index)=>{infiniteScroll&&index===length-1&&preCloneSlides.push(isValidElement(elem)?cloneElement(elem,{...elem.props,key:"precloned"+elem.key,"data-index":-1,"aria-label":"precloned"+elem.key}):elem),infiniteScroll&&0===index&&postCloneSlides.push(isValidElement(elem)?cloneElement(elem,{...elem.props,key:"postcloned"+elem.key,"data-index":length,"aria-label":"postcloned"+elem.key}):elem),slides.push(isValidElement(elem)?cloneElement(elem,{...elem.props,key:"original"+elem.key,"data-index":index}):elem)}),preCloneSlides.concat(slides,postCloneSlides)},[children,length,items,infiniteScroll]),[sliderIndex,setSliderIndex]=useState(defaultItem||0),currenSliderIndexInner=currentItem??sliderIndex,handleCurrentItemChange=newItem=>{onCurrentItemChange?.(newItem),setSliderIndex(newItem)},[contentIndex,setContentIndex]=useState(currenSliderIndexInner+(infiniteScroll?1:0)),[showAnimation,setShowAnimation]=useState(!0);useEffect(()=>{let newContentIndex=0;newContentIndex=infiniteScroll?contentIndex===contentItems.length-2&&0===currenSliderIndexInner?contentItems.length-1:1===contentIndex&&currenSliderIndexInner===length-1?0:currenSliderIndexInner+1:currenSliderIndexInner,setContentIndex(newContentIndex)},[currentItem,sliderIndex,infiniteScroll]);const handlePrevClick=()=>{handleCurrentItemChange(getPrevItem(currenSliderIndexInner,length))},handleNextClick=()=>{handleCurrentItemChange(getNextItem(currenSliderIndexInner,length))},showPrev=!!showButtons&&(!!infiniteScroll||currenSliderIndexInner>0),showNext=!!showButtons&&(!!infiniteScroll||currenSliderIndexInner<length-1),[isTouching,setIsTouching]=useState(!1),touchPointInfo=useRef({point1:{x:0,y:0},point2:{x:0,y:0},eventType:"none",startEl:void 0,timeDown:void 0,xDown:void 0,yDown:void 0,xDiff:void 0,yDiff:void 0,touchCount:void 0}),updateTouchPointInfo=values=>{touchPointInfo.current={...touchPointInfo.current,...values}},prevButtonProps={appearance:buttonAppearance,direction:"left",onClick:handlePrevClick},nextButtonProps={appearance:buttonAppearance,direction:"right",onClick:handleNextClick};return jsxs(Container,{ref,...props,children:[jsxs(Wrapper,{children:[jsx(ContentWrapper,{children:jsx(Content,{$currentItem:contentIndex,$contentCssMixin:contentCssMixin,$showAnimation:showAnimation,$animationDuration:animationDuration,onTransitionEnd:()=>{infiniteScroll&&(contentIndex>=contentItems.length-1||contentIndex<=0)&&(setShowAnimation(!1),setContentIndex(prevState=>(currentContentIndex=>{let newContentIndex=0;return currentContentIndex<=0?newContentIndex=contentItems.length-2:currentContentIndex>=contentItems.length-1&&(newContentIndex=1),newContentIndex})(prevState)),setTimeout(()=>setShowAnimation(!0),20))},onTouchStart:event=>{event.stopPropagation(),setIsTouching(!0);const{touches=[]}=event;1===touches.length&&updateTouchPointInfo({startEl:event.target,timeDown:Date.now(),touchCount:touches.length,eventType:"move",xDown:touches[0].clientX,yDown:touches[0].clientY,xDiff:0,yDiff:0})},onTouchMove:event=>{const{touches=[]}=event,{eventType,xDown,yDown}=touchPointInfo.current;"move"===eventType&&(updateTouchPointInfo({eventType:"move"}),xDown&&yDown&&updateTouchPointInfo({xDiff:xDown-touches[0].clientX,yDiff:yDown-touches[0].clientY}))},onTouchEnd:event=>{if(isTouching){setIsTouching(!1);const{eventType,startEl,timeDown,xDiff,yDiff,xDown,yDown}=touchPointInfo.current;if("move"===eventType){const timeUp=Date.now(),type=getSwipeType(startEl,event.target,timeDown,timeUp,xDown,yDown,xDiff,yDiff);"swiped-left"===type?handleNextClick():"swiped-right"===type&&handlePrevClick()}updateTouchPointInfo({eventType:"none",startEl:void 0,timeDown:void 0,xDown:void 0,yDown:void 0,xDiff:void 0,yDiff:void 0,touchCount:void 0})}},children:contentItems})}),showPrev&&jsx(CarouselButton,{...prevButtonProps,...prevButtonPropsConfig(prevButtonProps)}),showNext&&jsx(CarouselButton,{...nextButtonProps,...nextButtonPropsConfig(nextButtonProps)})]}),jsx(StyledCarouselSlider,{$sliderPosition:sliderPosition,children:[...Array(length).keys()].map(item=>jsx(CarouselSliderItem,{"aria-label":`Item ${item}`,appearance:sliderAppearance,isCurrent:item===currenSliderIndexInner,onClick:()=>(item=>{handleCurrentItemChange(item)})(item)},item))})]})});export{Carousel};
//# sourceMappingURL=index.es.js.map
