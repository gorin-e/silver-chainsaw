/// <reference types="react" />
import type { BadgeProps } from '../../../components/Badge';
import type { TabAppearance } from '../types';
export interface TabBadgeProps extends Omit<BadgeProps, 'dimension'> {
    disabled?: boolean;
    selected?: boolean;
}
export interface TabBadgeAppearanceProps extends TabBadgeProps {
    tabAppearance?: TabAppearance;
}
export declare const TabBadge: {
    ({ disabled, selected, tabAppearance, ...props }: TabBadgeAppearanceProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const CardTabBadge: ({ disabled, selected, ...props }: TabBadgeProps) => import("react/jsx-runtime").JSX.Element;
export declare const VerticalTabBadge: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<TabBadgeAppearanceProps, never>> & string & Omit<{
    ({ disabled, selected, tabAppearance, ...props }: TabBadgeAppearanceProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
}, keyof import("react").Component<any, {}, any>>;
export declare const FilterTabBadge: ({ disabled, selected, ...props }: TabBadgeProps) => import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=TabBadge.d.ts.map