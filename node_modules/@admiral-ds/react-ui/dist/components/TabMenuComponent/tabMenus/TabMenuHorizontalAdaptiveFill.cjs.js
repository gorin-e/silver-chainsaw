"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),styled=require("styled-components"),ActiveHorizontalTabSelector=require("../containerElements/ActiveHorizontalTabSelector.cjs.js");require("../containerElements/ActiveVerticalTabSelector.cjs.js"),require("../containerElements/SlideArrowButton.cjs.js"),require("../containerElements/HorizontalTabOverflowMenu.cjs.js"),require("../containerElements/VerticalTabOverflowMenu.cjs.js"),require("../containerElements/HorizontalAddTabButton.cjs.js"),require("../containerElements/VerticalAddTabButton.cjs.js");var HorizontalTabMenuContainer=require("../containers/HorizontalTabMenuContainer.cjs.js");require("../containers/IconTabMenuContainer.cjs.js"),require("../containers/HorizontalTabsContainer.cjs.js"),require("../containers/VerticalTabMenuContainer.cjs.js"),require("../containers/HorizontalCardTabMenuContainer.cjs.js");var utils=require("../utils.cjs.js"),debounce=require("../../common/utils/debounce.cjs.js");function _interopDefault(e){return e&&e.__esModule?e:{default:e}}const Wrapper=_interopDefault(styled).default.div`
  position: relative;
  width: 100%;
`,TabMenuHorizontalAdaptiveFill=({appearance="primary",showUnderline,selectedTabId,defaultSelectedTabId,onSelectTab,tabsId,renderTab,tabIsDisabled,showActiveTabSelector,...props})=>{const[selectedTabInner,setSelectedTabInner]=e.useState(defaultSelectedTabId),[underlineLeft,setUnderlineLeft]=e.useState(0),[underlineWidth,setUnderlineWidth]=e.useState(0),[tabWidthMap,setTabWidthMap]=e.useState([]),selectedTab=selectedTabId||selectedTabInner,containerRef=e.useRef(null),handleSelectTab=tabId=>{tabIsDisabled(tabId)||(setSelectedTabInner(tabId),onSelectTab?.(tabId))},horizontalTabs=e.useMemo(()=>tabsId.map(tabId=>renderTab(tabId,tabId===selectedTab,handleSelectTab)),[tabsId,renderTab]);e.useLayoutEffect(()=>{const setTabWidth=()=>{if(containerRef.current){const tabWidth=utils.getTabWidthMap(tabsId,containerRef.current.children);setTabWidthMap(tabWidth)}};if(containerRef.current){const resizeObserver=new ResizeObserver(debounce.debounce(setTabWidth,100));return resizeObserver.observe(containerRef.current),()=>{resizeObserver.disconnect()}}},[]);const getUnderlinePosition=()=>{const width=selectedTab?utils.getActiveTabWidth(tabWidthMap,selectedTab):0;return{left:(()=>{const index=tabsId.findIndex(tab=>tab===selectedTab);if(index<0)return 0;let left=0;for(let i=0;i<index;i++)left+=tabWidthMap.find(tab=>tab.tabId===tabsId[i])?.width||0;return left})(),width}};return e.useEffect(()=>{showActiveTabSelector&&(()=>{const{left,width}=getUnderlinePosition();setUnderlineWidth(width),setUnderlineLeft(left)})()},[selectedTab,horizontalTabs,tabWidthMap]),jsxRuntime.jsxs(Wrapper,{...props,children:[jsxRuntime.jsx(HorizontalTabMenuContainer.HorizontalTabMenuContainer,{ref:containerRef,$showUnderline:showUnderline,$showActiveTabSelector:showActiveTabSelector,children:horizontalTabs}),showActiveTabSelector&&jsxRuntime.jsx(ActiveHorizontalTabSelector.ActiveHorizontalTabSelector,{$appearance:appearance,$left:`${underlineLeft}px`,$width:`${underlineWidth}px`,$transition:!0})]})};TabMenuHorizontalAdaptiveFill.displayName="TabMenuHorizontalAdaptiveFill",exports.TabMenuHorizontalAdaptiveFill=TabMenuHorizontalAdaptiveFill;
//# sourceMappingURL=TabMenuHorizontalAdaptiveFill.cjs.js.map
