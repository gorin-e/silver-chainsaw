import{jsxs,jsx}from"react/jsx-runtime";import{useState,useRef,useLayoutEffect,useMemo,useEffect}from"react";import styled from"styled-components";import{checkOverflow}from"../../common/utils/checkOverflow.es.js";import{debounce}from"../../common/utils/debounce.es.js";import{ActiveHorizontalTabSelector}from"../containerElements/ActiveHorizontalTabSelector.es.js";import"../containerElements/ActiveVerticalTabSelector.es.js";import"../containerElements/SlideArrowButton.es.js";import{HorizontalTabOverflowMenu}from"../containerElements/HorizontalTabOverflowMenu.es.js";import"../containerElements/VerticalTabOverflowMenu.es.js";import{HorizontalAddTabButton}from"../containerElements/HorizontalAddTabButton.es.js";import"../containerElements/VerticalAddTabButton.es.js";import{HorizontalTabMenuContainer}from"../containers/HorizontalTabMenuContainer.es.js";import"../containers/IconTabMenuContainer.es.js";import"../containers/HorizontalTabsContainer.es.js";import"../containers/VerticalTabMenuContainer.es.js";import"../containers/HorizontalCardTabMenuContainer.es.js";import{OVERFLOW_MENU_CONTAINER_SIZE_L,OVERFLOW_MENU_CONTAINER_SIZE_M,ADD_TAB_BUTTON_CONTAINER_SIZE_L,ADD_TAB_BUTTON_CONTAINER_SIZE_M}from"../constants.es.js";import{getTabWidthMap,getActiveTabWidth}from"../utils.es.js";const HiddenContainer=styled.div`
  visibility: hidden;
  display: flex;
  flex-wrap: nowrap;
  box-sizing: border-box;
  overflow: hidden;
`,VisibleContainer=styled(HorizontalTabMenuContainer)`
  position: absolute;
  top: 0;
  left: 0;
`,Wrapper=styled.div`
  position: relative;
`,TabMenuHorizontalWithOverflowMenu=({dimension="l",appearance="primary",showUnderline,selectedTabId,defaultSelectedTabId,onSelectTab,onAddTab,tabsId,renderTab,renderDropMenuItem,tabIsDisabled,alignSelf,menuWidth,menuMaxHeight,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,isVisible,onVisibilityChange,active,onActivateItem,disableSelectedOptionHighlight,renderTopPanel,renderBottomPanel,onForwardCycleApprove,onBackwardCycleApprove,onClickOutside,showActiveTabSelector,...props})=>{const dropProps={alignSelf,menuWidth,menuMaxHeight,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,isVisible,onVisibilityChange,active,onActivateItem,disableSelectedOptionHighlight,renderTopPanel,renderBottomPanel,onForwardCycleApprove,onBackwardCycleApprove,onClickOutside},[containerWidth,setContainerWidth]=useState(0),visibleContainerRef=useRef(null),hiddenContainerRef=useRef(null),[overflowState,setOverflowState]=useState(!1);useLayoutEffect(()=>{if(visibleContainerRef.current){const resizeObserver=new ResizeObserver(entries=>{entries.forEach(entry=>setContainerWidth(entry.contentRect.width||0))});return resizeObserver.observe(visibleContainerRef.current),()=>{resizeObserver.disconnect()}}},[visibleContainerRef,dimension]);const showAddTabButton=!!onAddTab,[selectedTabInner,setSelectedTabInner]=useState(defaultSelectedTabId),selectedTab=selectedTabId||selectedTabInner,handleSelectTab=tabId=>{tabIsDisabled(tabId)||(setSelectedTabInner(tabId),onSelectTab?.(tabId))},horizontalTabs=useMemo(()=>tabsId.map(tabId=>renderTab(tabId,tabId===selectedTab,void 0)),[tabsId,renderTab]),[visibleTabs,setVisibleTabs]=useState([]),[hiddenTabs,setHiddenTabs]=useState([]),[tabWidthMap,setTabWidthMap]=useState([]);useEffect(()=>{const setTabWidth=()=>{if(hiddenContainerRef.current){const overflow=checkOverflow(hiddenContainerRef.current);overflowState!==overflow&&setOverflowState(overflow);const tabWidth=getTabWidthMap(tabsId,hiddenContainerRef.current.children);setTabWidthMap(tabWidth)}};if(hiddenContainerRef.current?.firstElementChild){const resizeObserver=new ResizeObserver(debounce(setTabWidth,100));return resizeObserver.observe(hiddenContainerRef.current?.firstElementChild),()=>{resizeObserver.disconnect()}}},[hiddenContainerRef,containerWidth,horizontalTabs,tabsId]),useEffect(()=>{const newVisibleTabs=[],newHiddenTabs=[];if(visibleContainerRef.current&&tabWidthMap.length>0){const maxWidth=containerWidth,addToVisible=tabId=>newVisibleTabs.push(tabId),addToHidden=tabId=>newHiddenTabs.push(tabId),activeTabWidth=tabWidthMap.find(tab=>tab.tabId===selectedTab)?.width||0;let availableWidth=maxWidth-(overflowState?("l"===dimension?OVERFLOW_MENU_CONTAINER_SIZE_L:OVERFLOW_MENU_CONTAINER_SIZE_M)+activeTabWidth:0)-(showAddTabButton?"l"===dimension?ADD_TAB_BUTTON_CONTAINER_SIZE_L:ADD_TAB_BUTTON_CONTAINER_SIZE_M:0);tabWidthMap.forEach(({tabId,width})=>{const tabIsActive=tabId===selectedTab,tabWidth=width;(availableWidth>=tabWidth||tabIsActive)&&addToVisible(tabId),(0===availableWidth||availableWidth<tabWidth&&!tabIsActive)&&addToHidden(tabId),availableWidth>0&&(tabIsActive||(availableWidth>=tabWidth?availableWidth-=tabWidth:availableWidth=0))})}setVisibleTabs(newVisibleTabs),setHiddenTabs(newHiddenTabs)},[visibleContainerRef,containerWidth,tabWidthMap,overflowState,showAddTabButton,selectedTab]);const renderedVisibleTabs=visibleTabs.map(tabId=>renderTab(tabId,tabId===selectedTab,handleSelectTab)),overflowMenuItems=useMemo(()=>0===hiddenTabs.length?[]:hiddenTabs.map(tabId=>({id:tabId,render:renderDropMenuItem(tabId),disabled:tabIsDisabled(tabId)})),[hiddenTabs,dimension]),[underlineLeft,setUnderlineLeft]=useState(0),[underlineWidth,setUnderlineWidth]=useState(0),getUnderlinePosition=()=>{const width=selectedTab?getActiveTabWidth(tabWidthMap,selectedTab):0;return{left:(()=>{const index=visibleTabs.findIndex(tab=>tab===selectedTab);if(index<0)return 0;let left=0;for(let i=0;i<index;i++)left+=tabWidthMap.find(tab=>tab.tabId===visibleTabs[i])?.width||0;return left})(),width}};return useEffect(()=>{showActiveTabSelector&&(()=>{const{left,width}=getUnderlinePosition();setUnderlineWidth(width),setUnderlineLeft(left)})()},[selectedTab,renderedVisibleTabs]),jsxs(Wrapper,{...props,children:[jsx(HiddenContainer,{ref:hiddenContainerRef,children:horizontalTabs}),jsxs(VisibleContainer,{ref:visibleContainerRef,$showUnderline:showUnderline,children:[renderedVisibleTabs,showAddTabButton&&jsx(HorizontalAddTabButton,{dimension,onClick:onAddTab}),jsx(HorizontalTabOverflowMenu,{...dropProps,items:overflowMenuItems,isHidden:!overflowState,onSelectItem:handleSelectTab,selected:selectedTab,dimension}),showActiveTabSelector&&jsx(ActiveHorizontalTabSelector,{$appearance:appearance,$left:`${underlineLeft}px`,$width:`${underlineWidth}px`,$transition:!0})]})]})};TabMenuHorizontalWithOverflowMenu.displayName="TabMenuHorizontalWithOverflowMenu";export{TabMenuHorizontalWithOverflowMenu};
//# sourceMappingURL=TabMenuHorizontalWithOverflowMenu.es.js.map
