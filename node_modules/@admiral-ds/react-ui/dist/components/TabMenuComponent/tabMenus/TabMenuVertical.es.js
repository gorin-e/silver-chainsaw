import{jsx,jsxs}from"react/jsx-runtime";import{useRef,useState,useLayoutEffect,useEffect,useMemo}from"react";import styled from"styled-components";import"../containers/HorizontalTabMenuContainer.es.js";import"../containers/IconTabMenuContainer.es.js";import"../containers/HorizontalTabsContainer.es.js";import{VerticalTabMenuContainer}from"../containers/VerticalTabMenuContainer.es.js";import"../containers/HorizontalCardTabMenuContainer.es.js";import"../containerElements/ActiveHorizontalTabSelector.es.js";import{ActiveVerticalTabSelector}from"../containerElements/ActiveVerticalTabSelector.es.js";import"../containerElements/SlideArrowButton.es.js";import"../containerElements/HorizontalTabOverflowMenu.es.js";import{VerticalTabOverflowMenu}from"../containerElements/VerticalTabOverflowMenu.es.js";import"../containerElements/HorizontalAddTabButton.es.js";import{VerticalAddTabButton}from"../containerElements/VerticalAddTabButton.es.js";import{VERTICAL_ADD_TAB_BUTTON_CONTAINER_SIZE_L,VERTICAL_ADD_TAB_BUTTON_CONTAINER_SIZE_M,VERTICAL_TABS_GAP,BASE_TAB_HEIGHT_L,BASE_TAB_HEIGHT_M,VERTICAL_OVERFLOW_MENU_CONTAINER_SIZE_L,VERTICAL_OVERFLOW_MENU_CONTAINER_SIZE_M}from"../constants.es.js";const Wrapper=styled.div`
  flex: 1 1 auto;
  overflow: hidden;
`,TabMenuVertical=({dimension="l",showUnderline,underlinePosition="right",selectedTabId,defaultSelectedTabId,onSelectTab,onAddTab,tabsId,renderTab,renderDropMenuItem,tabIsDisabled,alignSelf,menuWidth,menuMaxHeight,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,isVisible,onVisibilityChange,active,onActivateItem,disableSelectedOptionHighlight,renderTopPanel,renderBottomPanel,onForwardCycleApprove,onBackwardCycleApprove,onClickOutside,appearance,...props})=>{const dropProps={alignSelf,menuWidth,menuMaxHeight,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,isVisible,onVisibilityChange,active,onActivateItem,disableSelectedOptionHighlight,renderTopPanel,renderBottomPanel,onForwardCycleApprove,onBackwardCycleApprove,onClickOutside},containerRef=useRef(null),[containerHeight,setContainerHeight]=useState(0),[maxTabs,setMaxTabs]=useState(0);useLayoutEffect(()=>{if(containerRef.current){const resizeObserver=new ResizeObserver(entries=>{entries.forEach(entry=>setContainerHeight(entry.contentRect.height||0))});return resizeObserver.observe(containerRef.current),()=>{resizeObserver.disconnect()}}},[]),useEffect(()=>{if(containerRef.current){const addTabButtonHeight=showAddTabButton?("l"===dimension?VERTICAL_ADD_TAB_BUTTON_CONTAINER_SIZE_L:VERTICAL_ADD_TAB_BUTTON_CONTAINER_SIZE_M)+VERTICAL_TABS_GAP:0,newMaxTabs=Math.floor((containerHeight+VERTICAL_TABS_GAP-addTabButtonHeight)/(("l"===dimension?BASE_TAB_HEIGHT_L:BASE_TAB_HEIGHT_M)+VERTICAL_TABS_GAP));setMaxTabs(newMaxTabs)}},[containerRef,containerHeight,dimension,tabsId]);const showAddTabButton=!!onAddTab,[selectedTabInner,setSelectedTabInner]=useState(defaultSelectedTabId),selectedTab=selectedTabId||selectedTabInner,handleSelectTab=tabId=>{tabIsDisabled(tabId)||(setSelectedTabInner(tabId),onSelectTab?.(tabId))},[visibleTabs,setVisibleTabs]=useState([]),[hiddenTabs,setHiddenTabs]=useState([]);useLayoutEffect(()=>{const maxHeight=containerHeight,allTabsVisible=tabsId.length<=maxTabs,newVisibleTabs=[],newHiddenTabs=[],tabHeight="l"===dimension?BASE_TAB_HEIGHT_L:BASE_TAB_HEIGHT_M,availableHeight=maxHeight-(allTabsVisible?0:("l"===dimension?VERTICAL_OVERFLOW_MENU_CONTAINER_SIZE_L:VERTICAL_OVERFLOW_MENU_CONTAINER_SIZE_M)+VERTICAL_TABS_GAP+tabHeight)-(showAddTabButton?("l"===dimension?VERTICAL_ADD_TAB_BUTTON_CONTAINER_SIZE_L:VERTICAL_ADD_TAB_BUTTON_CONTAINER_SIZE_M)+VERTICAL_TABS_GAP:0);let availableTabs=Math.floor((availableHeight+VERTICAL_TABS_GAP)/(tabHeight+VERTICAL_TABS_GAP));tabsId.forEach(tabId=>{const tabIsActive=tabId===selectedTab;(availableTabs>0||tabIsActive)&&(tabId=>{newVisibleTabs.push(tabId)})(tabId),0===availableTabs&&(tabId=>{newHiddenTabs.push(tabId)})(tabId),availableTabs>0&&(tabIsActive||(availableTabs-=1))}),setVisibleTabs(newVisibleTabs),setHiddenTabs(newHiddenTabs)},[maxTabs,selectedTab,containerHeight,tabsId]);const renderedVisibleTabs=useMemo(()=>0===visibleTabs.length?[]:visibleTabs.map(tabId=>renderTab(tabId,tabId===selectedTab,handleSelectTab)),[visibleTabs,dimension]),overflowMenuItems=useMemo(()=>0===hiddenTabs.length?[]:hiddenTabs.map(tabId=>({id:tabId,render:renderDropMenuItem(tabId),disabled:tabIsDisabled(tabId)})),[hiddenTabs,dimension]),[underlineTop,setUnderlineTop]=useState(0),[underlineHeight,setUnderlineHeight]=useState(0),styleUnderlineL=()=>{const{top,height}=(()=>{const index=visibleTabs.findIndex(tab=>tab===selectedTab);if(index<0)return{top:0,height:0};const height="l"===dimension?BASE_TAB_HEIGHT_L:BASE_TAB_HEIGHT_M;return{top:index*(height+VERTICAL_TABS_GAP),height}})();setUnderlineHeight(height),setUnderlineTop(top)};return useEffect(()=>{styleUnderlineL()},[selectedTab,renderedVisibleTabs]),jsx(Wrapper,{children:jsxs(VerticalTabMenuContainer,{...props,ref:containerRef,$underlinePosition:underlinePosition,$showUnderline:showUnderline,children:[renderedVisibleTabs,showAddTabButton&&jsx(VerticalAddTabButton,{dimension,onClick:onAddTab}),jsx(VerticalTabOverflowMenu,{...dropProps,items:overflowMenuItems,onSelectItem:handleSelectTab,selected:selectedTab,dimension,isHidden:0===hiddenTabs.length}),jsx(ActiveVerticalTabSelector,{$appearance:appearance,$top:`${underlineTop}px`,$height:`${underlineHeight}px`,$transition:!0,$underlinePosition:underlinePosition})]})})};TabMenuVertical.displayName="TabMenuVertical";export{TabMenuVertical};
//# sourceMappingURL=TabMenuVertical.es.js.map
