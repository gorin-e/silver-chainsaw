/// <reference types="react" />
export declare const hideNativeScrollbarsCss: import("styled-components").RuleSet<object>;
declare const HiddenNativeScroll: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
declare const VerticalContainer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
declare const HorizontalContainer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export type ScrollContainerProps<T extends React.ElementType = 'div'> = React.ComponentPropsWithoutRef<T> & ScrollbarProps & {
    /** Props для контейнера контента */
    contentBlockProps?: React.ComponentPropsWithRef<typeof HiddenNativeScroll>;
};
export type ScrollbarProps = {
    /** Props для контейнера, содержащего вертикальный скролбар */
    verticalScrollProps?: React.ComponentPropsWithRef<typeof VerticalContainer>;
    /** Props для контейнера, содержащего горизонтальный скролбар */
    horizontalScrollProps?: React.ComponentPropsWithRef<typeof HorizontalContainer>;
    /** Минимально допустимая длина скролбара в пикселях */
    minThumbSize?: number;
};
export declare const ScrollContainer: (props: Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & ScrollbarProps & {
    /** Props для контейнера контента */
    contentBlockProps?: (Omit<import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>, "ref"> & {
        ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
    }) | undefined;
} & import("react").RefAttributes<HTMLDivElement>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
export declare const Scrollbars: ({ verticalScrollProps, horizontalScrollProps, contentNode, minThumbSize, }: ScrollbarProps & {
    contentNode?: HTMLElement | null | undefined;
}) => import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=index.d.ts.map