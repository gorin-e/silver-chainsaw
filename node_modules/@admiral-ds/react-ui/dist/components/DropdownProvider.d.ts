/// <reference types="react" />
export interface DropdownContextProps {
    addDropdown?: (newDropdown: React.RefObject<HTMLElement>) => void;
    removeDropdown?: (removeDropdown: React.RefObject<HTMLElement>) => void;
    dropdowns: React.RefObject<HTMLElement>[];
    /** ref на дом элемент внутри которого будут создаваться все дроп контейнеры */
    rootRef?: React.RefObject<HTMLElement>;
    activateMenu?: (menuRef: React.RefObject<HTMLElement>) => void;
    deactivateMenu?: (menuRef: React.RefObject<HTMLElement>) => void;
    currentActiveMenu: React.RefObject<HTMLElement> | undefined;
}
export declare const DropdownContext: import("react").Context<DropdownContextProps>;
interface ProviderProps {
    children?: React.ReactNode;
    /** ref на дом элемент внутри которого будут создаваться все дроп контейнеры */
    rootRef?: React.RefObject<HTMLElement>;
}
export declare const DropdownProvider: ({ rootRef, ...props }: ProviderProps) => import("react/jsx-runtime").JSX.Element;
export declare function useDropdown(dropdownRef: React.RefObject<HTMLElement>): DropdownContextProps;
/** Функция возращает true, если клик не произошёл ни в одном из дропдаунов и был вне их; иначе возвращает false */
export declare const useDropdownsClickOutside: (e: Event, dropdowns: React.RefObject<HTMLElement>[]) => boolean;
export {};
//# sourceMappingURL=DropdownProvider.d.ts.map