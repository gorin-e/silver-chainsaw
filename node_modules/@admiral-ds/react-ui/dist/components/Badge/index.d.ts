import * as React from 'react';
import type { ButtonProps } from '../../components/Button';
import type { SegmentedControlProps } from '../../components/SegmentedControl';
type Dimension = 'm' | 's';
export type BadgeAppearance = 'light' | 'info' | 'warning' | 'success' | 'error' | 'grey' | 'dark' | 'lightInactive' | 'lightDisable' | 'white' | 'whiteInactive' | 'whiteDisable' | 'whiteBlue';
export declare const BadgeComponent: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $dimension: Dimension;
    $appearance: BadgeAppearance;
}>> & string;
export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {
    /** Размер компонента */
    dimension?: Dimension;
    /** Внешний вид компонента */
    appearance?: BadgeAppearance;
    /** Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,
     * по умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме
     **/
    locale?: {
        /** Атрибут aria-label, описывающий количественное значение, отображаемое компонентом Badge */
        amountAriaLabel?: string;
    };
}
export declare const Badge: React.ForwardRefExoticComponent<BadgeProps & React.RefAttributes<HTMLDivElement>>;
interface ButtonBadgeProps extends Omit<BadgeProps, 'appearance' | 'dimension'>, Pick<ButtonProps, 'appearance'> {
    disabled?: boolean;
}
export declare const ButtonBadge: ({ appearance, disabled, ...props }: ButtonBadgeProps) => import("react/jsx-runtime").JSX.Element | null;
interface SegmentedControlBadgeProps extends Omit<BadgeProps, 'appearance' | 'dimension'>, Pick<SegmentedControlProps, 'appearance'> {
    disabled?: boolean;
}
export declare const SegmentedControlBadge: ({ appearance, disabled, ...props }: SegmentedControlBadgeProps) => import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=index.d.ts.map