import type { PropsWithChildren } from 'react';
import type { NotificationProps } from '../../components/Notification';
import type { NotificationItemStatus } from '../../components/NotificationItem';
/** Данный шаблон предназначен для перехода на новую модель c Notification на
 * NotificationItem в ToastProvider.
 * Рекомендуется в дальнейшем использовать новый вариант NotificationItem
 * с полностью кастомным наполнением согласно дизайну
 * (пример можно посмотреть в разделе NotificationItem) */
export declare const DefaultToastItem: {
    ({ title, linkText, href, onClose, children, ...props }: PropsWithChildren<NotificationProps>): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export interface ToastItemWithAutoDeleteProps {
    /** Колбек для удаления уведомления */
    onRemoveNotification: () => void;
    /** Время, после которого уведомление автоматически удалится */
    autoDeleteTime?: number;
}
/** Шаблон для отображения кастомного уведомления с автоматическим удалением
 * через заданное время */
export declare const ToastItemWithAutoDelete: {
    ({ children, onRemoveNotification, autoDeleteTime, }: PropsWithChildren<ToastItemWithAutoDeleteProps>): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
/** Шаблон для отображения кастомного уведомления со шкалой отсчета времени,
 * через которое оно закроется */
export interface ToastItemWithProgressProps {
    /** Колбек для удаления уведомления */
    onRemoveNotification: () => void;
    /** Время, после которого уведомление автоматически удалится */
    autoDeleteTime?: number;
    /** Статус уведомления */
    status?: NotificationItemStatus;
    /** Шаг шкалы отсчета времени */
    progressStep?: number;
}
export declare const ToastItemWithProgress: {
    ({ children, status, onRemoveNotification, autoDeleteTime, progressStep, }: PropsWithChildren<ToastItemWithProgressProps>): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ToastItem.d.ts.map