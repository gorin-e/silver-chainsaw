import type { ReactNode } from 'react';
import type { NotificationProps } from '../../components/Notification';
import type { IdentifyToast, ID } from './type';
export type PositionToasts = 'top-right' | 'bottom-right' | 'bottom-left';
export interface ToastProps {
    /** Позиция всплывающего уведомления */
    position?: PositionToasts;
    /** Ширина контейнера уведомлений */
    widthContainer?: number | string;
    /** Время, через которое удаляются уведомления */
    autoDeleteTime?: number;
    /** Элементы, имеющие доступ к контексту */
    children?: ReactNode;
}
export interface ToastItemProps {
    /**
     * @deprecated Помечено как deprecated в версии 4.4.0, будет удалено в версии 9.х.х.
     * Взамен для идентификации уведомления используйте render функцию.
     *
     * Идентификатор уведомления */
    id: ID;
    /** Render функция всплывающего уведомления */
    renderToast: (id: ID) => ReactNode;
}
export interface IdentifyToastItemProps extends Omit<NotificationProps, 'id'>, IdentifyField {
}
export interface IContextProps extends ToastProps {
    /**
     * @deprecated Помечено как deprecated в версии 4.4.0, будет удалено в версии 9.х.х.
     * Не рекомендуется использовать в связи с переходом на новую структуру ToastProvider.
     * Взамен используйте параметр addToastItem.
     *
     * Добавление всплывающего уведомления через модель для Notification */
    addToast: (newToast: IdentifyToast) => string;
    /**
     * @deprecated Помечено как deprecated в версии 4.4.0, будет удалено в версии 9.х.х.
     * Не рекомендуется использовать в связи с переходом на новую структуру ToastProvider.
     * Взамен используйте параметр removeToastItem.
     *
     * Удаление всплывающего уведомления через модель для Notification */
    removeToast: (removeToast: IdentifyToast) => void;
    /**
     * @deprecated Помечено как deprecated в версии 4.4.0, будет удалено в версии 9.х.х.
     * Не рекомендуется использовать в связи с переходом на новую структуру ToastProvider.
     * Взамен используйте removeToastItem.
     *
     * Удаление всплывающего уведомления по идентификатору */
    removeById: (toastId: ID) => void;
    /** Добавление всплывающего уведомления.
     * Позволяет передавать в качестве уведомления любой необходимый элемент */
    addToastItem: (toast: ToastItemProps) => void;
    /** Получение всплывающего уведомления по идентификатору */
    findToastItemById: (toastId: ID) => ToastItemProps | undefined;
    /** Удаление всплывающего уведомления */
    removeToastItem: (toast: ToastItemProps) => void;
    /**
     * @deprecated Помечено как deprecated в версии 4.4.0, будет удалено в версии 9.х.х.
     * Не рекомендуется использовать в связи с переходом на новую структуру ToastProvider.
     * Взамен используйте параметр toastItemList.
     *
     * Список существующих уведомлений
     **/
    toasts: IdentifyToast[];
    /** Список существующих уведомлений */
    toastItemList: ToastItemProps[];
}
export declare const ToastContext: import("react").Context<IContextProps>;
interface IdentifyField {
    id: ID;
}
export declare const ToastProvider: ({ autoDeleteTime, ...props }: ToastProps) => import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=ToastProvider.d.ts.map