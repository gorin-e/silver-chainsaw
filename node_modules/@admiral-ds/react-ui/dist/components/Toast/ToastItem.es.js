import{jsxs,jsx,Fragment}from"react/jsx-runtime";import{useEffect,useState}from"react";import styled from"styled-components";import"../themes/common/locales.es.js";import{typography}from"../Typography/typography.es.js";import"../Typography/defaultTypographyMixin.es.js";import{mediumGroupBorderRadius}from"../themes/borderRadius.es.js";import{Link}from"../Link/index.es.js";import{StyledNotificationItem,NotificationItemTitle,NotificationItemContent,NotificationItemButtonPanel}from"../NotificationItem/index.es.js";const StyledLink=styled(Link)`
  ${typography["Button/Button 2"]}
`,DefaultToastItem=({title,linkText="",href="",onClose,children,...props})=>jsxs(StyledNotificationItem,{...props,onClose,children:[title&&jsx(NotificationItemTitle,{children:title}),jsx(NotificationItemContent,{children}),linkText&&jsx(NotificationItemButtonPanel,{children:jsx(StyledLink,{href,children:linkText||href})})]}),ToastItemWithAutoDelete=({children,onRemoveNotification,autoDeleteTime})=>(useEffect(()=>{if(!autoDeleteTime)return;const timerId=setTimeout(()=>onRemoveNotification(),autoDeleteTime);return()=>{clearTimeout(timerId)}},[]),jsx(Fragment,{children})),Progress=styled.div.attrs(props=>({style:{width:`${props.$percent}%`}}))`
  position: absolute;
  bottom: 0;
  left: 0;
  background: ${({theme,$status})=>{switch($status){case"warning":return`var(--admiral-color-Warning_Warning50Main, ${theme.color["Warning/Warning 50 Main"]})`;case"error":return`var(--admiral-color-Error_Error60Main, ${theme.color["Error/Error 60 Main"]})`;case"success":return`var(--admiral-color-Success_Success50Main, ${theme.color["Success/Success 50 Main"]})`;default:return`var(--admiral-color-Primary_Primary60Main, ${theme.color["Primary/Primary 60 Main"]})`}}};
  height: 4px;
  transition: ${({$duration})=>`all ${$duration}ms linear`};
`,Wrapper=styled.div`
  position: relative;
  overflow: hidden;
  border-radius: var(--admiral-border-radius-Medium, ${p=>mediumGroupBorderRadius(p.theme.shape)});
`,ToastItemWithProgress=({children,status,onRemoveNotification,autoDeleteTime,progressStep=1})=>{const[progress,setProgress]=useState(100),delta=(autoDeleteTime||0)/(100*progressStep);return useEffect(()=>{if(!autoDeleteTime)return;if(0===progress)return void onRemoveNotification();const timerId=setTimeout(()=>setProgress(prev=>prev-1),delta);return()=>{clearTimeout(timerId)}},[progress,progressStep]),jsxs(Wrapper,{children:[children,progress>0&&jsx(Progress,{$percent:progress,$status:status,$duration:delta})]})};DefaultToastItem.displayName="DefaultToastItem",ToastItemWithAutoDelete.displayName="ToastItemWithAutoDelete",ToastItemWithProgress.displayName="ToastItemWithProgress";export{DefaultToastItem,ToastItemWithAutoDelete,ToastItemWithProgress};
//# sourceMappingURL=ToastItem.es.js.map
