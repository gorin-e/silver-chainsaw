import{jsx,Fragment}from"react/jsx-runtime";import{createContext,useState,useCallback,useMemo}from"react";import{uid}from"../common/uid.es.js";import{ToastItemWithAutoDelete,DefaultToastItem}from"./ToastItem.es.js";const ToastContext=createContext({});function makeToastList(prevList,newToast){return prevList.every(item=>item.id!==newToast.id)?[newToast,...prevList]:prevList}const ToastProvider=({autoDeleteTime,...props})=>{const[toasts,setToast]=useState([]),[toastItemList,setToastItemList]=useState([]),addToast=useCallback(toast=>{const id=uid(),newToast={...toast,id};setToast(prevToasts=>makeToastList(prevToasts,newToast));const renderDefaultNotificationItem=()=>{const handleOnClose=()=>{removeToastItem({id,renderToast:renderDefaultNotificationItem})};return jsx(Fragment,{children:autoDeleteTime?jsx(ToastItemWithAutoDelete,{onRemoveNotification:handleOnClose,autoDeleteTime,children:jsx(DefaultToastItem,{...toast,onClose:toast.onClose||handleOnClose})}):jsx(DefaultToastItem,{...toast,onClose:toast.onClose||handleOnClose})})},newRenderToast={id,renderToast:renderDefaultNotificationItem};return setToastItemList(prevToasts=>makeToastList(prevToasts,newRenderToast)),id},[]),removeToast=useCallback(removeToast=>{setToast(prevToasts=>prevToasts.filter(({id})=>id!==removeToast.id)),setToastItemList(prevToasts=>prevToasts.filter(({id})=>id!==removeToast.id))},[]),removeById=useCallback(toastId=>{setToast(prevToasts=>prevToasts.filter(({id})=>id!==toastId)),setToastItemList(prevToasts=>prevToasts.filter(({id})=>id!==toastId))},[]),addToastItem=useCallback(toastItem=>{setToast(prevToasts=>makeToastList(prevToasts,{id:toastItem.id})),setToastItemList(prevToasts=>makeToastList(prevToasts,toastItem))},[]),findToastItemById=toastId=>toastItemList.find(item=>item.id===toastId),removeToastItem=useCallback(removeToast=>{setToast(prevToasts=>prevToasts.filter(({id})=>id!==removeToast.id)),setToastItemList(prevToasts=>prevToasts.filter(toast=>toast.renderToast!==removeToast.renderToast))},[]),providerValue=useMemo(()=>({addToast,removeToast,removeById,addToastItem,findToastItemById,removeToastItem,toasts,toastItemList,autoDeleteTime}),[addToast,removeToast,removeById,addToastItem,findToastItemById,removeToastItem,toasts,toastItemList,autoDeleteTime]);return jsx(ToastContext.Provider,{value:providerValue,children:props.children})};export{ToastContext,ToastProvider};
//# sourceMappingURL=ToastProvider.es.js.map
