"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),refSetter=require("../common/utils/refSetter.cjs.js"),checkOverflow=require("../common/utils/checkOverflow.cjs.js"),index=require("../Tooltip/index.cjs.js"),style=require("./style.cjs.js");const Tag=e.forwardRef(({children,kind="neutral",dimension="m",width,statusViaBackground=!1,isBorderHidden=!1,icon,statusIcon,onClick,...props},ref)=>{const wrapperRef=e.useRef(null),textRef=e.useRef(null),[overflow,setOverflow]=e.useState(!1),[tooltipVisible,setTooltipVisible]=e.useState(!1),background="object"==typeof kind?kind.background?kind.background:"neutral":kind,border=isBorderHidden?"transparent":"object"==typeof kind?kind.background&&kind.border?kind.border:"neutral":kind,backgroundHover="object"==typeof kind?kind.backgroundHover?kind.backgroundHover:kind.background?kind.background:"neutral":kind;return e.useLayoutEffect(()=>{const element=textRef.current;element&&checkOverflow.checkOverflow(element)!==overflow&&setOverflow(checkOverflow.checkOverflow(element))},[tooltipVisible,setOverflow]),e.useLayoutEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}const wrapper=wrapperRef.current;if(wrapper)return wrapper.addEventListener("mouseenter",show),wrapper.addEventListener("mouseleave",hide),wrapper.addEventListener("focus",show),wrapper.addEventListener("blur",hide),()=>{wrapper.removeEventListener("mouseenter",show),wrapper.removeEventListener("mouseleave",hide),wrapper.removeEventListener("focus",show),wrapper.removeEventListener("blur",hide)}},[setTooltipVisible]),jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsxs(style.Wrapper,{ref:refSetter.refSetter(ref,wrapperRef),$width:width,onClick,$clickable:!!onClick,$statusViaBackground:statusViaBackground,$border:border,$background:background,$backgroundHover:backgroundHover,$dimension:dimension,type:"button",...props,children:["neutral"!==background&&!statusViaBackground&&jsxRuntime.jsx(style.TagCircle,{$background:background}),statusViaBackground&&icon&&jsxRuntime.jsx(style.Icon,{children:icon}),children&&jsxRuntime.jsx(style.Text,{ref:textRef,children}),statusIcon&&jsxRuntime.jsx(style.StatusIcon,{children:statusIcon})]}),tooltipVisible&&overflow&&jsxRuntime.jsx(index.Tooltip,{targetElement:wrapperRef.current,renderContent:()=>children})]})});Tag.displayName="Tag",exports.TagCircle=style.TagCircle,exports.Tag=Tag;
//# sourceMappingURL=index.cjs.js.map
