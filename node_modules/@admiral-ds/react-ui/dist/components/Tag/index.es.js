import{jsxs,Fragment,jsx}from"react/jsx-runtime";import{forwardRef,useRef,useState,useLayoutEffect}from"react";import{refSetter}from"../common/utils/refSetter.es.js";import{checkOverflow}from"../common/utils/checkOverflow.es.js";import{Tooltip}from"../Tooltip/index.es.js";import{Wrapper,TagCircle,Icon,Text,StatusIcon}from"./style.es.js";const Tag=forwardRef(({children,kind="neutral",dimension="m",width,statusViaBackground=!1,isBorderHidden=!1,icon,statusIcon,onClick,...props},ref)=>{const wrapperRef=useRef(null),textRef=useRef(null),[overflow,setOverflow]=useState(!1),[tooltipVisible,setTooltipVisible]=useState(!1),background="object"==typeof kind?kind.background?kind.background:"neutral":kind,border=isBorderHidden?"transparent":"object"==typeof kind?kind.background&&kind.border?kind.border:"neutral":kind,backgroundHover="object"==typeof kind?kind.backgroundHover?kind.backgroundHover:kind.background?kind.background:"neutral":kind;return useLayoutEffect(()=>{const element=textRef.current;element&&checkOverflow(element)!==overflow&&setOverflow(checkOverflow(element))},[tooltipVisible,setOverflow]),useLayoutEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}const wrapper=wrapperRef.current;if(wrapper)return wrapper.addEventListener("mouseenter",show),wrapper.addEventListener("mouseleave",hide),wrapper.addEventListener("focus",show),wrapper.addEventListener("blur",hide),()=>{wrapper.removeEventListener("mouseenter",show),wrapper.removeEventListener("mouseleave",hide),wrapper.removeEventListener("focus",show),wrapper.removeEventListener("blur",hide)}},[setTooltipVisible]),jsxs(Fragment,{children:[jsxs(Wrapper,{ref:refSetter(ref,wrapperRef),$width:width,onClick,$clickable:!!onClick,$statusViaBackground:statusViaBackground,$border:border,$background:background,$backgroundHover:backgroundHover,$dimension:dimension,type:"button",...props,children:["neutral"!==background&&!statusViaBackground&&jsx(TagCircle,{$background:background}),statusViaBackground&&icon&&jsx(Icon,{children:icon}),children&&jsx(Text,{ref:textRef,children}),statusIcon&&jsx(StatusIcon,{children:statusIcon})]}),tooltipVisible&&overflow&&jsx(Tooltip,{targetElement:wrapperRef.current,renderContent:()=>children})]})});Tag.displayName="Tag";export{Tag,TagCircle};
//# sourceMappingURL=index.es.js.map
