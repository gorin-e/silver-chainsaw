/// <reference types="react" />
export type TagDimension = 'm' | 's';
/**
 * @deprecated Помечено как deprecated в версии 4.14.0, будет удалено в версии 9.х.х.
 * Взамен используйте альтернативные значения 'neutral' | 'success' | 'primary' | 'danger' | 'warning'
 */
export type DeprecatedTagKind = 'green' | 'blue' | 'red' | 'orange';
export type TagKind = 'neutral' | 'success' | 'primary' | 'danger' | 'warning' | DeprecatedTagKind;
export interface TagVisualProps {
    /** Тип тэга. Можно выбрать из предложенных вариантов, либо задать свои цвета для тэга.
     * В случае когда статус задается через статусную метку (кружок), свойство background отвечает за цвет статусной метки.
     * В случае когда статус задается через цвет фона и обводки, свойство background отвечает за цвет фона,
     * свойство border отвечает за цвет обводки, свойство backgroundHover отвечает за цвет фона при ховере в случае активного тэга.
     */
    kind?: TagKind | {
        background: string;
        border?: string;
        backgroundHover?: string;
    };
    /** Отображение статуса через цвет обводки и фона. По умолчанию, при statusViaBackground = false, отображение статуса
     * происходит через цветную статусную метку (цветной кружок рядом с текстом)
     */
    statusViaBackground?: boolean;
    /** Скрыть обводку тэга (при условии, что статус отображается через цвет обводки и фона) */
    isBorderHidden?: boolean;
    /** Отображение иконки. Иконка отображается только по левому краю и при условии, что статус отображается через цвет обводки и фона */
    icon?: React.ReactNode;
}
export interface TagSizeProps {
    /** Высота тэга */
    dimension?: TagDimension;
    /** Ширина тэга */
    width?: number | string;
    /**
     * Позволяет рендерить компонент, используя другой тег HTML (https://styled-components.com/docs/api#as-polymorphic-prop).
     * В storybook в качестве примера приведены несколько возможных вариантов этого параметра (кроме них можно использовать любой другой HTML тег).
     */
    as?: React.ElementType;
}
export interface TagProps extends React.HTMLAttributes<HTMLButtonElement>, TagVisualProps, TagSizeProps {
}
export interface TagInternalProps {
    /** Для внутреннего использования! Отображение иконки отрытия выпадающего меню */
    statusIcon?: React.ReactNode;
}
export declare const Tag: import("react").ForwardRefExoticComponent<TagProps & TagInternalProps & import("react").RefAttributes<HTMLElement>>;
export { TagCircle } from './style';
//# sourceMappingURL=index.d.ts.map