const rectChanged=(a,b)=>{return(obj=a,Object.keys(obj)).some(prop=>a[prop]!==b[prop]);var obj};function observeRect(node,cb){const state={};return{observe(){state.rafId&&cancelAnimationFrame(state.rafId);const run=()=>{if(state.isObserving){const{scrollHeight,scrollLeft,scrollTop,scrollWidth}=node,{bottom,height,left,right,top,width,x,y}=node.getBoundingClientRect(),newRect={bottom,height,left,right,top,width,x:x||left,y:y||top,scrollHeight,scrollLeft,scrollTop,scrollWidth};rectChanged(newRect,state.rect||{})&&(state.rect=newRect,cb(newRect)),state.rafId=requestAnimationFrame(run)}};state.rafId=requestAnimationFrame(run),state.isObserving=!0},unobserve(){state.rafId&&cancelAnimationFrame(state.rafId),state.isObserving&&(state.isObserving=!1)}}}export{observeRect as default};
//# sourceMappingURL=observeRect.es.js.map
