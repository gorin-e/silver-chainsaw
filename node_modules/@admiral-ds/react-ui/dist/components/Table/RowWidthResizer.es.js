import{jsx}from"react/jsx-runtime";import*as e from"react";import styled from"styled-components";import{throttle}from"../common/utils/throttle.es.js";const ResizerWrapper=styled.div`
  position: absolute;
  right: -9px;
  z-index: 1;
  top: 0;
  width: ${"17px"};
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  cursor: ${({disabled})=>disabled?"default":"col-resize"};

  padding: ${({$dimension})=>{switch($dimension){case"s":return"8px 0 7px 0";case"l":return"14px 0 13px 0";case"xl":return"18px 0 17px 0";default:return"12px 0 11px 0"}}};
`,Resizer=styled.div`
  box-sizing: border-box;
  width: 1px;
  height: 100%;
  background: var(--admiral-color-Neutral_Neutral20, ${p=>p.theme.color["Neutral/Neutral 20"]});
`;function RowWidthResizer({name,disabled,dimension,columnMinWidth,onChange}){const node=e.useRef(null),clientXRef=e.useRef(0),[isTaken,setTaken]=e.useState(!1),handleResize=e=>{e.preventDefault();const width=node.current?.parentElement?.getBoundingClientRect().width||100,clientX=e.changedTouches?e.changedTouches[0].clientX:e.clientX;let newWidth=width-(clientXRef.current-clientX);newWidth=newWidth>=columnMinWidth?newWidth:columnMinWidth,width!==newWidth&&onChange({name,width:newWidth}),clientXRef.current=clientX},handleClick=e=>{e.preventDefault(),e.stopPropagation(),setTaken(!0),clientXRef.current=e.changedTouches?e.changedTouches[0].clientX:e.clientX},handleMouseUp=e=>{isTaken&&(handleResize(e),setTaken(!1))},[updateOnMove,freeResources]=throttle(e=>{isTaken&&handleResize(e)},100);return e.useEffect(()=>{if(!disabled)return document.addEventListener("mousemove",updateOnMove),document.addEventListener("mouseup",handleMouseUp),document.addEventListener("touchmove",updateOnMove),document.addEventListener("touchend",handleMouseUp),()=>{freeResources(),document.removeEventListener("mousemove",updateOnMove),document.removeEventListener("mouseup",handleMouseUp),document.removeEventListener("touchmove",updateOnMove),document.removeEventListener("touchend",handleMouseUp)}}),e.useEffect(()=>{const wrapper=node.current;if(!disabled&&wrapper)return wrapper.addEventListener("mousedown",handleClick),wrapper.addEventListener("touchstart",handleClick),()=>{wrapper.removeEventListener("mousedown",handleClick),wrapper.removeEventListener("touchstart",handleClick)}},[disabled]),jsx(ResizerWrapper,{ref:node,disabled,$dimension:dimension,children:jsx(Resizer,{})})}export{Resizer,ResizerWrapper,RowWidthResizer};
//# sourceMappingURL=RowWidthResizer.es.js.map
