import{jsx,jsxs,Fragment}from"react/jsx-runtime";import{forwardRef,useState,useEffect,useMemo}from"react";import{Body,Spacer}from"../style.es.js";const FixedSizeBody=forwardRef(({childHeight,renderAhead=20,rowList,renderRow,renderEmptyMessage,tableRef,tableHeight,headerHeight,...props},ref)=>{const[scrollTop,setScrollTop]=useState(0),[height,setHeight]=useState(tableHeight-headerHeight);useEffect(()=>{setHeight(tableHeight-headerHeight)},[tableHeight,headerHeight]),useEffect(()=>{function handleScroll(e){requestAnimationFrame(()=>{setScrollTop(e.target.scrollTop)})}const scrollContainer=tableRef.current;return setScrollTop(scrollContainer?.scrollTop||0),scrollContainer?.addEventListener("scroll",handleScroll),()=>scrollContainer?.removeEventListener("scroll",handleScroll)},[tableRef]);const rowNodes=useMemo(()=>rowList.map((row,index)=>renderRow(row,index)).filter(Boolean),[rowList,renderRow]),itemCount=rowNodes.length;let startNode=Math.floor(scrollTop/childHeight);startNode=Math.max(0,startNode-renderAhead);let visibleNodeCount=Math.ceil(height/childHeight)+2*renderAhead;visibleNodeCount=Math.min(itemCount-startNode,visibleNodeCount);const topPadding=startNode*childHeight+"px",bottomPadding=(itemCount-startNode-visibleNodeCount)*childHeight+"px",visibleChildren=useMemo(()=>[...rowNodes].slice(startNode,startNode+visibleNodeCount),[rowNodes,startNode,visibleNodeCount]);return jsx(Body,{style:{height},ref,...props,children:renderEmptyMessage?renderEmptyMessage():jsxs(Fragment,{children:[jsx(Spacer,{style:{minHeight:topPadding}}),visibleChildren,jsx(Spacer,{style:{minHeight:bottomPadding}})]})})});export{FixedSizeBody};
//# sourceMappingURL=FixedSizeBody.es.js.map
