"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),reactDom=require("react-dom"),DropdownProvider=require("../../DropdownProvider.cjs.js"),observeRect=require("../../common/observeRect.cjs.js"),dragObserver=require("../dragObserver.cjs.js"),style=require("../style.cjs.js");exports.ColumnDrag=({onColumnDrag,onColumnDragEnd,dimension,isAnyColumnDraggable,isAnyStickyColumnDraggable,tableRef,normalColumnsWrapperRef,stickyColumnsWrapperRef,draggedColumnCssMixin})=>{const{rootRef}=e.useContext(DropdownProvider.DropdownContext),[columnDragging,setColumnDragging]=e.useState(!1),columnDragCallback=e.useRef(onColumnDrag),columnDragEndCallback=e.useRef(onColumnDragEnd),columnMirrorRef=e.useRef(null);return e.useEffect(()=>{columnDragCallback.current=onColumnDrag,columnDragEndCallback.current=onColumnDragEnd},[onColumnDrag,onColumnDragEnd]),e.useEffect(()=>{tableRef.current&&(tableRef.current.dataset.dragging=String(columnDragging))},[columnDragging]),e.useEffect(()=>{if(columnMirrorRef.current&&columnDragging&&(isAnyColumnDraggable||isAnyStickyColumnDraggable)){const table=tableRef.current,observer=observeRect(columnMirrorRef.current,rect=>{const rightCoord=table?.getBoundingClientRect().right||0,leftCoord=stickyColumnsWrapperRef.current?.getBoundingClientRect().right||table?.getBoundingClientRect().left||0;if(table){const scrollLeft=table.scrollLeft,scrollWidth=table.scrollWidth,offsetWidth=table.offsetWidth;rect.right>rightCoord&&scrollWidth>offsetWidth&&scrollLeft+offsetWidth<scrollWidth&&table.scrollBy({left:Math.abs(rightCoord-rect.right)}),rect.left<leftCoord&&scrollLeft>0&&table.scrollBy({left:-Math.abs(leftCoord-rect.left)})}});return observer.observe(),()=>observer.unobserve()}},[isAnyColumnDraggable,isAnyStickyColumnDraggable,columnDragging]),e.useEffect(()=>{const stickyCols=stickyColumnsWrapperRef.current,normalCols=normalColumnsWrapperRef.current,columnMirror=columnMirrorRef.current;if(normalCols&&isAnyColumnDraggable){const observer=dragObserver.dragObserver([normalCols],{mirrorRef:columnMirrorRef,renderMirror:function(dragColumn){const title=dragColumn?.querySelector("[data-title]");columnMirror&&title&&columnMirror.appendChild(title.cloneNode(!0))},removeMirror:function(){columnMirror&&columnMirror.lastChild&&columnMirror.removeChild(columnMirror.lastChild)},dimension,direction:"horizontal",invalid:el=>"false"==el.dataset.draggable,accepts:(_,target,source,sibling)=>target===source&&"false"!=sibling?.dataset.droppable},function(item,before){const columnName=item?.dataset?.thColumn;columnName&&(stickyCols?.contains(item)&&null===before?columnDragCallback.current?.(columnName,normalCols?.firstElementChild?.dataset?.thColumn??null):columnDragCallback.current?.(columnName,before?.dataset?.thColumn??null))},function(){setColumnDragging(!0)},function(item){setColumnDragging(!1);const columnName=item?.dataset?.thColumn;columnName&&columnDragEndCallback.current?.(columnName)});return stickyCols&&isAnyStickyColumnDraggable&&observer.containers.push(stickyCols),()=>{observer.unobserve()}}},[isAnyColumnDraggable,isAnyStickyColumnDraggable,dimension]),isAnyColumnDraggable||isAnyStickyColumnDraggable?reactDom.createPortal(jsxRuntime.jsx(style.MirrorColumn,{$dimension:dimension,ref:columnMirrorRef,$cssMixin:draggedColumnCssMixin}),rootRef?.current||document.body):null};
//# sourceMappingURL=ColumnDrag.cjs.js.map
