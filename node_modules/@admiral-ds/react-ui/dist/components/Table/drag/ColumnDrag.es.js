import{jsx}from"react/jsx-runtime";import{useContext,useState,useRef,useEffect}from"react";import{createPortal}from"react-dom";import{DropdownContext}from"../../DropdownProvider.es.js";import observeRect from"../../common/observeRect.es.js";import{dragObserver}from"../dragObserver.es.js";import{MirrorColumn}from"../style.es.js";const ColumnDrag=({onColumnDrag,onColumnDragEnd,dimension,isAnyColumnDraggable,isAnyStickyColumnDraggable,tableRef,normalColumnsWrapperRef,stickyColumnsWrapperRef,draggedColumnCssMixin})=>{const{rootRef}=useContext(DropdownContext),[columnDragging,setColumnDragging]=useState(!1),columnDragCallback=useRef(onColumnDrag),columnDragEndCallback=useRef(onColumnDragEnd),columnMirrorRef=useRef(null);return useEffect(()=>{columnDragCallback.current=onColumnDrag,columnDragEndCallback.current=onColumnDragEnd},[onColumnDrag,onColumnDragEnd]),useEffect(()=>{tableRef.current&&(tableRef.current.dataset.dragging=String(columnDragging))},[columnDragging]),useEffect(()=>{if(columnMirrorRef.current&&columnDragging&&(isAnyColumnDraggable||isAnyStickyColumnDraggable)){const table=tableRef.current,observer=observeRect(columnMirrorRef.current,rect=>{const rightCoord=table?.getBoundingClientRect().right||0,leftCoord=stickyColumnsWrapperRef.current?.getBoundingClientRect().right||table?.getBoundingClientRect().left||0;if(table){const scrollLeft=table.scrollLeft,scrollWidth=table.scrollWidth,offsetWidth=table.offsetWidth;rect.right>rightCoord&&scrollWidth>offsetWidth&&scrollLeft+offsetWidth<scrollWidth&&table.scrollBy({left:Math.abs(rightCoord-rect.right)}),rect.left<leftCoord&&scrollLeft>0&&table.scrollBy({left:-Math.abs(leftCoord-rect.left)})}});return observer.observe(),()=>observer.unobserve()}},[isAnyColumnDraggable,isAnyStickyColumnDraggable,columnDragging]),useEffect(()=>{const stickyCols=stickyColumnsWrapperRef.current,normalCols=normalColumnsWrapperRef.current,columnMirror=columnMirrorRef.current;if(normalCols&&isAnyColumnDraggable){const observer=dragObserver([normalCols],{mirrorRef:columnMirrorRef,renderMirror:function(dragColumn){const title=dragColumn?.querySelector("[data-title]");columnMirror&&title&&columnMirror.appendChild(title.cloneNode(!0))},removeMirror:function(){columnMirror&&columnMirror.lastChild&&columnMirror.removeChild(columnMirror.lastChild)},dimension,direction:"horizontal",invalid:el=>"false"==el.dataset.draggable,accepts:(_,target,source,sibling)=>target===source&&"false"!=sibling?.dataset.droppable},function(item,before){const columnName=item?.dataset?.thColumn;columnName&&(stickyCols?.contains(item)&&null===before?columnDragCallback.current?.(columnName,normalCols?.firstElementChild?.dataset?.thColumn??null):columnDragCallback.current?.(columnName,before?.dataset?.thColumn??null))},function(){setColumnDragging(!0)},function(item){setColumnDragging(!1);const columnName=item?.dataset?.thColumn;columnName&&columnDragEndCallback.current?.(columnName)});return stickyCols&&isAnyStickyColumnDraggable&&observer.containers.push(stickyCols),()=>{observer.unobserve()}}},[isAnyColumnDraggable,isAnyStickyColumnDraggable,dimension]),isAnyColumnDraggable||isAnyStickyColumnDraggable?createPortal(jsx(MirrorColumn,{$dimension:dimension,ref:columnMirrorRef,$cssMixin:draggedColumnCssMixin}),rootRef?.current||document.body):null};export{ColumnDrag};
//# sourceMappingURL=ColumnDrag.es.js.map
