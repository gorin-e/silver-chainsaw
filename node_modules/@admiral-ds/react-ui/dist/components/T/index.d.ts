/// <reference types="react" />
import { css } from 'styled-components';
import type { PolymorphicComponentPropsWithRef } from '../../components/common/polymorphicProps';
import type { ColorName, ThemeTypographyType } from '../../components/themes';
export type FontName = keyof ThemeTypographyType;
export type TOwnProps = {
    /**  Имя шрифта из списка дизайн системы */
    font: FontName;
    /** Имя цвета шрифта из палитры темы **/
    color?: ColorName;
    /** Позволяет добавлять  миксин созданный с помощью styled css  */
    cssMixin?: ReturnType<typeof css>;
    /** Состояние skeleton */
    skeleton?: boolean;
};
declare const Tspan: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    $font: FontName;
    $color?: keyof import("../../components/themes").Color | undefined;
    $cssMixin?: import("styled-components").RuleSet<object> | undefined;
    $skeleton?: boolean | undefined;
}>> & string;
export type TProps<C extends React.ElementType> = PolymorphicComponentPropsWithRef<C, TOwnProps>;
export type TextComponentType = (<C extends React.ElementType = 'span'>(props: TProps<C>) => ReturnType<typeof Tspan>) & {
    displayName?: string | undefined;
};
export declare const T: TextComponentType;
export {};
//# sourceMappingURL=index.d.ts.map