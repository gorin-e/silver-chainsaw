import * as React from 'react';
import type { HTMLAttributes } from 'react';
import type { MenuModelItemProps } from '../../components/Menu/MenuItem';
import type { DropMenuComponentProps, DropMenuStyleProps } from '../../components/DropMenu';
import type { ButtonProps } from '../../components/Button';
export type MenuButtonDimension = 'xl' | 'l' | 'm' | 's';
export type MenuButtonAppearance = 'primary' | 'secondary' | 'tertiary' | 'ghost' | 'white';
export interface MenuButtonProps extends Omit<HTMLAttributes<HTMLButtonElement>, 'onChange'>, Omit<DropMenuComponentProps, 'targetElement'>, DropMenuStyleProps, Omit<ButtonProps, 'onChange' | 'displayAsSquare'> {
    /** Массив опций */
    items: Array<MenuModelItemProps>;
    /** Выбранная опция */
    selected?: string;
    /**
     * @deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 10.x.x версии.
     * Взамен используйте onSelectItem
     *
     * Колбек на изменение выбранной опции
     **/
    onChange?: (id: string) => void;
    /**
     * @deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 10.x.x версии.
     * Взамен используйте onVisibilityChange
     *
     * Колбек на открытие меню
     **/
    onOpen?: () => void;
    /**
     * @deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 10.x.x версии.
     * Взамен используйте onVisibilityChange
     *
     * Колбек на закрытие меню
     **/
    onClose?: () => void;
    /** Размер компонента */
    dimension?: MenuButtonDimension;
    /** Внешний вид компонента */
    appearance?: MenuButtonAppearance;
    /** Отключение компонента */
    disabled?: boolean;
    /** Состояние loading */
    loading?: boolean;
    /** Состояние skeleton */
    skeleton?: boolean;
}
export declare const MenuButton: React.ForwardRefExoticComponent<MenuButtonProps & React.RefAttributes<HTMLButtonElement>>;
//# sourceMappingURL=index.d.ts.map