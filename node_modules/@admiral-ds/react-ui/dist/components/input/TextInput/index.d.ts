import type { ReactNode, RefObject, InputHTMLAttributes } from 'react';
import type { CustomInputHandler } from '../../../components/common/dom/changeInputData';
import type { ComponentDimension, InputStatus } from '../../../components/input/types';
export declare const InputBorderedDiv: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    disabled?: boolean | undefined;
    $status?: "error" | "success" | undefined;
}>> & string;
export declare const BorderedDivStyles: import("styled-components").RuleSet<{
    disabled?: boolean | undefined;
    readOnly?: boolean | undefined;
    $isLoading?: boolean | undefined;
    $status?: "error" | "success" | undefined;
}>;
export interface TextInputProps extends InputHTMLAttributes<HTMLInputElement> {
    /** Делает высоту компонента больше или меньше обычной */
    dimension?: ComponentDimension;
    /**
     * @deprecated Помечено как deprecated в версии 8.13.0, будет удалено в 10.x.x версии.
     * Взамен используйте iconsAfter
     *
     * Иконки для отображения в правом углу поля
     **/
    icons?: ReactNode;
    /** Иконки для отображения в начале поля */
    iconsBefore?: ReactNode;
    /** Иконки для отображения в конце поля */
    iconsAfter?: ReactNode;
    /** Отображать иконку очистки поля */
    displayClearIcon?: boolean;
    /** Статус поля */
    status?: InputStatus;
    /** Отображать статус загрузки данных */
    isLoading?: boolean;
    /** Ref контейнера компонента */
    containerRef?: RefObject<HTMLDivElement>;
    /**
     * Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.
     * Используется для создания масок ввода
     */
    handleInput?: CustomInputHandler;
    /**  Наличие этого атрибута отключает возможность выделения и копирования значения поля */
    disableCopying?: boolean;
    /** Состояние skeleton */
    skeleton?: boolean;
    /** Отображение тултипа, по умолчанию true */
    showTooltip?: boolean;
}
export declare const TextInput: import("react").ForwardRefExoticComponent<TextInputProps & import("react").RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=index.d.ts.mapd.ts.map