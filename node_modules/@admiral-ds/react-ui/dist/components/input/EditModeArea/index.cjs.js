"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),refSetter=require("../../common/utils/refSetter.cjs.js"),changeInputData=require("../../common/dom/changeInputData.cjs.js"),style=require("../EditMode/style.cjs.js");const stopEvent=e=>e.preventDefault(),nothing=()=>{},EditModeArea=e.forwardRef(({dimension="m",bold=!1,containerCssMixin,disabled=!1,onEdit,onConfirm,onCancel,value,rows=1,autoHeight=!0,confirmButtonPropsConfig=nothing,cancelButtonPropsConfig=nothing,...props},ref)=>{const[edit,setEdit]=e.useState(!1),[valueBeforeEdit,setValueBeforeEdit]=e.useState(value),iconSize="s"===dimension?20:24,inputRef=e.useRef(null),wrapperRef=e.useRef(null),enableEdit=()=>{setEdit(!0),setValueBeforeEdit(value),onEdit?.(value)},editDimension="xxl"===dimension?"xl":dimension,confirmButtonProps={appearance:"secondary",dimension:editDimension,displayAsSquare:!0,disabled:"error"===props.status,onClick:()=>{if(setEdit(!1),inputRef.current){const inputValue=inputRef.current.value;onConfirm?.(inputValue)}},iconStart:jsxRuntime.jsx(style.ConfirmIcon,{height:iconSize,width:iconSize}),$multiline:!0},cancelButtonProps={appearance:"secondary",dimension:editDimension,displayAsSquare:!0,disabled:"error"===props.status,onClick:()=>{setEdit(!1),inputRef.current&&(changeInputData.changeInputData(inputRef.current,{value:valueBeforeEdit.toString()}),onCancel?.(valueBeforeEdit))},iconStart:jsxRuntime.jsx(style.CancelIcon,{height:iconSize,width:iconSize}),$multiline:!0};return jsxRuntime.jsx(style.Wrapper,{"data-dimension":`${dimension}${bold&&"xl"!==editDimension?"-bold":""}`,"data-disabled":disabled,$cssMixin:containerCssMixin,ref:wrapperRef,"data-disable-copying":!!props.disableCopying||void 0,...props.disableCopying&&{onMouseDown:stopEvent},children:edit?!disabled&&!props.readOnly&&jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(style.EditArea,{ref:refSetter.refSetter(ref,inputRef),autoFocus:!0,disabled,dimension:editDimension,value,containerRef:wrapperRef,rows,autoHeight,...props}),jsxRuntime.jsx(style.EditButton,{...confirmButtonProps,...confirmButtonPropsConfig(confirmButtonProps)}),jsxRuntime.jsx(style.EditButton,{...cancelButtonProps,...cancelButtonPropsConfig(cancelButtonProps)})]}):jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(style.Text,{$multiline:!0,onClick:props.readOnly?void 0:enableEdit,children:value}),!props.readOnly&&jsxRuntime.jsx(style.EditIcon,{$multiline:!0,height:iconSize,width:iconSize,onClick:enableEdit})]})})});EditModeArea.displayName="EditMode",exports.EditModeArea=EditModeArea;
//# sourceMappingURL=index.cjs.js.map
