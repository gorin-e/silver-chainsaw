import type { ReactNode } from 'react';
import { Container } from './styled';
import { InputIconButton } from '../../../components/InputIconButton';
import type { ComponentDimension, InputStatus } from '../types';
type DataAttributes = {
    [dataAttibute: `data-${string}`]: string | boolean;
};
export type ContainerProps = React.ComponentProps<typeof Container>;
declare function pressDeleteButtonOnLastChip(input: HTMLInputElement | null, optionsWrapper: HTMLDivElement | null, lastChipCloseButtonSelector: string): void;
export interface MultiInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
    /** Делает размер компонента больше или меньше обычной */
    dimension?: ComponentDimension;
    /** Иконки для отображения в начале поля */
    iconsBefore?: ReactNode;
    /** Иконки для отображения в конце поля */
    iconsAfter?: ReactNode;
    /** Отображать иконку очистки поля */
    displayClearIcon?: boolean;
    /** Статус поля */
    status?: InputStatus;
    /** Ref контейнера компонента */
    containerRef?: React.RefObject<HTMLDivElement>;
    /**  Наличие этого атрибута отключает возможность выделения и копирования значения поля */
    disableCopying?: boolean;
    /** Состояние skeleton */
    skeleton?: boolean;
    /** Список кнопок, при нажатии на которые добавляются значения, по умолчанию Enter */
    createActivateButtonList?: string[];
    /** Функция которая выполняется при нажатии на одну из кнопок из createActivateButtonList */
    onInputComplete?: () => void;
    /** Функция которая выполняется при нажатии на кнопку очистки поля при активном displayClearIcon */
    onClearOptions?: () => void;
    /** Конфиг функция пропсов для контейнера. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедрятся после оригинальных пропсов. */
    containerPropsConfig?: (props: React.ComponentProps<typeof Container>) => Partial<React.ComponentProps<typeof Container> & DataAttributes>;
    /** Конфиг функция пропсов для кнопки очистки. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */
    clearButtonPropsConfig?: (props: React.ComponentProps<typeof InputIconButton>) => Partial<React.ComponentProps<typeof InputIconButton> & DataAttributes>;
    /** Селектор позволяющий найти кнопку закрытия последней опции. Необходимо для срабатывания
     * удаления последней опции при нажатии Backspace в пустом поле ввода. Значение по умолчанию:
     * '.wrapper-options > :has(.close-button):last-of-type .close-button' */
    lastChipCloseButtonSelector?: string;
    /**  Функция которая выполняется при нажатии на кнопку Backspace в поле ввода, по умолчанию произодет
     * поиск последнего чипа и нажатие на кнопку удалить */
    onBackspaceKeyDown?: typeof pressDeleteButtonOnLastChip;
}
export declare const MultiInput: import("react").ForwardRefExoticComponent<MultiInputProps & import("react").RefAttributes<HTMLInputElement>>;
export {};
//# sourceMappingURL=index.d.ts.map.map