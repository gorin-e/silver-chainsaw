/// <reference types="react" />
export declare const WrapperOptions: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const Container: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    disabled?: boolean | undefined;
    $skeleton?: boolean | undefined;
    $status?: "error" | "success" | undefined;
    readOnly?: boolean | undefined;
    $dimension?: "s" | "m" | "xl" | undefined;
}>> & string;
export declare const Input: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, {
    $dimension?: "s" | "m" | "xl" | undefined;
}>> & string;
export declare const IconPanelBefore: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "$dimension" | "$disabled"> & {
    $disabled?: boolean | undefined;
    $dimension?: "s" | "m" | "xl" | undefined;
}, "ref"> & {
    ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
}, never>> & string;
export declare const IconPanelAfter: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "$dimension" | "$disabled"> & {
    $disabled?: boolean | undefined;
    $dimension?: "s" | "m" | "xl" | undefined;
}, "ref"> & {
    ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
}, never>> & string;
//# sourceMappingURL=styled.d.ts.map