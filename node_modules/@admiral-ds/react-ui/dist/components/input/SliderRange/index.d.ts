/// <reference types="react" />
import type { TextInputProps } from '../../../components/input/TextInput';
type Dimension = 'xl' | 'm' | 's';
export interface SliderRangeProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'placeholder' | 'prefix' | 'onChange'> {
    /** Значение компонента - массив из двух строк (значений первого и второго инпутов) */
    value?: [string, string];
    /** Дефолтное значение компонента - массив из двух строк (значений первого и второго инпутов) */
    defaultValue?: [string, string];
    /** Колбек на изменение значений */
    onChange?: (value: [{
        str: string;
        num: number;
    }, {
        str: string;
        num: number;
    }], event: React.ChangeEvent<HTMLInputElement>) => void;
    /** Размер компонента */
    dimension?: Dimension;
    /** Минимальное значение слайдера */
    minValue?: number;
    /** Максимальное значение слайдера */
    maxValue?: number;
    /** Шаг слайдера */
    step?: number;
    /** точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа */
    precision?: number;
    /** разделитель между тысячами. Если значение не задано,
     * то оно определяется согласно локали, в русской локали thousand - это пробел */
    thousand?: string;
    /** разделитель между целым и десятичным. Если значение не задано,
     * то оно определяется согласно локали, в русской локали decimal - это запятая */
    decimal?: string;
    /** префикс (строка, которая выводится перед числовым значением) */
    prefix?: [string, string];
    /** суффикс (строка, которая выводится после числового значения) */
    suffix?: string;
    /** плейсхолдеры инпутов */
    placeholder?: [string, string];
    /** Опции, которые можно передать в первый инпут */
    input1?: Omit<TextInputProps, 'onChange' | 'readOnly'>;
    /** Опции, которые можно передать во второй инпут */
    input2?: Omit<TextInputProps, 'onChange' | 'readOnly'>;
    /** Отключение компонента */
    disabled?: boolean;
    /** Состояние skeleton */
    skeleton?: boolean;
    /** Режим readOnly компонента */
    readOnly?: boolean;
}
export declare const SliderRange: React.FC<SliderRangeProps>;
export {};
//# sourceMappingURL=index.d.ts.map.map