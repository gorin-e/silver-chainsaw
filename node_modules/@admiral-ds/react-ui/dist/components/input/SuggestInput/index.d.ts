import type { FunctionComponent, MouseEventHandler, ReactNode, RefObject, SVGProps } from 'react';
import type { HighlightFormat } from '../../../components/common/utils/getTextHighlightMeta';
import type { InputStatus } from '../../../components/input/types';
import type { TextInputProps } from '../../../components/input/TextInput';
import type { DropMenuComponentProps, DropMenuStyleProps } from '../../../components/DropMenu';
export interface SuggestItem {
    searchText: string;
}
export interface SuggestInputProps extends Omit<TextInputProps, 'value' | 'iconsBefore'>, Omit<DropMenuStyleProps, 'menuWidth'>, Pick<DropMenuComponentProps, 'targetElement'> {
    value?: string;
    /** Обработчик выбора опции (дефолтный обработчик подставляет значение опции в поле ввода) */
    onOptionSelect?: (value: string) => void;
    /** Список вариантов для отображения в опциях */
    options?: string[];
    /**
     * @deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.
     * Взамен используйте параметр targetElement.
     *
     * Референс на контейнер для правильного позиционирования выпадающего списка
     **/
    portalTargetRef?: RefObject<HTMLElement>;
    /** Обработчик клика по кнопке поиска */
    onSearchButtonClick?: MouseEventHandler<SVGSVGElement>;
    /**
     * @deprecated Помечено как deprecated в версии 8.10.0, будет удалено в 10.x.x версии.
     * Взамен используйте alignSelf
     *
     * Позволяет выравнивать позицию дропдаун контейнера относительно селекта.
     * Принимает стандартные значения css свойства align-self (auto | flex-start | flex-end | center | baseline | stretch)
     **/
    alignDropdown?: 'auto' | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
    /**
     * @deprecated Помечено как deprecated в версии 8.10.0, будет удалено в версии 10.х.х.
     * Взамен используйте параметры pageSizeDropContainerStyle.menuMaxHeight и
     * pageNumberDropContainerStyle.menuMaxHeight.
     *
     * Задает максимальную высоту контейнера с опциями */
    dropMaxHeight?: string | number;
    /** Компонент для отображения альтернативной иконки */
    icon?: FunctionComponent<SVGProps<SVGSVGElement>>;
    /** Статус поля */
    status?: InputStatus;
    /** Формат подсветки, 'word' или 'wholly' */
    highlightFormat?: HighlightFormat;
    /** Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,
     * по умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме
     **/
    locale?: {
        /** Текст сообщения при отсутствии вариантов для подстановки */
        emptyMessage?: ReactNode;
    };
}
export declare const SuggestInput: import("react").ForwardRefExoticComponent<SuggestInputProps & import("react").RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=index.d.ts.mapL=index.d.ts.map