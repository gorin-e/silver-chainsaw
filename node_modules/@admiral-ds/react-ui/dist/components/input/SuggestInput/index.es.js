import{jsx}from"react/jsx-runtime";import{forwardRef,useRef,useState,useReducer,useEffect,Children,useMemo}from"react";import styled,{useTheme}from"styled-components";import{ReactComponent as SvgSearchOutline}from"../../../node_modules/@admiral-ds/icons/build/system/SearchOutline.svg.es.js";import{LIGHT_THEME}from"../../themes/light/index.es.js";import"../../themes/common/locales.es.js";import"../../Typography/typography.es.js";import"../../Typography/defaultTypographyMixin.es.js";import{keyboardKey}from"../../common/keyboardKey.es.js";import{changeInputData}from"../../common/dom/changeInputData.es.js";import{refSetter}from"../../common/utils/refSetter.es.js";import{InputIconButton}from"../../InputIconButton.es.js";import{StyledDropdownContainer}from"../../DropdownContainer/index.es.js";import{Menu}from"../../Menu/index.es.js";import{TextInput}from"../TextInput/index.es.js";import{MessagePanel}from"./MessagePanel.es.js";import{SuggestPanel}from"./SuggestPanel.es.js";const SuggestDropdownContainer=styled(StyledDropdownContainer)`
  overflow-x: hidden;
  overflow-y: auto;
  min-width: 100%;
  padding: 8px 0;
  background-color: var(--admiral-color-Special_ElevatedBG, ${p=>p.theme.color["Special/Elevated BG"]});
`,SuggestInput=forwardRef(({options,isLoading,onOptionSelect,alignDropdown,dropMaxHeight,alignSelf="stretch",menuMaxHeight,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,onSearchButtonClick=()=>{},icons,iconsAfter,icon=SvgSearchOutline,skeleton=!1,status,highlightFormat,locale,dimension="m",portalTargetRef,targetElement,...props},ref)=>{const theme=useTheme()||LIGHT_THEME,isControlledComponentValue=void 0!==props.value,inputRef=useRef(null),targetNode=targetElement||portalTargetRef?.current||inputRef.current,[isSuggestPanelOpen,setIsSuggestPanelOpen]=useState(!1),[isFocused,setIsFocused]=useState(!1),[activeOption,setActiveOption]=useState(""),[searchText,setSearchText]=useState(props.value||""),currentSearchText=props.value??searchText,[,forceUpdate]=useReducer(x=>x+1,0),menuDimension="xl"===dimension?"l":dimension;useEffect(()=>{options&&setIsSuggestPanelOpen(isFocused)},[isFocused,options]);const[blurTrigger,triggerDelayedBlur]=useState();useEffect(()=>{if(blurTrigger){const timeoutID=setTimeout(()=>setIsFocused(!1),200);return()=>clearTimeout(timeoutID)}},[blurTrigger,setIsFocused]),useEffect(()=>{function onInputChange(){props.onInput||props.onChange||forceUpdate()}if(inputRef.current){const node=inputRef.current;return node.addEventListener("input",onInputChange),()=>{node.removeEventListener("input",onInputChange)}}},[props.onInput,props.onChange]);const iconArray=Children.toArray(iconsAfter||icons);props.readOnly||iconArray.push(jsx(InputIconButton,{icon,onClick:onSearchButtonClick,"aria-hidden":!0}));const emptyAtLoading=0===(options||[]).length&&!!isLoading,model=useMemo(()=>options?options.map((text,index)=>({id:text,render:options=>jsx(SuggestPanel,{text,searchText:currentSearchText,highlightFormat,dimension:menuDimension,...options},index)})):[],[options,dimension,currentSearchText]);return useEffect(()=>{isSuggestPanelOpen&&setActiveOption(options?options[0]:"")},[options,isSuggestPanelOpen]),jsx(TextInput,{...props,ref:refSetter(ref,inputRef),iconsAfter:iconArray,status,skeleton,isLoading,dimension,showTooltip:!isSuggestPanelOpen&&!skeleton,onKeyDown:(...p)=>{props.onKeyDown?.(...p),(e=>{keyboardKey.getCode(e)===keyboardKey.Enter&&isSuggestPanelOpen&&e.preventDefault()})(...p)},onFocus:(...p)=>{props.onFocus?.(...p),setIsFocused(!0)},onBlur:(...p)=>{props.onBlur?.(...p),triggerDelayedBlur({})},onChange:e=>{props.onChange?.(e),setSearchText(e.currentTarget.value)},children:options&&isSuggestPanelOpen&&!skeleton&&!emptyAtLoading&&!props.readOnly&&jsx(SuggestDropdownContainer,{targetElement:targetNode,alignSelf:alignDropdown||alignSelf,"data-dimension":dimension,dropContainerCssMixin,className:dropContainerClassName,style:dropContainerStyle,children:0!==options.length||isLoading?jsx(Menu,{model,dimension:menuDimension,maxHeight:dropMaxHeight||menuMaxHeight,active:activeOption,onActivateItem:setActiveOption,onSelectItem:option=>{if(onOptionSelect?.(option),!isControlledComponentValue&&inputRef.current){const cursorPosition=option.length;changeInputData(inputRef.current,{value:option,selectionStart:cursorPosition,selectionEnd:cursorPosition})}setIsSuggestPanelOpen(!1)},preventFocusSteal:!0,disableSelectionOnSpace:!0}):jsx(MessagePanel,{dimension:menuDimension,children:locale?.emptyMessage||theme.locales[theme.currentLocale].suggestInput.emptyMessage})})})});SuggestInput.displayName="SuggestInput";export{SuggestInput};
//# sourceMappingURL=index.es.js.map
