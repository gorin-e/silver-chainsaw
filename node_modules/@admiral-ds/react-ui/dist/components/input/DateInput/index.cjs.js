"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),styled=require("styled-components"),CalendarOutline=require("../../../node_modules/@admiral-ds/icons/build/system/CalendarOutline.svg.cjs.js"),index=require("../TextInput/index.cjs.js"),index$2=require("../../Calendar/index.cjs.js"),refSetter=require("../../common/utils/refSetter.cjs.js"),defaultDateInputHandle=require("./defaultDateInputHandle.cjs.js"),changeInputData=require("../../common/dom/changeInputData.cjs.js"),isValidDate=require("./isValidDate.cjs.js"),defaultParser=require("./defaultParser.cjs.js"),defaultDateRangeInputHandle=require("./defaultDateRangeInputHandle.cjs.js"),InputIconButton=require("../../InputIconButton.cjs.js"),index$1=require("../../DropdownContainer/index.cjs.js"),ActionsPanel=require("./ActionsPanel.cjs.js");function _interopDefault(e){return e&&e.__esModule?e:{default:e}}var styled__default=_interopDefault(styled);const Input=styled__default.default(index.TextInput)`
  min-width: 150px;
`;function defaultFormatter(isoValues,joinString=" - "){return isoValues.map(iso=>new Date(iso)).map(date=>isValidDate.isValidDate(date)?date.toLocaleDateString("ru",{timeZone:"UTC"}).replace(/[^ -~]/g,""):"__.__.____").join(joinString)}function preventUseUnsupportedCharacters(e){const typedChar=e.data;typedChar&&0===typedChar.replace(/[^\d_.]/g,"").length&&(e.preventDefault(),e.stopPropagation())}const DateInput=e.forwardRef(({type="date",defaultIsCalendarOpen=!1,formatter=defaultFormatter,parser=defaultParser.defaultParser,minDate,maxDate,validator,filterDate,alignDropdown="auto",alignSelf="auto",currentActiveView,currentActiveViewImportant,onMonthSelect,onYearSelect,onViewEnter,onViewLeave,onViewMonthSelect,onViewYearSelect,selected,viewDate,onViewDateChange,calendarRef,icon=CalendarOutline.ReactComponent,icons,iconsAfter,skeleton=!1,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,isVisible,onVisibilityChange=()=>{},highlightSpecialDay,locale,onDateIncreaseDecrease,dimension="m",onBeforeInput=preventUseUnsupportedCharacters,renderBottomPanel,...props},ref)=>{const calendarProps={minDate,maxDate,validator,filterDate,currentActiveView,currentActiveViewImportant,onMonthSelect,onYearSelect,onViewEnter,onViewLeave,onViewMonthSelect,onViewYearSelect,selected,viewDate,onViewDateChange,highlightSpecialDay,locale,onDateIncreaseDecrease},isDateRange="date-range"===type,handleInput=props.handleInput||(isDateRange?defaultDateRangeInputHandle.defaultDateRangeInputHandle:defaultDateInputHandle.defaultDateInputHandle),[calendarValue,setCalendarValue]=e.useState(null),inputRef=e.useRef(null),inputContainerRef=e.useRef(null),[isCalendarOpenState,setCalendarOpenState]=e.useState(defaultIsCalendarOpen),isCalendarOpen=isVisible??isCalendarOpenState,setCalendarOpen=newCalendarOpenState=>{setCalendarOpenState(newCalendarOpenState),onVisibilityChange(newCalendarOpenState)},[startDate,endDate,selectedCalendarValue]=Array.isArray(calendarValue)?calendarValue:[void 0,void 0,calendarValue],handleButtonClick=()=>{const calValue=parser(inputRef.current?.value,isDateRange);setCalendarValue(calValue),isCalendarOpen||inputRef.current?.focus(),setCalendarOpen(!isCalendarOpen)},iconArray=e.Children.toArray(iconsAfter||icons);return props.readOnly||iconArray.push(jsxRuntime.jsx(InputIconButton.InputIconButton,{icon,onClick:handleButtonClick,tabIndex:0})),jsxRuntime.jsx(Input,{dimension,...props,ref:refSetter.refSetter(ref,inputRef),handleInput,onBeforeInput,iconsAfter:iconArray,containerRef:inputContainerRef,skeleton,children:isCalendarOpen&&!skeleton&&jsxRuntime.jsxs(index$1.StyledDropdownContainer,{targetElement:inputRef.current,alignSelf:alignDropdown||alignSelf,onClickOutside:e=>{e.target&&inputContainerRef.current?.contains(e.target)||setCalendarOpen(!1)},dropContainerCssMixin,className:dropContainerClassName,style:dropContainerStyle,children:[jsxRuntime.jsx(StyledCalendar,{...calendarProps,ref:calendarRef,selected:selectedCalendarValue,startDate,endDate,onChange:maybeDate=>{if(setCalendarValue(maybeDate),inputRef.current){if(!maybeDate)return void changeInputData.changeInputData(inputRef.current,{value:""});const values=Array.isArray(maybeDate)?maybeDate:[maybeDate],toFormatValues=values.map(date=>date?function(date){return new Date(Date.UTC(date.getFullYear(),date.getMonth(),date.getDate())).toISOString()}(date):""),value=formatter(toFormatValues);changeInputData.changeInputData(inputRef.current,{value}),isDateRange&&values.includes(null)||setCalendarOpen(!1)}},range:isDateRange}),renderBottomPanel&&renderBottomPanel()]})})}),StyledCalendar=styled__default.default(index$2.Calendar)`
  box-shadow: none;
  border-radius: 0;
`;DateInput.displayName="DateInput",exports.ActionsPanel=ActionsPanel.ActionsPanel,exports.DateInput=DateInput,exports.StyledCalendar=StyledCalendar;
//# sourceMappingURL=index.cjs.js.map
