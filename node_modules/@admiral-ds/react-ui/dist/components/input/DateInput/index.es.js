import{jsx,jsxs}from"react/jsx-runtime";import{forwardRef,useState,useRef,Children}from"react";import styled from"styled-components";import{ReactComponent as SvgCalendarOutline}from"../../../node_modules/@admiral-ds/icons/build/system/CalendarOutline.svg.es.js";import{TextInput}from"../TextInput/index.es.js";import{Calendar}from"../../Calendar/index.es.js";import{refSetter}from"../../common/utils/refSetter.es.js";import{defaultDateInputHandle}from"./defaultDateInputHandle.es.js";import{changeInputData}from"../../common/dom/changeInputData.es.js";import{isValidDate}from"./isValidDate.es.js";import{defaultParser}from"./defaultParser.es.js";import{defaultDateRangeInputHandle}from"./defaultDateRangeInputHandle.es.js";import{InputIconButton}from"../../InputIconButton.es.js";import{StyledDropdownContainer}from"../../DropdownContainer/index.es.js";export{ActionsPanel}from"./ActionsPanel.es.js";const Input=styled(TextInput)`
  min-width: 150px;
`;function defaultFormatter(isoValues,joinString=" - "){return isoValues.map(iso=>new Date(iso)).map(date=>isValidDate(date)?date.toLocaleDateString("ru",{timeZone:"UTC"}).replace(/[^ -~]/g,""):"__.__.____").join(joinString)}function preventUseUnsupportedCharacters(e){const typedChar=e.data;typedChar&&0===typedChar.replace(/[^\d_.]/g,"").length&&(e.preventDefault(),e.stopPropagation())}const DateInput=forwardRef(({type="date",defaultIsCalendarOpen=!1,formatter=defaultFormatter,parser=defaultParser,minDate,maxDate,validator,filterDate,alignDropdown="auto",alignSelf="auto",currentActiveView,currentActiveViewImportant,onMonthSelect,onYearSelect,onViewEnter,onViewLeave,onViewMonthSelect,onViewYearSelect,selected,viewDate,onViewDateChange,calendarRef,icon=SvgCalendarOutline,icons,iconsAfter,skeleton=!1,dropContainerCssMixin,dropContainerClassName,dropContainerStyle,isVisible,onVisibilityChange=()=>{},highlightSpecialDay,locale,onDateIncreaseDecrease,dimension="m",onBeforeInput=preventUseUnsupportedCharacters,renderBottomPanel,...props},ref)=>{const calendarProps={minDate,maxDate,validator,filterDate,currentActiveView,currentActiveViewImportant,onMonthSelect,onYearSelect,onViewEnter,onViewLeave,onViewMonthSelect,onViewYearSelect,selected,viewDate,onViewDateChange,highlightSpecialDay,locale,onDateIncreaseDecrease},isDateRange="date-range"===type,handleInput=props.handleInput||(isDateRange?defaultDateRangeInputHandle:defaultDateInputHandle),[calendarValue,setCalendarValue]=useState(null),inputRef=useRef(null),inputContainerRef=useRef(null),[isCalendarOpenState,setCalendarOpenState]=useState(defaultIsCalendarOpen),isCalendarOpen=isVisible??isCalendarOpenState,setCalendarOpen=newCalendarOpenState=>{setCalendarOpenState(newCalendarOpenState),onVisibilityChange(newCalendarOpenState)},[startDate,endDate,selectedCalendarValue]=Array.isArray(calendarValue)?calendarValue:[void 0,void 0,calendarValue],handleButtonClick=()=>{const calValue=parser(inputRef.current?.value,isDateRange);setCalendarValue(calValue),isCalendarOpen||inputRef.current?.focus(),setCalendarOpen(!isCalendarOpen)},iconArray=Children.toArray(iconsAfter||icons);return props.readOnly||iconArray.push(jsx(InputIconButton,{icon,onClick:handleButtonClick,tabIndex:0})),jsx(Input,{dimension,...props,ref:refSetter(ref,inputRef),handleInput,onBeforeInput,iconsAfter:iconArray,containerRef:inputContainerRef,skeleton,children:isCalendarOpen&&!skeleton&&jsxs(StyledDropdownContainer,{targetElement:inputRef.current,alignSelf:alignDropdown||alignSelf,onClickOutside:e=>{e.target&&inputContainerRef.current?.contains(e.target)||setCalendarOpen(!1)},dropContainerCssMixin,className:dropContainerClassName,style:dropContainerStyle,children:[jsx(StyledCalendar,{...calendarProps,ref:calendarRef,selected:selectedCalendarValue,startDate,endDate,onChange:maybeDate=>{if(setCalendarValue(maybeDate),inputRef.current){if(!maybeDate)return void changeInputData(inputRef.current,{value:""});const values=Array.isArray(maybeDate)?maybeDate:[maybeDate],toFormatValues=values.map(date=>date?function(date){return new Date(Date.UTC(date.getFullYear(),date.getMonth(),date.getDate())).toISOString()}(date):""),value=formatter(toFormatValues);changeInputData(inputRef.current,{value}),isDateRange&&values.includes(null)||setCalendarOpen(!1)}},range:isDateRange}),renderBottomPanel&&renderBottomPanel()]})})}),StyledCalendar=styled(Calendar)`
  box-shadow: none;
  border-radius: 0;
`;DateInput.displayName="DateInput";export{DateInput,StyledCalendar};
//# sourceMappingURL=index.es.js.map
