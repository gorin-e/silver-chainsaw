export declare const repeatStringNumTimes: (str: string, n: number) => string;
/**
 * Возвращает входную строку str, из которой удалены все символы кроме цифр, символа decimal (по умолчанию запятая) и минуса
 * @param str входная строка
 * @param precision точность (количество знаков после точки)
 * @param decimal десятичный разделитель (по умолчанию запятая)
 * @param minValue если minValue >= 0, то при форматировании из строки будут удалены знаки минуса
 */
export declare const clearValue: (str: string, precision: number, decimal?: string, minValue?: number) => string;
export declare const validateThousand: (thousand: string) => boolean;
/**
 * Возвращает строку отформатированную в денежный формат
 * @param value введенная строка
 * @param precision точность (количество знаков после точки)
 * @param decimal десятичный разделитель
 * @param thousand разделитель между тысячами
 * @param fillEmptyDecimals если строка должна быть отформатирована как десятичное число (т.е. precision > 0 и в строке есть decimal)
 * и данный флаг fillEmptyDecimals установлен в true, то утилита fitToCurrency проверит, сколько знаков в числе после разделителя decimal
 * и если таких знаков меньше, чем precision, недостающее количество будет заполнено нулями.
 * Например, при precision={3} строка '3.9' превратится в '3.900'
 * @param minValue если minValue >= 0, то при форматировании из строки будут удалены знаки минуса
 */
export declare function fitToCurrency(value: string | number, precision: number, decimal: string, thousand: string, fillEmptyDecimals?: boolean, minValue?: number): string;
/** Returns the `decimal` number separator based on locale */
export declare const getDecimalSeparator: (locale: string) => string;
/** Returns the `thousand` number separator based on locale */
export declare const getThousandSeparator: (locale: string) => string;
//# sourceMappingURL=utils.d.ts.map