/// <reference types="react" />
import type { TextInputProps } from '../../../components/input/TextInput';
import type { CustomInputHandler } from '../../../components/common/dom/changeInputData';
import type { NumberInputHandlerCreatorParams } from './createNumberInputHandler';
export interface NumberInputProps extends Omit<TextInputProps, 'iconsBefore' | 'isLoading'> {
    /** точность (количество знаков после точки). Если precision равно 0, то точку ввести нельзя, только целые числа */
    precision?: number;
    /** префикс (строка, которая выводится перед числовым значением) */
    prefix?: string;
    /** суффикс (строка, которая выводится после числового значения) */
    suffix?: string;
    /** разделитель между тысячами. Если значение не задано,
     * то оно определяется согласно локали, в русской локали thousand - это пробел  */
    thousand?: string;
    /** разделитель между целым и десятичным. Если значение не задано,
     * то оно определяется согласно локали, в русской локали decimal - это запятая */
    decimal?: string;
    /**
     * Данный флаг управляет дозаполнением десятичной части числа нулями при потере инпутом фокуса, либо при нажатии кнопок +/-
     * По умолчанию fillEmptyDecimals установлен в true
     *
     * Подробнее: если строка должна быть отформатирована как десятичное число (т.е. precision > 0 и в строке есть decimal)
     * и fillEmptyDecimals установлен в true, то произойдет проверка того, сколько знаков в числе после разделителя decimal
     * и если таких знаков меньше, чем precision, недостающее количество будет заполнено нулями.
     * Например, при precision={3} строка '3.9' превратится в '3.900'
     */
    fillEmptyDecimals?: boolean;
    /** Шаг инпута. Если шаг - это дробное число, то количество знаков в десятичной части step должно быть равно precision */
    step?: number;
    /** Минимальное значение. При minValue >= 0, ввод знака минус блокируется */
    minValue?: number;
    /** Максимальное значение */
    maxValue?: number;
    /** Отображать иконки плюса и минуса */
    displayPlusMinusIcons?: boolean;
    /** Выравнивание контента. По умолчанию выравнивание происходит по левому краю */
    align?: 'left' | 'right';
    /** Функция высшего порядка для получения функции handleInput */
    createInputHandler?: (params: NumberInputHandlerCreatorParams) => CustomInputHandler;
    /** Скрыть пробел после префикса */
    hideSpaceAfterPrefix?: boolean;
    /** Скрыть пробел перед суффиксом */
    hideSpaceBeforeSuffix?: boolean;
}
export declare const NumberInput: import("react").ForwardRefExoticComponent<NumberInputProps & import("react").RefAttributes<HTMLInputElement>>;
export { fitToCurrency, clearValue } from './utils';
//# sourceMappingURL=index.d.ts.mapd.ts.map