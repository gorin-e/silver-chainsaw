import type { ReactNode, RefObject, PropsWithChildren } from 'react';
import type { MenuDimensions } from '../../../components/input/InputEx/Menu';
import type { MenuItemProps } from '../../../components/Menu/MenuItem';
import type { DropMenuStyleProps } from '../../../components/DropMenu';
export type RenderPropsType<T> = {
    value: T;
};
export interface SuffixSelectProps<T> extends DropMenuStyleProps {
    /**
     * @deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.
     * Взамен используйте параметр targetElement.
     *
     * ref элемента относительно которого будет выравниваться дроп контейнер */
    alignRef?: RefObject<HTMLElement>;
    /** Элемент, относительно которого позиционируется выпадающее меню */
    targetElement?: Element | null;
    /** Размер Меню */
    dimension?: MenuDimensions;
    /** выбранное на данный момент значение */
    value: T;
    /** список значений для выбора */
    options: T[];
    /** обработчик события на выбор элемента */
    onChange: (value: ReactNode) => void;
    /** состояние видимости контейнера с опциями */
    isOpen?: boolean;
    /** обработчик события на изменение видимости контейнера с опциями */
    onOpenChange?: (isOpen: boolean) => void;
    renderValue?: (props: RenderPropsType<T>) => ReactNode;
    renderOption?: (props: RenderPropsType<ReactNode> & MenuItemProps) => ReactNode;
    disabled?: boolean;
    readOnly?: boolean;
}
export declare const SuffixSelect: <T extends ReactNode>({ alignRef, targetElement, alignSelf, dimension, menuWidth, menuMaxHeight, onChange, options, value, disabled, dropContainerCssMixin, dropContainerClassName, dropContainerStyle, renderValue, renderOption, ...props }: PropsWithChildren<SuffixSelectProps<T>>) => import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=SuffixSelect.d.ts.mapect.d.ts.map