import type { ReactNode, RefObject } from 'react';
import { css } from 'styled-components';
import type { RenderPropsType } from '../../../components/input/InputEx/SuffixSelect';
import type { MenuItemProps } from '../../../components/Menu/MenuItem';
import type { TextInputProps } from '../../../components/input/TextInput';
import type { DropMenuComponentProps, DropMenuStyleProps } from '../../../components/DropMenu';
export type { RenderPropsType } from '../../../components/input/InputEx/SuffixSelect';
export interface RenderProps {
    value?: ReactNode;
    disabled?: boolean;
    readOnly?: boolean;
}
export interface InputExProps extends Omit<TextInputProps, 'isLoading' | 'handleInput' | 'prefix'>, Pick<DropMenuComponentProps, 'targetElement'> {
    /**
     * @deprecated Помечено как deprecated в версии 8.10.0, будет удалено в версии 10.х.х.
     * Взамен используйте параметры prefixDropContainerStyle.menuWidth и
     * suffixDropContainerStyle.menuWidth.
     *
     * Ширина меню */
    menuWidth?: string;
    /**
     * @deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.
     * Взамен используйте параметр targetElement.
     *
     * Ref контейнера, относительно которого нужно выравнивать дроп контейнеры,
     * если не указан, выравнивание произойдет относительно контейнера компонента
     **/
    alignDropRef?: RefObject<HTMLElement>;
    /** Значение префикса */
    prefixValue?: ReactNode;
    /** Список значений префикса */
    prefixValueList?: ReactNode[];
    /** Срабатывает при выборе нового значения префикса*/
    onPrefixValueChange?: (value: ReactNode) => void;
    /** Специальный метод для рендера компонента по значению префикса */
    renderPrefixValue?: (props: RenderProps) => ReactNode;
    /** Специальный метод для рендера опции списка префикса по значению */
    renderPrefixOption?: (props: RenderPropsType<ReactNode> & MenuItemProps) => ReactNode;
    /** Значение суффикса */
    suffixValue?: ReactNode;
    /** Список значений суффикса */
    suffixValueList?: ReactNode[];
    /** Срабатывает при выборе нового значения суффикса */
    onSuffixValueChange?: (value: ReactNode) => void;
    /** Специальный метод для рендера компонента по значению суффикса*/
    renderSuffixValue?: (props: RenderProps) => ReactNode;
    /** Специальный метод для рендера опции списка суффикса по значению */
    renderSuffixOption?: (props: RenderPropsType<ReactNode> & MenuItemProps) => ReactNode;
    /**
     * @deprecated Помечено как deprecated в версии 4.8.0, будет удалено в 9.x.x версии.
     * Взамен используйте columnsButtonDropContainerStyle.dropContainerCssMixin
     *
     * Позволяет добавлять миксин для выпадающих меню, созданный с помощью styled css
     **/
    dropContainerCssMixin?: ReturnType<typeof css>;
    /** Позволяет добавлять стили и className для выпадающего меню кнопки настройки видимости колонок  */
    prefixDropContainerStyle?: Omit<DropMenuStyleProps, 'alignSelf'>;
    /** Позволяет добавлять стили и className для выпадающего меню кнопки настроек  */
    suffixDropContainerStyle?: Omit<DropMenuStyleProps, 'alignSelf'>;
}
export declare const InputEx: import("react").ForwardRefExoticComponent<InputExProps & import("react").RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=index.d.ts.mapngURL=index.d.ts.map