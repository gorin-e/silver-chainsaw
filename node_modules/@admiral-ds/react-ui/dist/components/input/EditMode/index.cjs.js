"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),refSetter=require("../../common/utils/refSetter.cjs.js"),changeInputData=require("../../common/dom/changeInputData.cjs.js"),index=require("../../Tooltip/index.cjs.js"),checkOverflow=require("../../common/utils/checkOverflow.cjs.js"),style=require("./style.cjs.js");const stopEvent=e=>e.preventDefault(),nothing=()=>{},EditMode=e.forwardRef(({dimension="m",bold=!1,containerCssMixin,disabled=!1,onEdit,onConfirm,onCancel,onClear,value,showTooltip=!0,multilineView=!1,confirmButtonPropsConfig=nothing,cancelButtonPropsConfig=nothing,editButtonPropsConfig=nothing,...props},ref)=>{const[edit,setEdit]=e.useState(!1),[valueBeforeEdit,setValueBeforeEdit]=e.useState(value),iconSize="s"===dimension?20:24,inputRef=e.useRef(null),wrapperRef=e.useRef(null),[overflowActive,setOverflowActive]=e.useState(!1),[tooltipVisible,setTooltipVisible]=e.useState(!1),[node,setNode]=e.useState(null),textRef=e.useRef(null);e.useLayoutEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}if(node)return node.addEventListener("mouseenter",show),node.addEventListener("mouseleave",hide),()=>{node.removeEventListener("mouseenter",show),node.removeEventListener("mouseleave",hide)}},[setTooltipVisible,node]),e.useLayoutEffect(()=>{textRef.current&&checkOverflow.checkOverflow(textRef.current)!==overflowActive&&setOverflowActive(checkOverflow.checkOverflow(textRef.current))},[tooltipVisible,textRef.current,setOverflowActive]);const enableEdit=()=>{setEdit(!0),setValueBeforeEdit(value),onEdit?.(value)},editDimension="xxl"===dimension?"xl":dimension,confirmButtonProps={appearance:"secondary",dimension:editDimension,displayAsSquare:!0,disabled:"error"===props.status,onClick:()=>{if(setEdit(!1),inputRef.current){const inputValue=inputRef.current.value;onConfirm?.(inputValue)}},iconStart:jsxRuntime.jsx(style.ConfirmIcon,{height:iconSize,width:iconSize}),$multiline:!1},cancelButtonProps={appearance:"secondary",dimension:editDimension,displayAsSquare:!0,disabled:"error"===props.status,onClick:()=>{setEdit(!1),inputRef.current&&(changeInputData.changeInputData(inputRef.current,{value:valueBeforeEdit.toString()}),onCancel?.(valueBeforeEdit),onClear?.())},iconStart:jsxRuntime.jsx(style.CancelIcon,{height:iconSize,width:iconSize}),$multiline:!1},editButtonProps={$multiline:multilineView,height:iconSize,width:iconSize,onClick:disabled?void 0:enableEdit};return jsxRuntime.jsx(style.Wrapper,{"data-dimension":`${dimension}${bold&&"xl"!==editDimension?"-bold":""}`,"data-disabled":disabled,$cssMixin:containerCssMixin,ref:wrapperRef,"data-disable-copying":!!props.disableCopying||void 0,...props.disableCopying&&{onMouseDown:stopEvent},children:edit?!disabled&&!props.readOnly&&jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(style.EditInput,{ref:refSetter.refSetter(ref,inputRef),autoFocus:!0,disabled,dimension:editDimension,value,containerRef:wrapperRef,...props}),jsxRuntime.jsx(style.EditButton,{...confirmButtonProps,...confirmButtonPropsConfig(confirmButtonProps)}),jsxRuntime.jsx(style.EditButton,{...cancelButtonProps,...cancelButtonPropsConfig(cancelButtonProps)})]}):jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(style.Text,{ref:refSetter.refSetter(textRef,setNode),$multiline:multilineView,onClick:props.readOnly?void 0:enableEdit,children:value}),showTooltip&&tooltipVisible&&overflowActive&&jsxRuntime.jsx(index.Tooltip,{renderContent:()=>value,targetElement:textRef.current}),!props.readOnly&&jsxRuntime.jsx(style.EditIcon,{...editButtonProps,...editButtonPropsConfig(editButtonProps)})]})})});EditMode.displayName="EditMode",exports.EditMode=EditMode;
//# sourceMappingURL=index.cjs.js.map
