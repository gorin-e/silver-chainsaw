import{jsx,jsxs,Fragment}from"react/jsx-runtime";import{forwardRef,useState,useRef,useLayoutEffect}from"react";import{refSetter}from"../../common/utils/refSetter.es.js";import{changeInputData}from"../../common/dom/changeInputData.es.js";import{Tooltip}from"../../Tooltip/index.es.js";import{checkOverflow}from"../../common/utils/checkOverflow.es.js";import{ConfirmIcon,CancelIcon,Wrapper,EditInput,EditButton,Text,EditIcon}from"./style.es.js";const stopEvent=e=>e.preventDefault(),nothing=()=>{},EditMode=forwardRef(({dimension="m",bold=!1,containerCssMixin,disabled=!1,onEdit,onConfirm,onCancel,onClear,value,showTooltip=!0,multilineView=!1,confirmButtonPropsConfig=nothing,cancelButtonPropsConfig=nothing,editButtonPropsConfig=nothing,...props},ref)=>{const[edit,setEdit]=useState(!1),[valueBeforeEdit,setValueBeforeEdit]=useState(value),iconSize="s"===dimension?20:24,inputRef=useRef(null),wrapperRef=useRef(null),[overflowActive,setOverflowActive]=useState(!1),[tooltipVisible,setTooltipVisible]=useState(!1),[node,setNode]=useState(null),textRef=useRef(null);useLayoutEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}if(node)return node.addEventListener("mouseenter",show),node.addEventListener("mouseleave",hide),()=>{node.removeEventListener("mouseenter",show),node.removeEventListener("mouseleave",hide)}},[setTooltipVisible,node]),useLayoutEffect(()=>{textRef.current&&checkOverflow(textRef.current)!==overflowActive&&setOverflowActive(checkOverflow(textRef.current))},[tooltipVisible,textRef.current,setOverflowActive]);const enableEdit=()=>{setEdit(!0),setValueBeforeEdit(value),onEdit?.(value)},editDimension="xxl"===dimension?"xl":dimension,confirmButtonProps={appearance:"secondary",dimension:editDimension,displayAsSquare:!0,disabled:"error"===props.status,onClick:()=>{if(setEdit(!1),inputRef.current){const inputValue=inputRef.current.value;onConfirm?.(inputValue)}},iconStart:jsx(ConfirmIcon,{height:iconSize,width:iconSize}),$multiline:!1},cancelButtonProps={appearance:"secondary",dimension:editDimension,displayAsSquare:!0,disabled:"error"===props.status,onClick:()=>{setEdit(!1),inputRef.current&&(changeInputData(inputRef.current,{value:valueBeforeEdit.toString()}),onCancel?.(valueBeforeEdit),onClear?.())},iconStart:jsx(CancelIcon,{height:iconSize,width:iconSize}),$multiline:!1},editButtonProps={$multiline:multilineView,height:iconSize,width:iconSize,onClick:disabled?void 0:enableEdit};return jsx(Wrapper,{"data-dimension":`${dimension}${bold&&"xl"!==editDimension?"-bold":""}`,"data-disabled":disabled,$cssMixin:containerCssMixin,ref:wrapperRef,"data-disable-copying":!!props.disableCopying||void 0,...props.disableCopying&&{onMouseDown:stopEvent},children:edit?!disabled&&!props.readOnly&&jsxs(Fragment,{children:[jsx(EditInput,{ref:refSetter(ref,inputRef),autoFocus:!0,disabled,dimension:editDimension,value,containerRef:wrapperRef,...props}),jsx(EditButton,{...confirmButtonProps,...confirmButtonPropsConfig(confirmButtonProps)}),jsx(EditButton,{...cancelButtonProps,...cancelButtonPropsConfig(cancelButtonProps)})]}):jsxs(Fragment,{children:[jsx(Text,{ref:refSetter(textRef,setNode),$multiline:multilineView,onClick:props.readOnly?void 0:enableEdit,children:value}),showTooltip&&tooltipVisible&&overflowActive&&jsx(Tooltip,{renderContent:()=>value,targetElement:textRef.current}),!props.readOnly&&jsx(EditIcon,{...editButtonProps,...editButtonPropsConfig(editButtonProps)})]})})});EditMode.displayName="EditMode";export{EditMode};
//# sourceMappingURL=index.es.js.map
