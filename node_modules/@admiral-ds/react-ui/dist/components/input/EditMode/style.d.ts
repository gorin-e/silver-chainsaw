/// <reference types="react" />
export declare const EditInput: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("../../../components/input/TextInput").TextInputProps & import("react").RefAttributes<HTMLInputElement>, "ref"> & {
    ref?: ((instance: HTMLInputElement | null) => void) | import("react").RefObject<HTMLInputElement> | null | undefined;
}, never>> & string & Omit<import("react").ForwardRefExoticComponent<import("../../../components/input/TextInput").TextInputProps & import("react").RefAttributes<HTMLInputElement>>, keyof import("react").Component<any, {}, any>>;
export declare const EditArea: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("../../../components/input/TextArea").TextAreaProps & import("react").RefAttributes<HTMLTextAreaElement>, "ref"> & {
    ref?: ((instance: HTMLTextAreaElement | null) => void) | import("react").RefObject<HTMLTextAreaElement> | null | undefined;
}, never>> & string & Omit<import("react").ForwardRefExoticComponent<import("../../../components/input/TextArea").TextAreaProps & import("react").RefAttributes<HTMLTextAreaElement>>, keyof import("react").Component<any, {}, any>>;
export declare const EditButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("../../../components/Button").ButtonProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, {
    $multiline: boolean;
}>> & string & Omit<import("react").ForwardRefExoticComponent<import("../../../components/Button").ButtonProps & import("react").RefAttributes<HTMLButtonElement>>, keyof import("react").Component<any, {}, any>>;
export declare const multilineIcon: import("styled-components").RuleSet<object>;
export declare const EditIcon: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("react").SVGProps<SVGSVGElement>, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, {
    $multiline: boolean;
}>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement>>, keyof import("react").Component<any, {}, any>>;
export declare const ConfirmIcon: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("react").SVGProps<SVGSVGElement>, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, never>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement>>, keyof import("react").Component<any, {}, any>>;
export declare const CancelIcon: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("react").SVGProps<SVGSVGElement>, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | import("react").RefObject<SVGSVGElement> | null | undefined;
}, never>> & string & Omit<import("react").FunctionComponent<import("react").SVGProps<SVGSVGElement>>, keyof import("react").Component<any, {}, any>>;
export declare const Wrapper: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $cssMixin?: import("styled-components").RuleSet<object> | undefined;
}>> & string;
export declare const Text: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $multiline?: boolean | undefined;
}>> & string;
//# sourceMappingURL=style.d.ts.mapappingURL=style.d.ts.map