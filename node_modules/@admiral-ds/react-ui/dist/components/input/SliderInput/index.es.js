import{jsxs,jsx}from"react/jsx-runtime";import{forwardRef,useRef,useState,useEffect}from"react";import styled,{css,useTheme}from"styled-components";import{LIGHT_THEME}from"../../themes/light/index.es.js";import"../../themes/common/locales.es.js";import"../../Typography/typography.es.js";import"../../Typography/defaultTypographyMixin.es.js";import{mediumGroupBorderRadius}from"../../themes/borderRadius.es.js";import{Slider as Slider$1}from"../../Slider/index.es.js";import{NumberInput}from"../NumberInput/index.es.js";import{getDecimalSeparator,validateThousand,getThousandSeparator,clearValue,fitToCurrency}from"../NumberInput/utils.es.js";import{changeInputData}from"../../common/dom/changeInputData.es.js";import{refSetter}from"../../common/utils/refSetter.es.js";const sliderBorderRadius=css`
  ${({theme})=>{const value=mediumGroupBorderRadius(theme.shape);return`var(--admiral-border-radius-Medium, ${value}) var(--admiral-border-radius-Medium, ${value}) 0 0`}}
`,Wrapper=styled.div`
  position: relative;
  padding-bottom: ${({$dimension})=>"xl"===$dimension?30:28}px;
`,Slider=styled(Slider$1)`
  & > div {
    position: absolute;
    top: -11px;
    [data-dimension='m'] & {
      top: -9px;
    }
    [data-dimension='s'] & {
      top: -9px;
    }
  }
`,Input=styled(NumberInput)`
  border-radius: ${p=>p.skeleton?0:sliderBorderRadius};
`,SliderInput=forwardRef(({defaultValue="",value,onChange,renderTickMark,minValue=0,maxValue=20,step=1,tickMarks,dimension="xl",precision=0,thousand:userThousand,decimal:userDecimal,prefix,suffix,placeholder,disabled,wrapperProps,skeleton=!1,...props},ref)=>{const sliderDimension="xl"===dimension?dimension:"m",inputRef=useRef(null),theme=useTheme()||LIGHT_THEME,decimal=userDecimal?.slice(0,1)??getDecimalSeparator(theme.currentLocale),thousand=void 0!==userThousand&&validateThousand(userThousand)?userThousand.slice(0,1):getThousandSeparator(theme.currentLocale),[sliderValue,setSliderValue]=useState(minValue),[innerValueState,setInnerValueState]=useState(defaultValue||""),innerValue=value??innerValueState;useEffect(()=>{setSliderValue(Number(clearValue(String(innerValue),precision,decimal).replace(decimal,".")))},[innerValue]);return jsxs(Wrapper,{"data-dimension":dimension,$dimension:dimension,...wrapperProps,children:[jsx(Input,{...props,ref:refSetter(ref,inputRef),value:innerValue,onChange:event=>{const suffixPart=suffix?" "+suffix:"",full=(prefix?prefix+" ":"")+event.target.value+suffixPart,short=clearValue(event.target.value,precision,decimal,minValue);setInnerValueState(event.target.value),onChange?.(full,short,event)},onBlur:event=>{const numValue=Number(clearValue(event.target.value,precision,decimal).replace(decimal,"."));if(inputRef.current)if("number"==typeof minValue&&numValue<minValue){const fullValue=fitToCurrency(String(minValue),precision,decimal,thousand,!0);changeInputData(inputRef.current,{value:fullValue})}else if("number"==typeof maxValue&&numValue>maxValue){const fullValue=fitToCurrency(String(maxValue),precision,decimal,thousand,!0);changeInputData(inputRef.current,{value:fullValue})}props.onBlur?.(event)},dimension,disabled,precision,decimal,thousand,prefix,suffix,placeholder,step,displayPlusMinusIcons:!1,minValue,maxValue,skeleton}),!skeleton&&jsx(Slider,{"aria-hidden":!0,value:sliderValue,onChange:(_e,value)=>{const newValue=fitToCurrency(value,precision,decimal,thousand,!0);inputRef.current&&changeInputData(inputRef.current,{value:newValue})},onMouseDown:e=>{e.preventDefault()},renderTickMark,minValue,maxValue,decimal,precision,thousand,tickMarks,step,disabled:disabled||props.readOnly,dimension:sliderDimension})]})});SliderInput.displayName="SliderInput";export{SliderInput};
//# sourceMappingURL=index.es.js.map
