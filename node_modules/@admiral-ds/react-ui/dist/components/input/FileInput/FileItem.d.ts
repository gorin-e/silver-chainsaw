import type { HTMLAttributes, FunctionComponent, SVGProps } from 'react';
import type { FileInputDimension } from '../../../components/input/FileInput';
import { css } from 'styled-components';
export type Status = 'Uploaded' | 'Loading' | 'Error' | 'Queue';
export declare const ErrorBlock: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $status?: Status | undefined;
    $dimension?: FileInputDimension | undefined;
}>> & string;
export interface FileAttributeProps {
    fileId: string;
    /** Имя файла без расширения */
    fileName: string;
    /** Тип файла */
    fileType: string;
    /** Размер файла */
    fileSize: number;
    /** Статус компонента, имеет четыре состояния: Uploaded, Loading, Error, Queue */
    status?: Status;
    /** Текст ошибки при загрузке файла */
    errorMessage?: string;
    /** URL для отображения миниатюры картинки вместо иконки типа документа в формате XL */
    previewImageURL?: string;
    /** Обработчик клика по CloseIcon */
    onCloseIconClick?: (fileId: string) => void;
    /** Обработчик клика по иконке документа */
    onPreviewIconClick?: (fileId: string) => void;
}
export interface FileItemProps extends HTMLAttributes<HTMLDivElement>, FileAttributeProps {
    /** Размер FileItem */
    dimension?: FileInputDimension;
    /** Позволяет добавлять миксин для компоновки загруженных файлов, созданный с помощью styled css */
    filesLayoutCssMixin?: ReturnType<typeof css>;
    /** Позволяет выводить размер файла в требуемом формате */
    formatFileSizeInfo?: (sizeInBytes: number) => string;
    /** Позволяет назначать формат файла */
    formatFileTypeInfo?: (type: string) => string;
    /** Позволяет назначать иконку файла */
    formatFileTypeIcon?: (type: string) => FunctionComponent<SVGProps<SVGSVGElement>>;
    children?: never;
}
export declare const FileItem: import("react").ForwardRefExoticComponent<FileItemProps & import("react").RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=FileItem.d.ts.map.map