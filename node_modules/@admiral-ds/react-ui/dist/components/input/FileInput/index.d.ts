import type { InputHTMLAttributes, ReactNode } from 'react';
import type { InputStatus } from '../../../components/input/types';
export { fullWidthPositionMixin, halfWidthPositionMixin } from './style';
/** TODO:
 * переключение по файлам списка (клик на иконку документа, удаление документа из списка)
 * */
export type FileInputDimension = 'xl' | 'm';
export interface RenderFileInputProps {
    onQueryUpload: () => void;
}
export interface FileInputProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'title'> {
    /** Размер компонента */
    dimension: FileInputDimension;
    /** Задает ширину */
    width?: string | number;
    /** Текстовое описание компонента (текст внутри области загрузки файлов).
     * Если к компоненту также нужно добавить label, используйте компонент FileInputField и его проп label*/
    title?: ReactNode;
    /**
     * @deprecated Помечено как deprecated в версии 3.7.0, будет удалено в 9.x.x версии.
     * Используйте взамен проп title
     *
     * Текст для кнопки при dimension M
     **/
    description?: ReactNode;
    /** Функция, возвращающая компонент, на который нужно "повесить" файловый инпут */
    renderCustomFileInput?: (option: RenderFileInputProps) => ReactNode;
    /** Список файлов для синхронизации с нативным инпутом */
    files?: Array<File>;
    /**
     * @deprecated Помечено как deprecated в версии 3.7.0, будет удалено в 9.x.x версии.
     * Используйте взамен компонент FileInputField и его проп extraText
     *
     * Текст будет виден ниже компонента
     **/
    extraText?: ReactNode;
    /**
     * @deprecated Помечено как deprecated в версии 7.1.0, будет удалено в 9.x.x версии.
     * Используйте взамен компонент FileInputField и его проп status
     *
     * Установка статуса поля
     **/
    status?: InputStatus;
}
export declare const FileInput: import("react").ForwardRefExoticComponent<FileInputProps & import("react").RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=index.d.ts.map.map