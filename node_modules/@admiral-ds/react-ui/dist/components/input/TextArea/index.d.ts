import type { ForwardedRef, ReactNode, TextareaHTMLAttributes } from 'react';
import type { DataAttributes } from 'styled-components';
import type { CustomInputHandler } from '../../../components/common/dom/changeInputData';
import type { ComponentDimension, InputStatus } from '../../../components/input/types';
import type { AnyIconProps } from '../../../components/InputIconButton';
import { InputIconButton } from '../../../components/InputIconButton';
declare const TooltipedInputIconButton: (props: Omit<AnyIconProps, "ref"> & import("react").RefAttributes<HTMLDivElement> & import("../../../components/TooltipHOC").TooltipHocProps & import("react").RefAttributes<HTMLElement>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
export interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {
    /** Максимальное количество символов для ввода */
    maxLength?: number;
    /** Начальная высота компонента в количествах строк */
    rows?: number;
    /** Максимальная высота компонента в количествах строк  */
    maxRows?: number;
    /** Делает высоту компонента больше или меньше обычной */
    dimension?: ComponentDimension;
    /**
     * @deprecated Помечено как deprecated в версии 8.13.0, будет удалено в 10.x.x версии.
     * Взамен используйте iconsAfter
     *
     * Иконки для отображения в правом углу поля
     **/
    icons?: ReactNode;
    /** Иконки для отображения в конце поля */
    iconsAfter?: ReactNode;
    /** Отображать иконку очистки поля */
    displayClearIcon?: boolean;
    /** Отображать иконку копирования содержимого поля */
    displayCopyIcon?: boolean;
    /** Статус поля */
    status?: InputStatus;
    /** Ref контейнера компонента */
    containerRef?: ForwardedRef<HTMLDivElement>;
    /**
     * Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.
     * Используется для создания масок ввода
     */
    handleInput?: CustomInputHandler;
    /**  Наличие этого атрибута отключает возможность выделения и копирования значения поля */
    disableCopying?: boolean;
    /**  Включает автоматическое изменение высоты компонента в зависимости от количества текста */
    autoHeight?: boolean;
    /** Состояние skeleton */
    skeleton?: boolean;
    /** Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,
     * по умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме
     **/
    locale?: {
        /** Надпись (тултип) для иконки копирования текста */
        copyTextMessage?: string;
        /** Надпись (тултип) для иконки копирования текста в течение 2 секунд после копирования */
        copiedMessage?: string;
    };
    /** Конфиг функция пропсов для кнопки очистки. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */
    clearIconPropsConfig?: (props: React.ComponentProps<typeof InputIconButton>) => Partial<React.ComponentProps<typeof InputIconButton> & DataAttributes>;
    /** Конфиг функция пропсов для кнопки копирования текста. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */
    copyIconPropsConfig?: (props: React.ComponentProps<typeof TooltipedInputIconButton>) => Partial<React.ComponentProps<typeof TooltipedInputIconButton> & DataAttributes>;
}
export declare const TextArea: import("react").ForwardRefExoticComponent<TextAreaProps & import("react").RefAttributes<HTMLTextAreaElement>>;
export {};
//# sourceMappingURL=index.d.ts.mapngURL=index.d.ts.map