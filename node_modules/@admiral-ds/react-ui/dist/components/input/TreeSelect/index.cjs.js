"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),DropDownTree=require("./DropDownTree.cjs.js"),refSetter=require("../../common/utils/refSetter.cjs.js"),OpenStatusButton=require("../../OpenStatusButton.cjs.js"),styled=require("./styled.cjs.js"),MenuItemWithCheckbox=require("../../Menu/MenuItemWithCheckbox.cjs.js");const TreeSelect=e.forwardRef(({value,defaultValue,items,displayClearIcon,disabled,isLoading,readOnly,placeholder,dimension="m",openButtonPropsConfig,clearButtonPropsConfig,onOpenChange,onSelect,onDeselect,onChange,onClearIconClick},ref)=>{const inputRef=e.useRef(null),inputContainerRef=e.useRef(null),[open,setOpen]=e.useState(!1),[stateItems,setStateItems]=e.useState([...items]),[selectedChips,setSelectedChips]=e.useState([]);e.useEffect(()=>{const selected=(defaultValue??value??[]).map(item=>flatMap.get(item)?.node).filter(item=>!!item);selected.forEach(item=>item.checked=!0),setSelectedChips(selected)},[defaultValue,value]);const handleClickOutside=e=>{e.target&&inputContainerRef.current?.contains(e.target)||(setOpen(!1),onOpenChange?.(!1))},toggleOpen=()=>{setOpen(prevState=>{const newValue=!prevState;return onOpenChange?.(newValue),newValue})},handleClick=e=>{const element=e.target.closest("[data-role]");element instanceof HTMLElement&&("icon-pane-before"===element.dataset.role||"icon-pane-after"===element.dataset.role)||toggleOpen()},openButtonProps={$isOpen:open,"aria-hidden":!0,onClick:toggleOpen},iconsAfter=[];readOnly||iconsAfter.push(jsxRuntime.jsx(OpenStatusButton.OpenStatusButton,{"data-disabled":!!disabled||void 0,"data-loading":!!isLoading||void 0,...openButtonProps,...openButtonPropsConfig?.(openButtonProps)}));const flatMap=e.useMemo(()=>MenuItemWithCheckbox.checkboxTreeToMap(stateItems),[stateItems]),handleDeleteChip=id=>{if(id){handleDeselectItem(id);const newValue=selectedChips.filter(chip=>!!chip.checked).map(chip=>chip.id);onChange?.(newValue)}},selectItem=(items,item)=>{if(item.node.checked=!0,item.dependencies&&item.dependencies.length>0)item.dependencies?.forEach(depId=>{const depItem=flatMap.get(depId);depItem&&selectItem(items,depItem)});else{-1===selectedChips.findIndex(chip=>chip.id===item.node.id)&&items.push(item.node)}},handleDeselectItem=id=>{const item=flatMap.get(id);if(item){if(item.node.checked=!1,item.dependencies&&item.dependencies.length>0){const newSelectedChips=selectedChips.filter(chip=>!item.dependencies?.includes(chip.id));setSelectedChips(newSelectedChips)}else{const index=selectedChips.findIndex(chip=>chip.id===item.node.id);if(index>-1){const newSelectedChips=[...selectedChips];newSelectedChips.splice(index,1),setSelectedChips(newSelectedChips)}}onDeselect?.(id)}setStateItems([...stateItems])};return jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(styled.StyledMultiInput,{ref:refSetter.refSetter(ref,inputRef),placeholder,containerPropsConfig:props=>({...props,ref:inputContainerRef,onClick:handleClick}),displayClearIcon:displayClearIcon&&selectedChips.length>0,iconsAfter,clearButtonPropsConfig,onClearOptions:()=>{setSelectedChips([]),flatMap.forEach(item=>item.node.checked=!1),setStateItems([...stateItems]),onClearIconClick?.(),onChange?.([])},dimension,children:selectedChips.map(item=>jsxRuntime.jsx(styled.StyledChip,{id:item.id,onClick:e=>e.stopPropagation(),onClose:readOnly?void 0:handleDeleteChip,tabIndex:-1,dimension:"s",appearance:"filled",readOnly,disabled:item.disabled||disabled,children:item.label},item.id))}),open&&jsxRuntime.jsx(DropDownTree.DropDownTree,{dropdownConfig:config=>({...config,onClickOutside:handleClickOutside,targetElement:inputContainerRef?.current}),items:flatMap,onSelectImem:id=>{const item=flatMap.get(id);if(item){const newSelectedChips=[...selectedChips];selectItem(newSelectedChips,item),setSelectedChips(newSelectedChips),setStateItems([...stateItems]),onSelect?.(id)}},onDeselectItem:handleDeselectItem,onChangeSelected:value=>{onChange?.(value)},dimension:"xl"===dimension?"l":dimension})]})});TreeSelect.displayName="TreeSelect",exports.TreeSelect=TreeSelect;
//# sourceMappingURL=index.cjs.js.map
