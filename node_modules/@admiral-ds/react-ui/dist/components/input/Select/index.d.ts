/// <reference types="react" />
import type { DataAttributes } from 'styled-components';
import { OpenStatusButton } from '../../../components/OpenStatusButton';
import { InputIconButton } from '../../../components/InputIconButton';
import type { ComponentDimension, InputStatus } from '../../../components/input/types';
import type { DropContainerStyles } from '../../../components/DropdownContainer';
import type { RenderPanelProps } from '../../../components/Menu';
import type { SearchFormat } from '../../../components/input/Select/types';
import type { DropMenuComponentProps } from '../../../components/DropMenu';
export * from './types';
/**
 * Осталось сделать:
 * Активное состояние у крестика на чипсах по стрелкам
 * Проверить Перфоманс
 * Тултип и длинного текста в selectValue
 * Возможность, если используется renderValue, задать значение, которое будет появляться при вводе поиска и для опций
 * Разбить компонент на хуки для большей читаемости и императивности (useHeight, useInput, ...)
 * Разбить тесты по пропсам и функционалу. Например, тесты проверящие placeholder И т.д.
 */
export declare const DropDownText: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "$dimension"> & {
    $dimension?: "s" | "m" | "xl" | undefined;
}, "ref"> & {
    ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
}, never>> & string;
export interface SelectProps extends Omit<React.InputHTMLAttributes<HTMLSelectElement>, 'onFocus' | 'onBlur'>, DropContainerStyles, Pick<DropMenuComponentProps, 'targetElement' | 'renderTopPanel' | 'renderBottomPanel'> {
    value?: string | string[];
    /** Позволяет использовать Select как select */
    mode?: 'select' | 'searchSelect';
    /** Отображать статус загрузки данных */
    isLoading?: boolean;
    /** Добавить селекту возможность множественного выбора */
    multiple?: boolean;
    /** По умолчанию, если multiple = true, в опции присутствует checkbox. Данный флаг позволяет убрать его */
    showCheckbox?: boolean;
    /** Значение по умолчанию для некотролируемого селекта */
    defaultValue?: string | string[];
    displayClearIcon?: boolean;
    /** Позволяет определить действия при нажатии на иконку очистки. По умолчанию произойдет очистка выбранных значений */
    onClearIconClick?: () => void;
    /**
     * @deprecated Помечено как deprecated в версии 3.6.0, будет удалено в 10.x.x версии.
     * Взамен используйте maxRowCount
     **/
    idleHeight?: 'full' | 'fixed';
    /** Минимальное количество строк поля в режиме multiple */
    minRowCount?: number | 'none';
    /** Максимальное количество строк поля в режиме multiple */
    maxRowCount?: number | 'none';
    /**
     * @deprecated Помечено как deprecated в версии 8.8.0, будет удалено в 10.x.x версии.
     * Взамен используйте параметр targetElement.
     *
     * Референс на контейнер для правильного позиционирования выпадающего списка */
    portalTargetRef?: React.RefObject<HTMLElement>;
    /** Ref внутреннего input компонента */
    inputTargetRef?: React.RefObject<HTMLInputElement>;
    /** Делает высоту компонента больше или меньше обычной */
    dimension?: ComponentDimension;
    /** Иконки для отображения в правом углу поля */
    icons?: React.ReactNode;
    /** Статус поля */
    status?: InputStatus;
    renderSelectValue?: (value: string | string[] | undefined, searchText: string) => React.ReactNode;
    /**  Значение введенное пользователем для поиска */
    inputValue?: string;
    /** первоначальное значение в строке поиска без переведения строки в контролируемый компонент */
    defaultInputValue?: string;
    onInputChange?: React.ChangeEventHandler<HTMLInputElement>;
    onFocus?: (evt: React.FocusEvent<HTMLDivElement>) => void;
    onBlur?: (evt: React.FocusEvent<HTMLDivElement>) => void;
    /**
     * @deprecated Помечено как deprecated в версии 8.10.0, будет удалено в 10.x.x версии.
     * Взамен используйте alignSelf
     *
     * ППринудительно выравнивает контейнер с опциями относительно компонента, значение по умолчанию 'stretch' */
    alignDropdown?: 'auto' | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
    /** Состояние skeleton */
    skeleton?: boolean;
    /** Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,
     * по умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме
     **/
    locale?: {
        /** Сообщение, отображаемое при пустом наборе опций */
        emptyMessage?: React.ReactNode;
    };
    /**
     * @deprecated Помечено как deprecated в версии 8.10.0, будет удалено в 10.x.x версии.
     * Взамен используйте renderBottomPanel
     *
     * Позволяет добавить панель внизу под выпадающим списком
     **/
    renderDropDownBottomPanel?: (props: RenderPanelProps) => React.ReactNode;
    /**
     * @deprecated Помечено как deprecated в версии 8.10.0, будет удалено в 10.x.x версии.
     * Взамен используйте renderTopPanel
     *
     * Позволяет добавить панель сверху над выпадающим списком
     **/
    renderDropDownTopPanel?: (props: RenderPanelProps) => React.ReactNode;
    /** Состояние принудительного открытия выпадающего списка опций */
    forcedOpen?: boolean;
    /** Событие закрытия выпадающего списка опций */
    onChangeDropDownState?: (opened: boolean) => void;
    /** Inner input keyboard event handler */
    onInputKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    /** Inner input keyboard event handler */
    onInputKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    /** Inner input keyboard event handler */
    onInputKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    /** Inner input keyboard event handler */
    onInputKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    /** Данная опция позволяет при фильтрации искать по строке целиком или по отдельным словам */
    searchFormat?: SearchFormat;
    /** Позволяет фильтровать отображаемые опции */
    onFilterItem?: (value: string, searchValue: string, searchFormat: SearchFormat) => boolean;
    /** Включение виртуального скролла для меню.
     * Максимальная высота меню рассчитывается исходя из высоты 1 пункта, если параметр 'auto', то в расчет идет
     * высота согласно dimension
     */
    virtualScroll?: {
        /** Фиксированная высота 1 пункта меню, для правильного функционирования виртуального скролла
         * все строки должны быть одной фиксированной высоты
         */
        itemHeight: 'auto' | number;
    };
    /** Признак принудительного скрытия тултипа, показываемого при переполнении */
    forceHideOverflowTooltip?: boolean;
    /** Событие, которое вызывается при изменении выбранных опций/опции */
    onSelectedChange?: (value: string | Array<string>) => void;
    /** Признак поднятия выбранных опций вверх списка */
    moveSelectedOnTop?: boolean;
    /** Признак очищения введенного значения после выбора элемента в режиме "searchSelect" */
    clearInputValueAfterSelect?: boolean;
    /** Конфиг функция пропсов для кнопки выпадающего списка. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */
    openButtonPropsConfig?: (props: React.ComponentProps<typeof OpenStatusButton>) => Partial<React.ComponentProps<typeof OpenStatusButton> & DataAttributes>;
    /** Конфиг функция пропсов для кнопки очистки. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */
    clearButtonPropsConfig?: (props: React.ComponentProps<typeof InputIconButton>) => Partial<React.ComponentProps<typeof InputIconButton> & DataAttributes>;
}
export declare const Select: import("react").ForwardRefExoticComponent<SelectProps & import("react").RefAttributes<HTMLSelectElement>>;
export { Option } from './Option';
export { OptionGroup } from './OptionGroup';
export { defaultFilterItem } from './utils';
export { ValueWrapper as SelectValueWrapper } from './styled';
//# sourceMappingURL=index.d.ts.maprceMappingURL=index.d.ts.map