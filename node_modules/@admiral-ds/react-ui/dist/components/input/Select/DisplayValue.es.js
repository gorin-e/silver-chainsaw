import{jsxs,Fragment,jsx}from"react/jsx-runtime";import*as e from"react";import{Tooltip}from"../../Tooltip/index.es.js";import{StringValueWrapper}from"./styled.es.js";import{checkOverflow}from"../../common/utils/checkOverflow.es.js";const DisplayValue=({visibleValue,isSearchPanelOpen,targetRef,forceHideOverflowTooltip})=>{const valueRef=e.useRef(null),[overflowActive,setOverflowActive]=e.useState(!1),[tooltipVisible,setTooltipVisible]=e.useState(!1);e.useEffect(()=>{valueRef.current&&checkOverflow(valueRef.current)!==overflowActive&&setOverflowActive(checkOverflow(valueRef.current))},[tooltipVisible,setOverflowActive]),e.useEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}const value=valueRef.current;if(value)return value.addEventListener("mouseenter",show),value.addEventListener("mouseleave",hide),()=>{value.removeEventListener("mouseenter",show),value.removeEventListener("mouseleave",hide)}},[setTooltipVisible]);const showTooltip=!forceHideOverflowTooltip&&!isSearchPanelOpen&&tooltipVisible&&overflowActive;return jsxs(Fragment,{children:[jsx(StringValueWrapper,{ref:valueRef,children:visibleValue}),showTooltip&&jsx(Tooltip,{renderContent:()=>visibleValue,targetElement:targetRef.current})]})};export{DisplayValue};
//# sourceMappingURL=DisplayValue.es.js.map
