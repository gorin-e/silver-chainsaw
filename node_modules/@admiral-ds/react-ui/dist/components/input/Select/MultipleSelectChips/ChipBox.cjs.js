"use strict";var jsxRuntime=require("react/jsx-runtime"),InfoChip=require("./InfoChip.cjs.js"),CounterChip=require("./CounterChip.cjs.js"),styled$1=require("./styled.cjs.js"),styled=require("styled-components"),e=require("react"),refSetter=require("../../../common/utils/refSetter.cjs.js");function _interopDefault(e){return e&&e.__esModule?e:{default:e}}const Wrapper=_interopDefault(styled).default.div`
  display: flex;
`,ChipBox=e.forwardRef(({option,childrenOptions,containerRef,shouldShowCount,disabled,readOnly,onChipClick,onChipRemove},ref)=>{const wrapperRef=e.useRef(null),[visible,setVisible]=e.useState(!1);return e.useLayoutEffect(()=>{const observer=new IntersectionObserver(function(entries){if(entries[0].isIntersecting&&!visible){setVisible(!0),entries[0].target.setAttribute("data-visible","true");const prev=entries[0].target.previousElementSibling,next=entries[0].target.nextElementSibling;return prev&&prev.removeAttribute("data-show-count"),void(next&&!next.getAttribute("data-visible")&&entries[0].target.setAttribute("data-show-count",""))}if(visible&&!entries[0].isIntersecting){setVisible(!1),entries[0].target.removeAttribute("data-visible"),entries[0].target.removeAttribute("data-show-count");const prev=entries[0].target.previousElementSibling;prev&&prev.getAttribute("data-visible")&&prev.setAttribute("data-show-count","true")}},{root:containerRef.current,threshold:[0,1]});return containerRef.current&&wrapperRef.current&&observer.observe(wrapperRef.current),()=>observer.disconnect()},[visible]),jsxRuntime.jsxs(Wrapper,{ref:refSetter.refSetter(ref,wrapperRef),onMouseDown:e=>e.preventDefault(),children:[jsxRuntime.jsx(InfoChip.InfoChip,{className:"chip",option,disabled,readOnly,onClick:onChipClick,onChipRemove}),shouldShowCount&&childrenOptions.length>0&&jsxRuntime.jsx(CounterChip.CounterChip,{count:childrenOptions.length,disabled,children:childrenOptions.map(innerOption=>jsxRuntime.jsx(InfoChip.InfoChip,{option:innerOption,disabled,readOnly,onClick:onChipClick,onChipRemove},innerOption.value))}),!shouldShowCount&&jsxRuntime.jsx(styled$1.ShadowCounterChip,{})]},option.value)});exports.ChipBox=ChipBox,exports.Wrapper=Wrapper;
//# sourceMappingURL=ChipBox.cjs.js.map
