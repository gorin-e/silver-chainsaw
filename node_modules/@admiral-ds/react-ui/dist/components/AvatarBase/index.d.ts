import type { HTMLAttributes, ReactNode } from 'react';
export type Dimension = 'xs' | 's' | 'm' | 'l' | 'xl';
type AvatarDimension = 'xxs' | Dimension;
/**
 * @deprecated Помечено как deprecated в версии 5.2.0, будет удалено в 9.x.x версии.
 * Используйте альтернативные значения 'neutral1' | 'neutral2' | 'neutral3' | 'neutral4'
 */
type Appearance = 'white' | 'light' | 'grey' | 'dark';
export type AvatarAppearance = 'neutral1' | 'neutral2' | 'neutral3' | 'neutral4' | Appearance;
type Status = 'success' | 'danger' | 'warn' | 'inactive';
export interface AvatarBaseProps extends HTMLAttributes<HTMLButtonElement> {
    /** Имя пользователя, будет использовано внутри тултипа и для генерации инициалов (в случае если не задан параметр userInitials) */
    userName: string;
    /** Инициалы пользователя. По умолчанию вычисляются на основании userName - берутся первые буквы первых
     *  двух слов (одного слова для dimension='s'), входящих в userName
     */
    userInitials?: string;
    /** URL аватарки пользователя */
    href?: string;
    /** Статус пользователя -
     * можно выбрать один из четырех исходных вариантов, либо задать свой цвет.
     **/
    status?: Status | string;
    /** Иконка для отображения */
    icon?: ReactNode;
    /** Внешний вид компонента (цвет заливки, текста, иконки) -
     * можно выбрать один из четырех исходных вариантов, либо задать свою комбинацию цветов.
     * Параметры background, text и icon являются опциональными, если какие-то из них не заданы,
     * то по умолчанию будут применены те же цвета, что и при appearance='neutral2'
     **/
    appearance?: AvatarAppearance | {
        background?: string;
        text?: string;
        icon?: string;
    };
    /** Размер компонента */
    dimension?: AvatarDimension;
    /** Уникальный идентификатор svg маски */
    svgMaskId?: string;
    /** Отображение тултипа */
    showTooltip?: boolean;
    /** Аватар с опцией activity ring */
    withActivityRing?: boolean;
    /** Отображение activity ring */
    showActivityRing?: boolean;
}
export interface AvatarBaseInternalProps {
    /** Для внутреннего использования! Отображение аватара в составе группы (когда правый край аватара усечен) */
    group?: boolean;
    /** Для внутреннего использования! Используется ли аватар в качестве меню. Если да - то userName выводится без изменений */
    isMenuAvatar?: boolean;
}
export declare const AvatarBase: import("react").ForwardRefExoticComponent<AvatarBaseProps & AvatarBaseInternalProps & import("react").RefAttributes<HTMLButtonElement>>;
export {};
//# sourceMappingURL=index.d.ts.map