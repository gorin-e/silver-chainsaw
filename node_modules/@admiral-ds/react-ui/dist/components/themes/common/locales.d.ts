import type React from 'react';
/** Объект локали включает в себя все константы, используемые в компонентах и зависящие от изменения локали.
 * Также каждый компонент, использующий локализацию, имеет параметр locale.
 * Данный параметр включает в себя те же константы, что и в теме, и необходим в тех случаях,
 * если пользователь хочет перезадать значения констант точечно для отдельного компонента.
 * Подробное описание текстовых констант можно найти в параметре locale для каждого компонента. */
export interface Locale {
    /** Число от 0 до 6, где 0 - это воскресенье */
    firstDayOfWeek: number;
    badge: {
        amountAriaLabel: string;
    };
    calendar: {
        backwardText: string;
        forwardText: string;
        nextMonthText: string;
        previousMonthText: string;
        returnText: string;
        selectYearText: string;
        selectMonthText: string;
    };
    fileInput: {
        metricUnits: [string, string, string];
    };
    groupActionsPane: {
        inputPlaceholder: string;
    };
    hint: {
        closeButtonAriaLabel: string;
    };
    imageViewer: {
        flipHorizontallyText: string;
        flipVerticallyText: string;
        rotateLeftText: string;
        rotateRightText: string;
        zoomOutText: string;
        zoomInText: string;
        backwardText: string;
        forwardText: string;
    };
    modal: {
        closeButtonAriaLabel: string;
    };
    paginationOne: {
        itemsPerPageText: string;
        pageSelectLabel: (...props: any) => string;
        pageSizeSelectLabel: (...props: any) => string;
        itemRangeText: (...props: any) => string;
        pageRangeText: (props: any) => string;
        backwardText: string;
        forwardText: string;
    };
    paginationTwo: {
        inputPlaceholder: string;
        itemRangeText: (min: number, max: number, total: number) => string;
    };
    progressStepper: {
        stepName: [string, string];
        renderNextStepName: (nextStepName: string) => React.ReactNode;
        progressText: (activeStepNumber: number, stepsAmount: number, stepNamePlural: string) => string;
    };
    select: {
        emptyMessage: string;
    };
    suggestInput: {
        emptyMessage: string;
    };
    table: {
        emptyMessage: React.ReactNode;
    };
    textArea: {
        copyTextMessage: string;
        copiedMessage: string;
    };
}
export declare const locales: {
    [localeCode: string]: Locale;
};
//# sourceMappingURL=locales.d.ts.map