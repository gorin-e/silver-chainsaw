/// <reference types="react" />
import { css } from 'styled-components';
import type { DataAttributes } from 'styled-components';
import type { ScrollContainerProps } from '../../components/Scrollbar';
type Dimension = 'xl' | 'l' | 'm' | 's';
export type ModalStatusIconType = 'information' | 'success' | 'warning' | 'danger';
export interface ModalStatusIconProps {
    status: ModalStatusIconType;
}
declare const CloseButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, {
    $mobile?: boolean | undefined;
}>> & string & Omit<import("react").ForwardRefExoticComponent<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>>, keyof import("react").Component<any, {}, any>>;
export declare const emptyOverlayStyledCss: import("styled-components").RuleSet<object>;
export interface ModalProps extends React.HTMLAttributes<HTMLDivElement> {
    /** Размер компонента */
    dimension?: Dimension;
    /** Контейнер, в котором происходит размещение модального окна (BODY по умолчанию) */
    container?: Element;
    /** Мобильная версия компонента */
    mobile?: boolean;
    /** Закрытие на нажатие клавиши Escape */
    closeOnEscapeKeyDown?: boolean;
    /** Закрытие на клик извне */
    closeOnOutsideClick?: boolean;
    /** Отображение иконки крестика в верхнем правом углу */
    displayCloseIcon?: boolean;
    /** Обработчик закрытия компонента. Срабатывает:
     * 1) при клике на крестик в верхнем правому углу
     * 2) при нажатии Escape и closeOnEscapeKeyDown равным true
     * 3) при клике извне и closeOnOutsideClick равным true
     */
    onClose?: () => void;
    /**
     * Позволяет добавлять стили для подложки модального окна через миксин, созданный с помощью styled css.
     * Например цвет фона в зависимости от темы:
     *  const overlayStyles = css\`background-color: ${({ theme }) => hexToRgba(theme.color["Neutral/Neutral 05"], 0.6)};\`
     * */
    overlayStyledCss?: ReturnType<typeof css>;
    /** Позволяет добавлять класс на подложку модального окна  */
    overlayClassName?: string;
    /** Позволяет добавлять стили на подложку модального окна  */
    overlayStyle?: React.CSSProperties;
    /** Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,
     * по умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме
     **/
    locale?: {
        /** Атрибут aria-label, описывающий назначение кнопки с крестиком, закрывающей модальное окно */
        closeButtonAriaLabel?: string;
    };
    /** Конфиг функция пропсов для кнопки закрытия модального окна. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */
    closeButtonPropsConfig?: (props: React.ComponentProps<typeof CloseButton>) => Partial<React.ComponentProps<typeof CloseButton> & DataAttributes>;
}
export declare const Modal: import("react").ForwardRefExoticComponent<ModalProps & import("react").RefAttributes<HTMLDivElement>>;
export declare const ModalTitle: React.FC<React.HTMLAttributes<HTMLHeadingElement>>;
export declare const ModalContent: ({ children, contentBlockProps, ...props }: Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & import("../../components/Scrollbar").ScrollbarProps & {
    contentBlockProps?: (Omit<import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>, "ref"> & {
        ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
    }) | undefined;
} & {
    children: React.ReactNode;
}) => import("react/jsx-runtime").JSX.Element;
export declare const ModalButtonPanel: ({ children, ...props }: React.ComponentPropsWithoutRef<'div'>) => import("react/jsx-runtime").JSX.Element;
export declare const ModalStatusIcon: React.FC<ModalStatusIconProps>;
export {};
//# sourceMappingURL=index.d.ts.map