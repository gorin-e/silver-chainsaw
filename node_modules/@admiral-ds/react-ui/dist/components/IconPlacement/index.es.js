import{jsxs,jsx}from"react/jsx-runtime";import*as e from"react";import styled,{css}from"styled-components";import{smallGroupBorderRadius}from"../themes/borderRadius.es.js";import{ReactComponent as SvgCloseOutline}from"../../node_modules/@admiral-ds/icons/build/service/CloseOutline.svg.es.js";function getIconSize(dimension){switch(dimension){case"lSmall":case"lBig":default:return 24;case"mSmall":case"mBig":return 20;case"s":return 16}}function getHighlighterOffset(dimension){switch(dimension){case"lBig":case"mBig":default:return 6;case"lSmall":case"mSmall":case"s":return 4}}function getHighlighterSize(dimension){return getIconSize(dimension)+2*getHighlighterOffset(dimension)}const IconColor=css`
  & *[fill^='#'] {
    fill: ${p=>{switch(p.$iconColor){case"primary":return`var(--admiral-color-Primary_Primary60Main, ${p.theme.color["Primary/Primary 60 Main"]})`;case"secondary":return`var(--admiral-color-Neutral_Neutral50, ${p.theme.color["Neutral/Neutral 50"]})`;default:return p.$iconColor}}};
  }
`,IconPlacementContent=styled.div`
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;

  ${IconColor}

  & > svg {
    height: ${p=>getIconSize(p.$dimension)}px;
    width: ${p=>getIconSize(p.$dimension)}px;
  }
`,ActivityHighlighter=styled.div`
  width: ${p=>getHighlighterSize(p.$dimension)}px;
  height: ${p=>getHighlighterSize(p.$dimension)}px;
  border-radius: 50%;
  background-color: transparent;
  pointer-events: none;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
`,eventsMixin=css`
  &:focus-visible {
    outline-offset: 2px;
    outline: var(--admiral-color-Primary_Primary60Main, ${p=>p.theme.color["Primary/Primary 60 Main"]}) solid 2px;
  }

  &:focus {
    > ${ActivityHighlighter} {
      background-color: ${p=>p.$highlightFocus?`var(--admiral-color-Opacity_Focus, ${p.theme.color["Opacity/Focus"]})`:"transparent"};
    }
  }
  &:hover {
    > ${ActivityHighlighter} {
      background-color: var(--admiral-color-Opacity_Hover, ${p=>p.theme.color["Opacity/Hover"]});
    }
  }
  &:active {
    > ${ActivityHighlighter} {
      background-color: var(--admiral-color-Opacity_Press, ${p=>p.theme.color["Opacity/Press"]});
    }
  }
  &:focus-visible {
    > ${ActivityHighlighter} {
      background-color: transparent;
    }
  }
`,IconPlacementButton=styled.button`
  position: relative;
  padding: 0;
  margin: ${p=>getHighlighterOffset(p.$dimension)}px;
  box-sizing: border-box;
  border: none;
  background-color: transparent;
  appearance: none;
  flex: 0 0 auto;
  height: ${p=>getIconSize(p.$dimension)}px;
  width: ${p=>getIconSize(p.$dimension)}px;
  border-radius: var(--admiral-border-radius-Small, ${p=>smallGroupBorderRadius(p.theme.shape)});
  overflow: visible;

  cursor: pointer;
  > * {
    pointer-events: none;
  }

  &:disabled {
    cursor: not-allowed;
    & *[fill^='#'] {
      fill: var(--admiral-color-Neutral_Neutral30, ${p=>p.theme.color["Neutral/Neutral 30"]});
    }
  }
  &:not(:disabled) {
    ${eventsMixin}
  }
`,IconPlacement=e.forwardRef(({type="button",dimension="lBig",disabled=!1,highlightFocus=!0,appearance,children,...props},ref)=>{const iconColor="object"==typeof appearance?appearance.iconColor?appearance.iconColor:"secondary":appearance;return jsxs(IconPlacementButton,{ref,type,$dimension:dimension,disabled,$highlightFocus:highlightFocus,...props,children:[jsx(ActivityHighlighter,{$dimension:dimension,"aria-hidden":!0}),jsx(IconPlacementContent,{$dimension:dimension,$iconColor:iconColor,"aria-hidden":!0,children})]})}),CloseIconPlacementButton=e.forwardRef(({className,...props},ref)=>jsx(IconPlacement,{ref,className:`close-button ${className||""}`,...props,children:jsx(SvgCloseOutline,{"aria-hidden":!0})}));export{CloseIconPlacementButton,IconPlacement};
//# sourceMappingURL=index.es.js.map
