import type { MouseEvent, HTMLAttributes } from 'react';
import * as React from 'react';
import type { MenuModelItemProps } from '../../components/Menu/MenuItem';
import type { DropMenuComponentProps, DropMenuStyleProps } from '../../components/DropMenu';
type Dimension = 'xl' | 'l' | 'm' | 's';
type Appearance = 'primary' | 'secondary' | 'tertiary';
export interface MultiButtonProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'>, Omit<DropMenuComponentProps, 'targetElement'>, Omit<DropMenuStyleProps, 'menuWidth'> {
    /** Опции выпадающего списка */
    items?: Array<MenuModelItemProps>;
    /** Id выбранной опции списка */
    selected?: string;
    /** Колбек на нажатие основной кнопки */
    onMainButtonClick?: (e: MouseEvent<HTMLButtonElement>) => void;
    /**
     * @deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 10.x.x версии.
     * Взамен используйте onSelectItem
     *
     * Колбек на изменение выбранной опции
     **/
    onChange?: (id: string) => void;
    /**
     * @deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 10.x.x версии.
     * Взамен используйте onVisibilityChange
     *
     * Колбек на открытие меню
     **/
    onOpen?: () => void;
    /**
     * @deprecated Помечено как deprecated в версии 3.2.0, будет удалено в 10.x.x версии.
     * Взамен используйте nVisibilityChange
     *
     * Колбек на закрытие меню
     **/
    onClose?: () => void;
    /** Размер компонента */
    dimension?: Dimension;
    /** Внешний вид компонента */
    appearance?: Appearance;
    /** Отключение компонента */
    disabled?: boolean;
    /** Отключение только главной кнопки, без отключения выпадающего меню. */
    disabledMainButton?: boolean;
    /** Состояние skeleton */
    skeleton?: boolean;
}
export declare const MultiButton: React.ForwardRefExoticComponent<MultiButtonProps & React.RefAttributes<HTMLButtonElement>>;
export {};
//# sourceMappingURL=index.d.ts.map