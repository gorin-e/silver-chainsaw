/// <reference types="react" />
export type ChipDimension = 's' | 'm';
export type ChipAppearance = 'filled' | 'outlined';
export interface ChipsProps extends React.HTMLAttributes<HTMLDivElement> {
    /** Делает высоту компонента больше или меньше обычной */
    dimension?: ChipDimension;
    /** Отключение чипса */
    disabled?: boolean;
    /** Вид чипсов */
    appearance?: ChipAppearance;
    /** Выбранная чипса */
    selected?: boolean;
    /** Добавляет иконку для удаления чипсов */
    onClose?: (id?: HTMLElement['id']) => void;
    /** Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание */
    renderContentTooltip?: () => React.ReactNode;
    /** Иконка перед текстом Chips'a */
    iconStart?: React.ReactNode;
    /** Иконка после текста Chips'a.
     * Отображается, если не прокинут метод onClose, иначе отображется иконка закрытия (крест) */
    iconEnd?: React.ReactNode;
    /**
     * @deprecated Помечено как deprecated в версии 7.9.0, будет удалено в 9.x.x версии.
     * Взамен используйте iconStart или iconEnd
     *
     * Иконка перед текстом Chips'a
     */
    iconBefore?: React.ReactNode;
    /**
     * @deprecated Помечено как deprecated в версии 7.9.0, будет удалено в 9.x.x версии.
     * Взамен используйте iconStart или iconEnd
     *
     * Иконка после текста Chips'a.
     * Отображается, если не прокинут метод onClose, иначе отображется иконка закрытия (крест)
     */
    iconAfter?: React.ReactNode;
    /** Число, которое будет отображено в компоненте Badge справа от content */
    badge?: number;
}
export declare const Chips: import("react").ForwardRefExoticComponent<ChipsProps & import("react").RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=index.d.ts.map