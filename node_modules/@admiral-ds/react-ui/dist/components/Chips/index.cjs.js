"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),index=require("../Tooltip/index.cjs.js"),checkOverflow=require("../common/utils/checkOverflow.cjs.js"),style=require("./style.cjs.js"),keyboardKey=require("../common/keyboardKey.cjs.js"),refSetter=require("../common/utils/refSetter.cjs.js");const defaultRenderContent=()=>"",Chips=e.forwardRef(({dimension="m",disabled,appearance="outlined",selected,onClose,children,renderContentTooltip=defaultRenderContent,iconBefore,iconAfter,iconStart,iconEnd,badge,...props},ref)=>{const defaultChip=void 0!==selected,[overflow,setOverflow]=e.useState(!1),[tooltipVisible,setTooltipVisible]=e.useState(!1),withCloseIcon=!!onClose,withBadge=!!badge,badgeAppearance=e.useMemo(()=>selected&&!disabled?"whiteBlue":disabled?selected||"filled"===appearance?"whiteDisable":"lightDisable":"filled"===appearance?"white":"info",[appearance,selected,disabled]),chipRef=e.useRef(null),refItems=e.useRef(null);e.useEffect(()=>{refItems.current&&checkOverflow.checkOverflow(refItems.current)!==overflow&&setOverflow(checkOverflow.checkOverflow(refItems.current))},[tooltipVisible,setOverflow]),e.useLayoutEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}const chip=chipRef.current;if(chip)return chip.addEventListener("mouseenter",show),chip.addEventListener("mouseleave",hide),chip.addEventListener("focus",show),chip.addEventListener("blur",hide),()=>{chip.removeEventListener("mouseenter",show),chip.removeEventListener("mouseleave",hide),chip.removeEventListener("focus",show),chip.removeEventListener("blur",hide)}},[setTooltipVisible]);return jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(style.ChipComponentStyled,{...props,ref:refSetter.refSetter(ref,chipRef),$dimension:dimension,$disabled:disabled,$appearance:appearance,$selected:selected,$defaultChip:defaultChip,$withCloseIcon:withCloseIcon,$withTooltip:overflow,$withBadge:withBadge,onKeyDown:e=>{if(!disabled){const code=keyboardKey.keyboardKey.getCode(e);code!==keyboardKey.keyboardKey.Enter&&code!==keyboardKey.keyboardKey[" "]||(withCloseIcon?onClose?.():props.onClick?.(e)),props.onKeyDown?.(e)}},tabIndex:props.tabIndex??(disabled?-1:0),$clickable:!!props.onClick,children:jsxRuntime.jsxs(style.ChipContentWrapperStyled,{$dimension:dimension,$disabled:disabled,$appearance:appearance,$selected:selected,$withCloseIcon:withCloseIcon,children:[(iconStart||iconBefore)&&jsxRuntime.jsx(style.IconStartWrapperStyled,{children:jsxRuntime.jsx(style.IconWrapperStyled,{$dimension:dimension,$withCloseIcon:withCloseIcon,children:iconStart||iconBefore})}),jsxRuntime.jsx(style.ChipChildrenWrapperStyled,{ref:refItems,children}),void 0!==badge&&jsxRuntime.jsx(style.StyledBadge,{"data-badge":!0,dimension,appearance:badgeAppearance,children:badge}),!onClose&&(iconEnd||iconAfter)&&jsxRuntime.jsx(style.IconEndWrapperStyled,{$dimension:dimension,children:jsxRuntime.jsx(style.IconWrapperStyled,{$dimension:dimension,$withCloseIcon:withCloseIcon,children:iconEnd||iconAfter})}),onClose&&jsxRuntime.jsx(style.CloseIconButton,{dimension:"m"===dimension?"mBig":"s",highlightFocus:!1,onMouseDown:e=>{e.preventDefault(),onClose?.(props.id)},disabled,tabIndex:-1,appearance:"outlined"===appearance?"primary":"secondary"})]})}),tooltipVisible&&overflow&&jsxRuntime.jsx(index.Tooltip,{targetElement:chipRef.current,renderContent:renderContentTooltip})]})});Chips.displayName="Chips",exports.Chips=Chips;
//# sourceMappingURL=index.cjs.js.map
