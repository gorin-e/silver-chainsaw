/// <reference types="react" />
import type { ChipAppearance, ChipDimension } from '../../components/Chips';
import type { IconPlacementAppearance, IconPlacementDimension } from '../../components/IconPlacement';
export declare const ChipComponentStyled: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $disabled?: boolean | undefined;
    $dimension: ChipDimension;
    $appearance?: ChipAppearance | undefined;
    $selected?: boolean | undefined;
    $defaultChip?: boolean | undefined;
    $withCloseIcon?: boolean | undefined;
    $withBadge?: boolean | undefined;
    $withTooltip?: boolean | undefined;
    $clickable: boolean;
}>> & string;
export declare const ChipContentWrapperStyled: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $appearance?: ChipAppearance | undefined;
    $disabled?: boolean | undefined;
    $selected?: boolean | undefined;
    $dimension: ChipDimension;
    $withCloseIcon?: boolean | undefined;
}>> & string;
export declare const ChipChildrenWrapperStyled: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const IconStartWrapperStyled: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const IconEndWrapperStyled: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $dimension: ChipDimension;
    $withCloseIcon?: boolean | undefined;
}>> & string;
export declare const IconWrapperStyled: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $dimension: ChipDimension;
    $withCloseIcon?: boolean | undefined;
}>> & string;
export declare const StyledBadge: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("../../components/Badge").BadgeProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
}, {
    dimension: ChipDimension;
}>> & string & Omit<import("react").ForwardRefExoticComponent<import("../../components/Badge").BadgeProps & import("react").RefAttributes<HTMLDivElement>>, keyof import("react").Component<any, {}, any>>;
export declare const CloseIconButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, {
    dimension: IconPlacementDimension;
    appearance: IconPlacementAppearance;
}>> & string & Omit<import("react").ForwardRefExoticComponent<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>>, keyof import("react").Component<any, {}, any>>;
//# sourceMappingURL=style.d.ts.map