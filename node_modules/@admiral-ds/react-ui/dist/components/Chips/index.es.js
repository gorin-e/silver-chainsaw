import{jsxs,Fragment,jsx}from"react/jsx-runtime";import{forwardRef,useState,useMemo,useRef,useEffect,useLayoutEffect}from"react";import{Tooltip}from"../Tooltip/index.es.js";import{checkOverflow}from"../common/utils/checkOverflow.es.js";import{ChipComponentStyled,ChipContentWrapperStyled,IconStartWrapperStyled,IconWrapperStyled,ChipChildrenWrapperStyled,StyledBadge,IconEndWrapperStyled,CloseIconButton}from"./style.es.js";import{keyboardKey}from"../common/keyboardKey.es.js";import{refSetter}from"../common/utils/refSetter.es.js";const defaultRenderContent=()=>"",Chips=forwardRef(({dimension="m",disabled,appearance="outlined",selected,onClose,children,renderContentTooltip=defaultRenderContent,iconBefore,iconAfter,iconStart,iconEnd,badge,...props},ref)=>{const defaultChip=void 0!==selected,[overflow,setOverflow]=useState(!1),[tooltipVisible,setTooltipVisible]=useState(!1),withCloseIcon=!!onClose,withBadge=!!badge,badgeAppearance=useMemo(()=>selected&&!disabled?"whiteBlue":disabled?selected||"filled"===appearance?"whiteDisable":"lightDisable":"filled"===appearance?"white":"info",[appearance,selected,disabled]),chipRef=useRef(null),refItems=useRef(null);useEffect(()=>{refItems.current&&checkOverflow(refItems.current)!==overflow&&setOverflow(checkOverflow(refItems.current))},[tooltipVisible,setOverflow]),useLayoutEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}const chip=chipRef.current;if(chip)return chip.addEventListener("mouseenter",show),chip.addEventListener("mouseleave",hide),chip.addEventListener("focus",show),chip.addEventListener("blur",hide),()=>{chip.removeEventListener("mouseenter",show),chip.removeEventListener("mouseleave",hide),chip.removeEventListener("focus",show),chip.removeEventListener("blur",hide)}},[setTooltipVisible]);return jsxs(Fragment,{children:[jsx(ChipComponentStyled,{...props,ref:refSetter(ref,chipRef),$dimension:dimension,$disabled:disabled,$appearance:appearance,$selected:selected,$defaultChip:defaultChip,$withCloseIcon:withCloseIcon,$withTooltip:overflow,$withBadge:withBadge,onKeyDown:e=>{if(!disabled){const code=keyboardKey.getCode(e);code!==keyboardKey.Enter&&code!==keyboardKey[" "]||(withCloseIcon?onClose?.():props.onClick?.(e)),props.onKeyDown?.(e)}},tabIndex:props.tabIndex??(disabled?-1:0),$clickable:!!props.onClick,children:jsxs(ChipContentWrapperStyled,{$dimension:dimension,$disabled:disabled,$appearance:appearance,$selected:selected,$withCloseIcon:withCloseIcon,children:[(iconStart||iconBefore)&&jsx(IconStartWrapperStyled,{children:jsx(IconWrapperStyled,{$dimension:dimension,$withCloseIcon:withCloseIcon,children:iconStart||iconBefore})}),jsx(ChipChildrenWrapperStyled,{ref:refItems,children}),void 0!==badge&&jsx(StyledBadge,{"data-badge":!0,dimension,appearance:badgeAppearance,children:badge}),!onClose&&(iconEnd||iconAfter)&&jsx(IconEndWrapperStyled,{$dimension:dimension,children:jsx(IconWrapperStyled,{$dimension:dimension,$withCloseIcon:withCloseIcon,children:iconEnd||iconAfter})}),onClose&&jsx(CloseIconButton,{dimension:"m"===dimension?"mBig":"s",highlightFocus:!1,onMouseDown:e=>{e.preventDefault(),onClose?.(props.id)},disabled,tabIndex:-1,appearance:"outlined"===appearance?"primary":"secondary"})]})}),tooltipVisible&&overflow&&jsx(Tooltip,{targetElement:chipRef.current,renderContent:renderContentTooltip})]})});Chips.displayName="Chips";export{Chips};
//# sourceMappingURL=index.es.js.map
