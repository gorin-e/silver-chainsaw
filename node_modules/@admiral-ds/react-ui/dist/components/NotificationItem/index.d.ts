/// <reference types="react" />
import type { DataAttributes } from 'styled-components';
export type NotificationItemStatus = 'info' | 'error' | 'success' | 'warning';
declare const CloseButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, never>> & string & Omit<import("react").ForwardRefExoticComponent<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>>, keyof import("react").Component<any, {}, any>>;
export interface NotificationItemProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'title' | 'id'> {
    /** Статус notification */
    status?: NotificationItemStatus;
    /** Скрыть обводку notification */
    isBorderHidden?: boolean;
    /** Переключатель видимости иконки "Close" */
    isClosable?: boolean;
    /** Закрытие notification */
    onClose?: () => void;
    /** Переключатель видимости статусных иконок */
    displayStatusIcon?: boolean;
    /** Конфиг функция пропсов для кнопки закрытия уведомления. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */
    closeButtonPropsConfig?: (props: React.ComponentProps<typeof CloseButton>) => Partial<React.ComponentProps<typeof CloseButton> & DataAttributes>;
}
export declare const NotificationItem: import("react").ForwardRefExoticComponent<NotificationItemProps & import("react").RefAttributes<HTMLDivElement>>;
export declare const NotificationItemTitle: React.FC<React.HTMLAttributes<HTMLHeadingElement>>;
export declare const NotificationItemContent: React.FC<React.HTMLAttributes<HTMLHeadingElement>>;
export declare const NotificationItemButtonPanel: React.FC<React.HTMLAttributes<HTMLHeadingElement>>;
export declare const StyledNotificationItem: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<NotificationItemProps & import("react").RefAttributes<HTMLDivElement>, "ref"> & {
    ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
}, never>> & string & Omit<import("react").ForwardRefExoticComponent<NotificationItemProps & import("react").RefAttributes<HTMLDivElement>>, keyof import("react").Component<any, {}, any>>;
export {};
//# sourceMappingURL=index.d.ts.map