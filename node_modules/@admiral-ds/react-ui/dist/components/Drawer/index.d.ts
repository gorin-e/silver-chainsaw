import type { CSSProperties, HTMLAttributes } from 'react';
import { css } from 'styled-components';
import type { DataAttributes } from 'styled-components';
type Position = 'right' | 'left';
declare const CloseButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, {
    $mobile?: boolean | undefined;
}>> & string & Omit<import("react").ForwardRefExoticComponent<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>>, keyof import("react").Component<any, {}, any>>;
export interface DrawerProps extends HTMLAttributes<HTMLDivElement> {
    /** Состояние компонента: открыт/закрыт */
    isOpen?: boolean;
    /** С какой части экрана будет выдвигаться компонент (right по умолчанию) */
    position?: Position;
    /** Наличие затемненного фона, блокирующего контент страницы */
    backdrop?: boolean;
    /** Контейнер, в котором происходит размещение компонента (BODY по умолчанию) */
    container?: Element;
    /** Мобильная версия компонента */
    mobile?: boolean;
    /** Закрытие на нажатие клавиши Escape. Происходит только при условии, что фокус находится внутри drawerа.
     * По умолчанию при открытии компонента фокус проставляется внутри него.
     * Однако при backdrop = false, пользователь может взаимодействовать с остальной страницей и вывести фокус из drawerа,
     * в этом случае нажатие на клавишу Escape обработано не будет. */
    closeOnEscapeKeyDown?: boolean;
    /** Закрытие на клик по затемненному фону (если backdrop = true) */
    closeOnBackdropClick?: boolean;
    /** Отображение иконки крестика в верхнем правом углу */
    displayCloseIcon?: boolean;
    /** Обработчик закрытия компонента. Срабатывает:
     * 1) при клике на крестик в верхнем правому углу
     * 2) при нажатии Escape и closeOnEscapeKeyDown равным true
     * 3) при клике по затемненному фону и closeOnBackdropClick равным true
     */
    onClose?: () => void;
    /**
     * Возможность изменять стили для подложки drawerа через миксин, созданный с помощью styled css.
     * Например цвет фона в зависимости от темы:
     *  const overlayStyles = css\`background-color: ${({ theme }) => hexToRgba(theme.color["Neutral/Neutral 05"], 0.6)};\`
     * */
    overlayCssMixin?: ReturnType<typeof css>;
    /** Позволяет добавлять класс на подложку drawerа  */
    overlayClassName?: string;
    /** Позволяет добавлять стили на подложку drawerа  */
    overlayStyle?: CSSProperties;
    locale?: {
        /** Атрибут aria-label, описывающий назначение кнопки с крестиком, закрывающей компонент */
        closeButtonAriaLabel?: string;
    };
    /** Конфиг функция пропсов для кнопки закрытия компонента. На вход получает начальный набор пропсов, на
     * выход должна отдавать объект с пропсами, которые будут внедряться после оригинальных пропсов. */
    closeButtonPropsConfig?: (props: React.ComponentProps<typeof CloseButton>) => Partial<React.ComponentProps<typeof CloseButton> & DataAttributes>;
}
export declare const Drawer: import("react").ForwardRefExoticComponent<DrawerProps & import("react").RefAttributes<HTMLDivElement>>;
export { DrawerTitle, DrawerContent, DrawerButtonPanel } from './components';
//# sourceMappingURL=index.d.ts.map