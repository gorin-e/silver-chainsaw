"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),reactDom=require("react-dom"),styled=require("styled-components"),getKeyboardFocusableElements=require("../common/utils/getKeyboardFocusableElements.cjs.js"),parseShadowFromTheme=require("../common/utils/parseShadowFromTheme.cjs.js"),refSetter=require("../common/utils/refSetter.cjs.js"),index$1=require("../themes/light/index.cjs.js");require("../themes/common/locales.cjs.js"),require("../Typography/typography.cjs.js"),require("../Typography/defaultTypographyMixin.cjs.js");var manager=require("../Modal/manager.cjs.js"),index=require("../IconPlacement/index.cjs.js"),components=require("./components.cjs.js");function _interopDefault(e){return e&&e.__esModule?e:{default:e}}var styled__default=_interopDefault(styled);const fadeInRight=styled.keyframes`
  from {
    transform: translateX(100%);
  }
  to {
    transform: translateX(0);
  }
`,fadeInLeft=styled.keyframes`
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
  }
`,fadeInMixin=styled.css`
  animation-name: ${({$position})=>"right"===$position?fadeInRight:fadeInLeft};
  animation-duration: ${"0.3s"};
  animation-timing-function: ${"cubic-bezier(0, 0, 0.2, 1)"};
`,Overlay=styled__default.default.div`
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: var(--admiral-z-index-drawer, ${({theme})=>theme.zIndex.drawer});
  ${p=>p.$overlayCssMixin}
  outline: none;
  pointer-events: none;
  background-color: transparent;
  transition: background-color ${"\n  0.3s cubic-bezier(0, 0, 0.2, 1) 0ms\n"};

  &[data-visible='true'] {
    ${({theme,$backdrop})=>$backdrop&&`background-color: var(--admiral-color-Opacity_Modal, ${theme.color["Opacity/Modal"]});`}
    ${({$backdrop})=>$backdrop&&"pointer-events: auto;"}

    & > div {
      opacity: 1;
      transform: translateX(0);
      transition: opacity 0ms linear 0ms;
      ${fadeInMixin}
    }
  }
`,DrawerComponent=styled__default.default.div`
  position: absolute;
  box-sizing: border-box;
  top: 0;
  bottom: 0;
  ${({$position})=>"right"===$position?"right: 0;":"left: 0;"}
  display: flex;
  flex: 1 0 auto;
  flex-direction: column;
  overflow: hidden;
  padding: 20px 0 24px;
  ${({$mobile})=>$mobile&&"min-width: calc(100% - 16px);"}
  max-width: calc(100% - 16px);
  background-color: var(--admiral-color-Neutral_Neutral00, ${p=>p.theme.color["Neutral/Neutral 00"]});
  color: var(--admiral-color-Neutral_Neutral90, ${p=>p.theme.color["Neutral/Neutral 90"]});
  box-shadow: var(--admiral-box-shadow-Shadow16, ${p=>parseShadowFromTheme.parseShadow(p.theme.shadow["Shadow 16"])});
  outline: none;
  transform: ${({$position})=>"right"===$position?"translateX(100%)":"translateX(-100%)"};
  transition:
    transform ${"\n  0.3s cubic-bezier(0, 0, 0.2, 1) 0ms\n"},
    opacity 0ms linear 0.3s;
  pointer-events: auto;
  opacity: 0;
`,CloseButton=styled__default.default(index.CloseIconPlacementButton)`
  position: absolute;
  top: 20px;
  right: ${({$mobile})=>$mobile?16:24}px;
`,nothing=()=>{},Drawer=e.forwardRef(({isOpen=!1,position:userPosition="right",backdrop=!0,overlayCssMixin=styled.css``,overlayClassName,overlayStyle,container,mobile=!1,onClose,closeOnEscapeKeyDown=!1,closeOnBackdropClick=!1,displayCloseIcon=!0,children,locale,closeButtonPropsConfig=nothing,...props},ref)=>{const position=mobile?"right":userPosition,theme=styled.useTheme()||index$1.LIGHT_THEME,closeBtnAriaLabel=locale?.closeButtonAriaLabel||theme.locales[theme.currentLocale].modal.closeButtonAriaLabel,drawer=e.useRef({}),drawerRef=e.useRef(null),overlayRef=e.useRef(null),previousFocusedElement=e.useRef(null);e.useEffect(()=>{overlayRef.current&&(overlayRef.current.dataset.visible=isOpen?"true":"false")},[isOpen]);const getDrawer=()=>(drawer.current.modalEl=drawerRef.current,drawer.current.containerEl=container||document.body,drawer.current);e.useLayoutEffect(()=>{if(backdrop&&isOpen)return manager.manager.add(getDrawer(),container||document.body),drawerRef.current&&manager.manager.mount(getDrawer()),()=>{manager.manager.remove(getDrawer())}},[backdrop,isOpen,container]),e.useLayoutEffect(()=>{if(isOpen)return previousFocusedElement.current=document.activeElement,drawerRef.current?.focus(),()=>{previousFocusedElement.current?.focus()}},[isOpen]);const closeButtonProps={dimension:"lSmall","aria-label":closeBtnAriaLabel,$mobile:mobile,onClick:event=>{event.stopPropagation(),onClose?.()}};return reactDom.createPortal(jsxRuntime.jsx(Overlay,{ref:overlayRef,tabIndex:-1,onMouseDown:event=>{closeOnBackdropClick&&event.target===overlayRef.current&&onClose?.()},onKeyDown:event=>{if("Escape"===event.key&&closeOnEscapeKeyDown)event.preventDefault(),event.stopPropagation(),onClose?.();else if("Tab"===event.key){const focusableEls=getKeyboardFocusableElements.getKeyboardFocusableElements(drawerRef.current);event.shiftKey?document.activeElement!==focusableEls[0]&&document.activeElement!==drawerRef.current||(focusableEls[focusableEls.length-1].focus(),event.preventDefault()):document.activeElement===focusableEls[focusableEls.length-1]&&(focusableEls[0].focus(),event.preventDefault())}},$overlayCssMixin:overlayCssMixin,className:overlayClassName,style:overlayStyle,$backdrop:backdrop,"data-visible":!1,$position:position,children:jsxRuntime.jsxs(DrawerComponent,{ref:refSetter.refSetter(ref,drawerRef),tabIndex:-1,role:"dialog","aria-modal":!0,$position:position,$mobile:mobile,...props,children:[jsxRuntime.jsx(components.DrawerContext.Provider,{value:{mobile,displayCloseIcon},children}),displayCloseIcon&&jsxRuntime.jsx(CloseButton,{...closeButtonProps,...closeButtonPropsConfig(closeButtonProps)})]})}),container||document.body)});Drawer.displayName="Drawer",exports.DrawerButtonPanel=components.DrawerButtonPanel,exports.DrawerContent=components.DrawerContent,exports.DrawerTitle=components.DrawerTitle,exports.Drawer=Drawer;
//# sourceMappingURL=index.cjs.js.map
