import{jsxs,jsx}from"react/jsx-runtime";import{useState,useRef}from"react";import styled,{css}from"styled-components";import{typography}from"../Typography/typography.es.js";import"../Typography/defaultTypographyMixin.es.js";import"../form/InputField/index.es.js";import{CheckboxField}from"../form/CheckboxField/index.es.js";import"../form/DateField/index.es.js";import"../form/SelectField/index.es.js";import"../form/FieldSet/index.es.js";import"../form/SuggestField/index.es.js";import"../form/TextField/index.es.js";import"../form/SliderInputField/index.es.js";import"../form/SliderRangeField/index.es.js";import"../form/TimeField/index.es.js";import"../form/NumberInputField/index.es.js";import"../form/EditModeField/index.es.js";import"../form/EditModeAreaField/index.es.js";import"../form/PhoneInputField/index.es.js";import"../form/InputExField/index.es.js";import"../form/FileInputField/index.es.js";import"../form/MultiInputField/index.es.js";import"../form/TreeSelectField/index.es.js";import{ReactComponent as SvgChevronRightOutline}from"../../node_modules/@admiral-ds/icons/build/system/ChevronRightOutline.svg.es.js";import{IconPlacement}from"../IconPlacement/index.es.js";const Chevron=styled(SvgChevronRightOutline)`
  transition: all 0.3s;
  & path {
    fill: var(--admiral-color-Neutral_Neutral50, ${p=>p.theme.color["Neutral/Neutral 50"]});
  }
  width: 100%;
  height: 100%;
  transform: ${p=>p.$isOpened?"rotate(90deg)":"rotate(0deg)"};
`,StyledIconPlacement=styled(IconPlacement)`
  flex-shrink: 0;
  margin: 0 16px 0 0;
`,backgroundColor=css`
  background: ${({theme,$selected,$hovered})=>$hovered?`var(--admiral-color-Opacity_Hover, ${theme.color["Opacity/Hover"]})`:$selected?`var(--admiral-color-Opacity_Focus, ${theme.color["Opacity/Focus"]})`:`var(--admiral-color-Special_ElevatedBG, ${theme.color["Special/Elevated BG"]})`};
`,RowWrapper=styled.div`
  color: var(--admiral-color-Neutral_Neutral90, ${p=>p.theme.color["Neutral/Neutral 90"]});
  ${p=>"m"===p.$dimension?typography["Body/Body 1 Short"]:typography["Body/Body 2 Short"]};
  display: flex;
  align-items: flex-start;
  box-sizing: border-box;
  min-height: ${({$dimension})=>"m"===$dimension?"40px":"32px"};
  ${p=>!p.disabled&&backgroundColor};
  cursor: ${p=>p.disabled?"not-allowed":"pointer"};
  padding: ${p=>"m"===p.$dimension?`8px 16px 8px ${16+40*(p.$indent||0)}px`:`6px 16px 6px ${16+36*(p.$indent||0)}px`};
`,IconWrapper=styled.div`
  margin-right: 8px;
  flex-shrink: 0;
  width: ${p=>"m"===p.$dimension?"24px":"20px"};
  height: ${p=>"m"===p.$dimension?"24px":"20px"};
  > svg {
    width: 100%;
    height: 100%;
    fill: var(--admiral-color-Neutral_Neutral50, ${p=>p.theme.color["Neutral/Neutral 50"]});
  }
`,StyledCheckbox=styled(CheckboxField)`
  margin-right: 8px;
  flex-shrink: 0;
`,TitleContent=styled.div`
  padding-top: 2px;
`,TreeNode=({dimension="m",label,icon,checkboxVisible,hasChildren,selected,hovered,disabled,expanded,checked,indeterminate,indent,level,onChange,onHover,onClick,onToggleExpand,children,className,style,...props})=>{const Icon=icon||null,[mouseOnChevron,setMouseOnChevron]=useState(!1),chevronRef=useRef(null),rowRef=useRef(null),[hoveredState,setHoveredState]=useState(!1),hoveredValue=hovered??hoveredState;return jsxs(RowWrapper,{ref:rowRef,className,style,$dimension:dimension,$indent:indent,onMouseMove:e=>{onHover?.(),hoveredState||setHoveredState(!0),props.onMouseMove?.(e)},onMouseLeave:e=>{setHoveredState(!1),props.onMouseLeave?.(e)},onClick:e=>{e.target!==chevronRef.current&&(disabled||onClick?.(e))},$selected:selected,$hovered:hoveredValue,disabled,children:[hasChildren&&jsx(StyledIconPlacement,{ref:chevronRef,dimension:"m"===dimension?"lBig":"mBig",highlightFocus:!1,onClick:onToggleExpand,onMouseMove:()=>{!mouseOnChevron&&hasChildren&&setMouseOnChevron(!0)},onMouseLeave:()=>{hasChildren&&setMouseOnChevron(!1)},children:jsx(Chevron,{$isOpened:expanded,"aria-hidden":!0})}),checkboxVisible&&jsx(StyledCheckbox,{...props,hovered:!mouseOnChevron&&hoveredValue,dimension,disabled,checked,indeterminate,onChange:e=>{onChange?.(e.target.checked)}}),Icon&&jsx(IconWrapper,{$dimension:dimension,children:jsx(Icon,{})}),label&&jsx(TitleContent,{children:label}),children]})};export{TreeNode,backgroundColor};
//# sourceMappingURL=TreeNode.es.js.map
