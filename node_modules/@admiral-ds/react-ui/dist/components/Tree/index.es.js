import{jsx,jsxs}from"react/jsx-runtime";import{forwardRef,useState,useEffect,useMemo,Fragment}from"react";import styled from"styled-components";export{TreeNode}from"./TreeNode.es.js";const Wrapper=styled.div`
  display: flex;
  flex-direction: column;
  width: 768px;
`,itemHasChildren=item=>!!item.children&&Array.isArray(item.children)&&item.children.length>0,treeToMap=(tree,level=0,indent=0,dependencies,parent)=>{const levelHasChildren=tree.some(item=>itemHasChildren(item));return tree.reduce((acc,item)=>{const key=item.id.toString(),selfIndent=levelHasChildren&&itemHasChildren(item)?indent:indent+1;if(acc[key]={level,indent:selfIndent,node:item,parent},dependencies&&dependencies.forEach(dependency=>dependency.push(key)),item.children&&itemHasChildren(item)){const allDependencies=dependencies?[...dependencies]:[],itemDependencies=[];acc[key].dependencies=itemDependencies,allDependencies.push(itemDependencies);const map=treeToMap(item.children,level+1,indent+1,allDependencies,key);return{...acc,...map}}return acc},{})},Tree=forwardRef(({dimension="m",model,defaultModel,withCheckbox=!0,selected,defaultSelected,active,onActivateItem,onSelectItem,onChange,onMouseLeave,onCheckedChange,onExpandedChange,...props},ref)=>{const[internalModel,setInternalModel]=useState([...defaultModel??[]]),[selectedState,setSelectedState]=useState(defaultSelected),modelObject=void 0===model?internalModel:model,selectedId=void 0===selected?selectedState:selected;useEffect(()=>{model&&setInternalModel([...model])},[model]);const map=useMemo(()=>treeToMap(model??internalModel),[modelObject]),setChecked=(id,value)=>{map[id].node.disabled||(map[id].node.checked=value,map[id].dependencies?.length&&map[id].dependencies?.forEach(depId=>setChecked(depId,value)))},calculateParentNodeState=node=>{if(node.parent){const id=node.parent;map[id].node.checked=map[id].dependencies?.every(depId=>map[depId].node.checked),calculateParentNodeState(map[id])}},toggleCheck=id=>{const hasChildren=itemHasChildren(map[id].node),indeterminate=map[id].dependencies?.some(depId=>!map[depId].node.disabled&&map[depId].node.checked)&&map[id].dependencies?.some(depId=>!map[depId].node.checked),checked=hasChildren?!!indeterminate||map[id].dependencies?.every(depId=>map[depId].node.checked):map[id].node.checked;if(setChecked(id,!checked),calculateParentNodeState(map[id]),onCheckedChange){const checkedItems=Object.entries(map).map(([key,item])=>!!item.node.checked&&key).filter(value=>!!value&&"string"==typeof value);onCheckedChange(checkedItems)}onChange?onChange([...internalModel]):setInternalModel([...internalModel])},renderChildren=items=>items.map(item=>{const node=map[item.id],hasChildren=itemHasChildren(item),indeterminate=node.dependencies?.some(depId=>map[depId].node.checked)&&node.dependencies?.some(depId=>!map[depId].node.checked),checked=hasChildren?node.dependencies&&node.dependencies?.every(depId=>map[depId].node.checked):!!item.checked;return jsxs(Fragment,{children:[item.render({checked,indeterminate,hasChildren,level:node.level,indent:node.indent,disabled:item.disabled,dimension,expanded:item.expanded,checkboxVisible:withCheckbox,hovered:void 0!==active?active===item.id:void 0,selected:selectedId===item.id,onHover:()=>{onActivateItem?.(item.disabled?null:item.id)},onClick:()=>{return id=item.id,withCheckbox&&id&&toggleCheck(id),selectedId!==id&&setSelectedState(id),void onSelectItem?.(id);var id},onToggleExpand:()=>(id=>{if(map[id].node.expanded=!map[id].node.expanded,onExpandedChange){const expandedItems=Object.entries(map).map(([key,item])=>item.node.expanded&&key).filter(value=>!!value&&"string"==typeof value);onExpandedChange(expandedItems)}onChange?onChange([...internalModel]):setInternalModel([...internalModel]),selectedId!==id&&setSelectedState(id)})(item.id)}),item.children&&hasChildren&&item.expanded&&renderChildren(item.children)]},item.id)});return jsx(Wrapper,{ref,...props,onMouseLeave:e=>{onActivateItem?.(null),onMouseLeave?.(e)},children:renderChildren(modelObject)})});export{Tree};
//# sourceMappingURL=index.es.js.map
