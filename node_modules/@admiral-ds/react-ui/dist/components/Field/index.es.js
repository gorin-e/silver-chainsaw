import{jsxs,jsx,Fragment}from"react/jsx-runtime";import{forwardRef,useRef,useState,useEffect}from"react";import styled,{css}from"styled-components";import{refSetter}from"../common/utils/refSetter.es.js";import{skeletonMixin}from"../input/Container.es.js";import{CharacterCounter}from"../input/TextArea/CharacterCounter.es.js";import{Label}from"../Label/index.es.js";import{uid}from"../common/uid.es.js";import{typography}from"../Typography/typography.es.js";import"../Typography/defaultTypographyMixin.es.js";const ContentWrapper=styled.div``,inlineMixin=css`
  flex-direction: row;
  align-items: center;

  ${Label} {
    margin: 0 8px 0 0;
  }

  ${ContentWrapper} {
    flex: 1 1 auto;
  }
`,Container=styled.div`
  display: flex;
  overflow: hidden;
  ${props=>props.$displayInline?inlineMixin:"flex-direction: column;"}
`,SkeletonLabel=styled.div`
  position: absolute;
  top: 0;
  left: 0;
  height: 16px;
  width: 50%;
  margin-bottom: 8px;
  ${skeletonMixin}
`,LabelContainer=styled.div`
  position: relative;
  text-align: left;
`,textSkeletonMixin=css`
  color: transparent;
`,StyledLabel=styled(Label)`
  ${p=>p.$skeleton&&textSkeletonMixin};
`,containerSkeletonMixin=css`
  visibility: hidden;
`,ExtrasContainer=styled.div`
  display: flex;
  justify-content: space-between;
  ${p=>p.$skeleton&&containerSkeletonMixin};
`,ExtraTextContainer=styled.div`
  flex: 1 1 auto;

  padding-top: 8px;

  text-align: left;

  ${typography["Body/Body 2 Short"]}

  color: var(--admiral-color-Neutral_Neutral50, ${p=>p.theme.color["Neutral/Neutral 50"]});

  [data-disabled] & {
    color: var(--admiral-color-Neutral_Neutral30, ${p=>p.theme.color["Neutral/Neutral 30"]});
  }

  [data-status='error'] & {
    color: var(--admiral-color-Error_Error60Main, ${p=>p.theme.color["Error/Error 60 Main"]});
  }

  [data-status='success'] & {
    color: var(--admiral-color-Success_Success50Main, ${p=>p.theme.color["Success/Success 50 Main"]});
  }
`,PositionedCharacterCounter=styled(CharacterCounter)`
  flex: 0 0 auto;
  padding: 8px 0 0 8px;
`,Field=forwardRef(({children,maxLength,inputRef,displayCharacterCounter=!0,characterCounterVisibilityThreshold=.8,...props},ref)=>{const containerRef=useRef(null),[hasFocus,setFocus]=useState(!1),{className,style,displayInline,status,extraText,label,required,disabled,id,skeleton=!1,...restFieldProps}=props,[defaultID]=useState(uid()),fieldContainerProps={className,style,...restFieldProps},labelProps={htmlFor:id??defaultID,children:label,required,disabled};return useEffect(()=>{const onFocusIn=()=>{setFocus(!0)},onFocusOut=()=>{setFocus(!1)},containerNode=containerRef.current;return containerNode&&(containerNode.addEventListener("focusin",onFocusIn),containerNode.addEventListener("focusout",onFocusOut)),()=>{containerNode&&(containerNode.removeEventListener("focusin",onFocusIn),containerNode.removeEventListener("focusout",onFocusOut))}},[]),jsxs(Container,{...fieldContainerProps,$displayInline:displayInline,"data-status":status,"data-focus-within":hasFocus?"":void 0,"data-required-within":required?"":void 0,"data-disabled":disabled?"":void 0,"data-read-only":!!props.readOnly||void 0,ref:refSetter(containerRef,ref),children:[labelProps.children&&jsxs(LabelContainer,{children:[skeleton&&jsx(SkeletonLabel,{}),jsx(StyledLabel,{$skeleton:skeleton,...labelProps})]}),jsxs(ContentWrapper,{children:[children,jsxs(ExtrasContainer,{$skeleton:skeleton,children:[extraText&&jsx(ExtraTextContainer,{children:extraText}),displayCharacterCounter&&inputRef&&void 0!==maxLength&&jsxs(Fragment,{children:[jsx("div",{}),jsx(PositionedCharacterCounter,{maxLength,visibilityThreshold:characterCounterVisibilityThreshold,inputRef})]})]})]})]})});Field.displayName="Field";export{ExtraTextContainer,ExtrasContainer,Field};
//# sourceMappingURL=index.es.js.map
