import{jsx}from"react/jsx-runtime";import{useRef,Children,isValidElement,cloneElement,useMemo,useEffect}from"react";import{StepperContext}from"./StepperContext.es.js";import{List}from"./style.es.js";export{Step}from"./Step.es.js";export{StepContent}from"./StepContent.es.js";const Stepper=({orientation="horizontal",activeStep=-1,lineClamp=3,stepWidth,hideLastStepLine=!1,mobile,children,...props})=>{const listRef=useRef(null),steps=Children.toArray(children).map((step,index)=>isValidElement(step)?cloneElement(step,activeStep===index?{index,role:"listitem","aria-current":"step",hideLine:index===Children.toArray(children).length-1&&hideLastStepLine,...step.props}:{index,role:"listitem",hideLine:index===Children.toArray(children).length-1&&hideLastStepLine,...step.props}):null),stepsAmount=steps.length,contextValue=useMemo(()=>({activeStep,orientation,lineClamp,stepsAmount,stepWidth,mobile}),[activeStep,orientation,lineClamp,stepWidth,stepsAmount,mobile]);return useEffect(()=>{if(listRef.current&&mobile&&"horizontal"===orientation){const activeNode=listRef.current.childNodes[activeStep]||listRef.current.firstChild;listRef.current.scrollLeft=0===activeStep?activeNode.offsetLeft:activeNode.offsetLeft-16}},[activeStep,steps]),jsx(StepperContext.Provider,{value:contextValue,children:jsx(List,{ref:listRef,role:"list",$orientation:orientation,...props,children:steps})})};Stepper.displayName="Stepper";export{Stepper,StepperContext};
//# sourceMappingURL=index.es.js.map
