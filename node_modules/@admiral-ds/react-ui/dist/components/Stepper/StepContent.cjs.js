"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),index=require("../Tooltip/index.cjs.js"),checkOverflow=require("../common/utils/checkOverflow.cjs.js"),style=require("./style.cjs.js"),StepperContext=require("./StepperContext.cjs.js");const StepContent=({children,tooltipProps})=>{const{lineClamp}=e.useContext(StepperContext.StepperContext),wrapperRef=e.useRef(null),contentRef=e.useRef(null),[overflow,setOverflow]=e.useState(!1),[tooltipVisible,setTooltipVisible]=e.useState(!1);return e.useLayoutEffect(()=>{contentRef.current&&checkOverflow.checkOverflow(contentRef.current)!==overflow&&setOverflow(checkOverflow.checkOverflow(contentRef.current))},[tooltipVisible,setOverflow]),e.useLayoutEffect(()=>{function show(){setTooltipVisible(!0)}function hide(){setTooltipVisible(!1)}const wrapper=wrapperRef.current;if(wrapper)return wrapper.addEventListener("mouseenter",show),wrapper.addEventListener("mouseleave",hide),()=>{wrapper.removeEventListener("mouseenter",show),wrapper.removeEventListener("mouseleave",hide)}},[setTooltipVisible]),jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(style.ContentWrapper,{ref:wrapperRef,$withTooltip:overflow,children:jsxRuntime.jsx(style.Content,{ref:contentRef,$lineClamp:lineClamp,children})}),tooltipVisible&&overflow&&jsxRuntime.jsx(index.Tooltip,{targetElement:wrapperRef.current,renderContent:()=>children,...tooltipProps})]})};StepContent.displayName="StepContent",exports.StepContent=StepContent;
//# sourceMappingURL=StepContent.cjs.js.map
