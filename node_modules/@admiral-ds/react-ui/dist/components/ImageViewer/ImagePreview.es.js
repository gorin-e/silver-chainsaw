import{jsx,jsxs}from"react/jsx-runtime";import{forwardRef,useRef,useState,useLayoutEffect,useEffect,useMemo}from"react";import styled from"styled-components";import{createPortal}from"react-dom";import{ImageViewerCloseButton}from"./ImageViewerCloseButton.es.js";import{ImageViewerToolbar}from"./ImageViewerToolbar.es.js";import{updatePosition,getPrev,getClientSize,getNext}from"./utils.es.js";import{IMAGE_SCALE_PRECISION,BASE_SCALE_RATIO,WHEEL_MAX_SCALE_RATIO}from"./constants.es.js";import{keyboardKey}from"../common/keyboardKey.es.js";import{getSwipeType,getCenter,getDistance}from"../common/utils/touchUtils.es.js";const Overlay=styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background-color: var(--admiral-color-Opacity_Modal, ${p=>p.theme.color["Opacity/Modal"]});
  transition: opacity 0.3s ease 0s;
  z-index: var(--admiral-z-index-modal, ${({theme})=>theme.zIndex.modal});
  outline: none;
`,CloseButton=styled(ImageViewerCloseButton)`
  position: absolute;
  right: 22px;
  top: 18px;
`,Toolbar=styled(ImageViewerToolbar)`
  position: absolute;
  bottom: 24px;
  left: 50%;
  transform: translate(-50%);
`,StyledImage=styled.img`
  outline: none;
  max-width: 100%;
  max-height: 70%;
  transition: ${({$transitionEnabled})=>$transitionEnabled?"all 0.3s ease":"none"};
  cursor: grab;
  display: ${p=>p.$isVisible?"block":"none"};

  &:active {
    cursor: grabbing;
  }
`,ImageView=forwardRef(({item,scale,flipX,flipY,rotate,x,y,transitionEnabled,isVisible=!0,...props},ref)=>{const itemSrc="string"==typeof item?item:item.src;return jsx(StyledImage,{..."string"==typeof item?void 0:item,...props,src:itemSrc,tabIndex:-1,ref,$transitionEnabled:transitionEnabled,$isVisible:isVisible,style:{transform:`translate(${x}px, ${y}px) scale(${flipX?"-":""}${scale}, ${flipY?"-":""}${scale}) rotate(${rotate}deg)`}})}),ImagePreview=({item,container,minScale=1,maxScale=10,errorMiniature,scaleStep=.5,showTooltip,showCounter,showNavigation,locale,activeImg=0,totalImg,onVisibleChange,onActiveChange,onTransform})=>{const overlayRef=useRef(null),imgRef=useRef(null),[needUpdateCoordinates,setNeedUpdateCoordinates]=useState(!1),handleNeedUpdateCoordinatesChange=newState=>{setTimeout(()=>setNeedUpdateCoordinates(newState),250)},[imgNaturalHeight,setImgNaturalHeight]=useState(0),[errorOnLoadImg,setErrorOnLoadImg]=useState(!1),[imgRenderedWidth,setImgRenderedWidth]=useState(0),[imgRenderedHeight,setImgRenderedHeight]=useState(0);useLayoutEffect(()=>{if(imgRef.current){const resizeObserver=new ResizeObserver(entries=>{entries.forEach(entry=>{return width=entry.contentRect.width||0,height=entry.contentRect.height||0,setImgRenderedWidth(width),void setImgRenderedHeight(height);var width,height})});return resizeObserver.observe(imgRef.current),()=>{resizeObserver.disconnect()}}},[]);const handleClose=()=>{onVisibleChange?.(!1)},[scale,setScale]=useState(1),handleZoomIn=()=>{handleZoomChange(BASE_SCALE_RATIO+scaleStep)},handleZoomOut=()=>{handleZoomChange(BASE_SCALE_RATIO/(BASE_SCALE_RATIO+scaleStep))},minScaleInner=minScale??1,[realScaleState,setRealScaleState]=useState(1),[fullScaleState,setFullScaleState]=useState(1);useEffect(()=>{setRealScaleState(+(imgNaturalHeight/imgRenderedHeight).toFixed(IMAGE_SCALE_PRECISION)),setFullScaleState((()=>{if(overlayRef.current){const{width:overlayWidth,height:overlayHeight}=overlayRef.current.getBoundingClientRect();return Math.min(+(overlayWidth/imgRenderedWidth).toFixed(IMAGE_SCALE_PRECISION),+(overlayHeight/imgRenderedHeight).toFixed(IMAGE_SCALE_PRECISION))}return 1})())},[imgRenderedWidth,imgRenderedHeight,imgNaturalHeight]);const[flipX,setFlipX]=useState(!1),[flipY,setFlipY]=useState(!1),[rotate,setRotate]=useState(0),[isMoving,setMoving]=useState(!1),[coordinates,setCoordinates]=useState({x:0,y:0}),startPositionInfo=useRef({diffX:0,diffY:0,transformX:0,transformY:0}),handleActiveChange=index=>{setCoordinates({x:0,y:0}),setScale(1),setFlipX(!1),setFlipY(!1),setRotate(0),onTransform?.({transform:{x:0,y:0,scale:1,rotate:0,flipX:!1,flipY:!1},action:"reset"}),onActiveChange?.(index),setErrorOnLoadImg(!1)},handleKeyDown=event=>{const code=keyboardKey.getCode(event);event.preventDefault(),code===keyboardKey.Escape?(event.stopPropagation(),handleClose()):code===keyboardKey.ArrowLeft?activeImg>0&&handleActiveChange(getPrev(activeImg)):code===keyboardKey.ArrowRight||code===keyboardKey[" "]?activeImg<totalImg-1&&handleActiveChange(getNext(activeImg,totalImg)):code===keyboardKey.ArrowUp?handleZoomIn():code===keyboardKey.ArrowDown?handleZoomOut():code===keyboardKey.Enter?handleZoomChange(scale===realScaleState?BASE_SCALE_RATIO/realScaleState:realScaleState/scale):code===keyboardKey.F&&(event.stopPropagation(),handleZoomChange(scale===fullScaleState?BASE_SCALE_RATIO/fullScaleState:fullScaleState/scale))};useEffect(()=>(document.addEventListener("keydown",handleKeyDown),()=>{document.removeEventListener("keydown",handleKeyDown)}),[activeImg,scale,fullScaleState,realScaleState]);const handleImgMouseMove=event=>{if(isMoving&&imgRef.current){const newX=event.pageX-startPositionInfo.current.diffX,newY=event.pageY-startPositionInfo.current.diffY;setCoordinates({x:newX,y:newY}),onTransform?.({transform:{...transform,x:newX,y:newY},action:"move"})}},handleImgMouseUp=()=>{if(isMoving&&imgRef.current){setMoving(!1);const{transformX,transformY}=startPositionInfo.current;if(!(coordinates.x!==transformX&&coordinates.y!==transformY))return;const width=imgRef.current.offsetWidth*scale,height=imgRef.current.offsetHeight*scale,{left,top}=imgRef.current.getBoundingClientRect(),updated=updatePosition(width,height,left,top,rotate,coordinates);updated.x===coordinates.x&&updated.y===coordinates.y||(requestAnimationFrame(()=>{setCoordinates(updated)}),onTransform?.({transform:{...transform,x:updated.x,y:updated.y},action:"move"}))}},handleZoomChange=(ratio,centerX,centerY)=>{if(imgRef.current){const{width,height,offsetWidth,offsetHeight,offsetLeft,offsetTop}=imgRef.current;let newRatio=ratio,newScale=scale*ratio;newScale>maxScale?(newScale=maxScale,newRatio=maxScale/scale):newScale<minScale&&(newScale=minScale,newRatio=newScale/scale);const mergedCenterX=centerX??innerWidth/2,mergedCenterY=centerY??innerHeight/2,diffRatio=newRatio-1,diffImgX=diffRatio*width*.5,diffImgY=diffRatio*height*.5,diffOffsetLeft=diffRatio*(mergedCenterX-coordinates.x-offsetLeft),diffOffsetTop=diffRatio*(mergedCenterY-coordinates.y-offsetTop);let newX=coordinates.x-(diffOffsetLeft-diffImgX),newY=coordinates.y-(diffOffsetTop-diffImgY);if(ratio<1&&1===newScale){const mergedWidth=offsetWidth*newScale,mergedHeight=offsetHeight*newScale,{width:clientWidth,height:clientHeight}=getClientSize();mergedWidth<=clientWidth&&mergedHeight<=clientHeight&&(newX=0,newY=0)}(newScale=>{setScale(newScale),onTransform?.({transform:{...transform,scale:newScale},action:"zoomChange"})})(newScale),setCoordinates({x:newX,y:newY}),coordinates.x===newX&&coordinates.y===newY||onTransform?.({transform:{...transform,x:newX,y:newY},action:"move"}),handleNeedUpdateCoordinatesChange(!0)}};useEffect(()=>(document.addEventListener("mousemove",handleImgMouseMove),document.addEventListener("mouseup",handleImgMouseUp),()=>{document.removeEventListener("mousemove",handleImgMouseMove),document.removeEventListener("mouseup",handleImgMouseUp)}),[isMoving,coordinates,rotate]),useEffect(()=>{if(needUpdateCoordinates&&!isMoving&&imgRef.current){const width=imgRef.current.offsetWidth*scale,height=imgRef.current.offsetHeight*scale,imgRect=imgRef.current.getBoundingClientRect(),updated=updatePosition(width,height,imgRect.left,imgRect.top,rotate,coordinates);updated.x===coordinates.x&&updated.y===coordinates.y||(setCoordinates(updated),onTransform?.({transform:{...transform,x:updated.x,y:updated.y},action:"move"})),setNeedUpdateCoordinates(!1)}},[needUpdateCoordinates]);const[isTouching,setIsTouching]=useState(!1),touchPointInfo=useRef({point1:{x:0,y:0},point2:{x:0,y:0},eventType:"none",startEl:void 0,timeDown:void 0,xDown:void 0,yDown:void 0,xDiff:void 0,yDiff:void 0,touchCount:void 0}),updateTouchPointInfo=values=>{touchPointInfo.current={...touchPointInfo.current,...values}},transform=useMemo(()=>({x:coordinates.x,y:coordinates.y,rotate,scale,flipX,flipY}),[coordinates,rotate,scale,flipX,flipY]);return createPortal(jsxs(Overlay,{ref:overlayRef,tabIndex:-1,onMouseDown:event=>{event.target===overlayRef.current&&handleClose()},children:[errorOnLoadImg&&errorMiniature,jsx(ImageView,{item,ref:imgRef,scale,flipX,flipY,rotate,x:coordinates.x,y:coordinates.y,onDoubleClick:event=>{handleZoomChange(scale===realScaleState?BASE_SCALE_RATIO/realScaleState:realScaleState/scale,event.clientX,event.clientY)},onMouseDown:event=>{0===event.button&&imgRef.current&&(event.preventDefault(),event.stopPropagation(),startPositionInfo.current={diffX:event.pageX-coordinates.x,diffY:event.pageY-coordinates.y,transformX:coordinates.x,transformY:coordinates.y},setMoving(!0))},transitionEnabled:!isMoving,isVisible:!errorOnLoadImg,onWheel:event=>{if(0==event.deltaY)return;event.preventDefault(),event.stopPropagation();const scaleRatio=Math.abs(event.deltaY/100),mergedScaleRatio=Math.min(scaleRatio,WHEEL_MAX_SCALE_RATIO);let ratio=BASE_SCALE_RATIO+mergedScaleRatio*scaleStep;event.deltaY>0&&(ratio=BASE_SCALE_RATIO/ratio),handleZoomChange(ratio,event.clientX,event.clientY)},onTouchStart:event=>{event.stopPropagation(),setIsTouching(!0);const{touches=[]}=event;updateTouchPointInfo({startEl:event.target,timeDown:Date.now(),touchCount:touches.length}),touches.length>1?updateTouchPointInfo({point1:{x:touches[0].clientX,y:touches[0].clientY},point2:{x:touches[1].clientX,y:touches[1].clientY},eventType:"touchZoom"}):updateTouchPointInfo({point1:{x:touches[0].clientX-coordinates.x,y:touches[0].clientY-coordinates.y},eventType:"move",xDown:touches[0].clientX,yDown:touches[0].clientY,xDiff:0,yDiff:0})},onTouchMove:event=>{const{touches=[]}=event,{point1,point2,eventType,xDown,yDown}=touchPointInfo.current;if(touches.length>1&&"touchZoom"===eventType){const newPoint1={x:touches[0].clientX,y:touches[0].clientY},newPoint2={x:touches[1].clientX,y:touches[1].clientY},[centerX,centerY]=getCenter(point1,point2,newPoint1,newPoint2),ratio=getDistance(newPoint1,newPoint2)/getDistance(point1,point2);handleZoomChange(ratio,centerX,centerY),updateTouchPointInfo({point1:newPoint1,point2:newPoint2,eventType:"touchZoom"})}else if("move"===eventType){updateTouchPointInfo({eventType:"move"});const newX=touches[0].clientX-point1.x,newY=touches[0].clientY-point1.y;setCoordinates({x:newX,y:newY}),onTransform?.({transform:{...transform,x:newX,y:newY},action:"move"}),xDown&&yDown&&updateTouchPointInfo({xDiff:xDown-touches[0].clientX,yDiff:yDown-touches[0].clientY})}},onTouchEnd:event=>{if(isTouching&&imgRef.current){setIsTouching(!1);const{eventType,startEl,timeDown,xDiff,yDiff,xDown,yDown}=touchPointInfo.current;if("move"===eventType){const timeUp=Date.now(),type=getSwipeType(startEl,event.target,timeDown,timeUp,xDown,yDown,xDiff,yDiff);if("swiped-left"===type&&activeImg<totalImg-1)handleActiveChange(getNext(activeImg,totalImg));else if("swiped-right"===type&&activeImg>0)handleActiveChange(getPrev(activeImg));else{const width=imgRef.current.offsetWidth*scale,height=imgRef.current.offsetHeight*scale,{left,top}=imgRef.current.getBoundingClientRect(),updated=updatePosition(width,height,left,top,rotate,coordinates);updated.x===coordinates.x&&updated.y===coordinates.y||(requestAnimationFrame(()=>{setCoordinates(updated)}),onTransform?.({transform,action:"move"}))}}updateTouchPointInfo({eventType:"none",startEl:void 0,timeDown:void 0,xDown:void 0,yDown:void 0,xDiff:void 0,yDiff:void 0,touchCount:void 0})}},onLoad:e=>{const imgNode=e.target;setImgNaturalHeight(imgNode.naturalHeight),overlayRef.current?.focus()},onError:()=>{setErrorOnLoadImg(!0),overlayRef.current?.focus()}}),jsx(CloseButton,{onClick:event=>{event.stopPropagation(),handleClose()}}),jsx(Toolbar,{activeImg,totalImg,showTooltip,showCounter,showNavigation,actions:{onActiveImgChange:handleActiveChange,onFlipX:()=>{onTransform?.({transform:{...transform,flipX:!flipX},action:"flipX"}),setFlipX(prevState=>!prevState)},onFlipY:()=>{onTransform?.({transform:{...transform,flipY:!flipY},action:"flipY"}),setFlipY(prevState=>!prevState)},onRotateLeft:()=>{onTransform?.({transform:{...transform,rotate:rotate-90},action:"rotateLeft"}),setRotate(prevState=>prevState-90),handleNeedUpdateCoordinatesChange(!0)},onRotateRight:()=>{setRotate(prevState=>prevState+90),onTransform?.({transform:{...transform,rotate:rotate+90},action:"rotateRight"}),handleNeedUpdateCoordinatesChange(!0)},onZoomOut:handleZoomOut,onZoomIn:handleZoomIn,onClose:handleClose},actionsDisabled:errorOnLoadImg,minScale:minScaleInner,maxScale,transform,locale})]}),container||document.body)};export{ImagePreview};
//# sourceMappingURL=ImagePreview.es.js.map
