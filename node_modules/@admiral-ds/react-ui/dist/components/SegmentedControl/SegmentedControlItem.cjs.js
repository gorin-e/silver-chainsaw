"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),SpinnerIcon=require("../Spinner/SpinnerIcon.cjs.js"),style=require("./style.cjs.js"),mixins=require("./mixins.cjs.js");const SegmentedControlItem=e.forwardRef(({type="radio",checked,defaultChecked,value,name,onChange,disabled,displayAsSquare=!1,loading=!1,iconStart,iconEnd,buttonCssMixin,children,...props},ref)=>{const hasIconStart=!!iconStart,hasIconEnd=!!iconEnd,additionalPadding=(displayAsSquare||hasIconStart?0:2)+(displayAsSquare||hasIconEnd?0:2);return jsxRuntime.jsxs(style.Label,{...props,children:[jsxRuntime.jsx(style.Input,{ref,type,checked,defaultChecked,value,name,onChange,disabled:disabled||loading}),jsxRuntime.jsxs(style.Button,{$loading:loading,$displayAsSquare:displayAsSquare,$buttonCssMixin:buttonCssMixin,children:[loading&&jsxRuntime.jsx(style.SpinnerContainer,{children:jsxRuntime.jsx(SpinnerIcon.SpinnerIcon,{})}),!displayAsSquare&&!hasIconStart&&jsxRuntime.jsx(style.AdditionalPadding,{}),jsxRuntime.jsxs(style.ButtonContent,{$addPadding:additionalPadding,children:[hasIconStart?jsxRuntime.jsx(mixins.ButtonIconContainer,{children:iconStart}):null,e.Children.toArray(children).map((child,index)=>"string"==typeof child?jsxRuntime.jsx("div",{children:child},child+index):child),hasIconEnd?jsxRuntime.jsx(mixins.ButtonIconContainer,{children:iconEnd}):null]}),!displayAsSquare&&!hasIconEnd&&jsxRuntime.jsx(style.AdditionalPadding,{})]})]})});SegmentedControlItem.displayName="SegmentedControlItem",exports.SegmentedControlItem=SegmentedControlItem;
//# sourceMappingURL=SegmentedControlItem.cjs.js.map
