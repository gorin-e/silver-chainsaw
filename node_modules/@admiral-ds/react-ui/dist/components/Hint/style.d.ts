/// <reference types="react" />
export declare const AnchorWrapper: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $anchorCssMixin?: import("styled-components").RuleSet<object> | undefined;
}>> & string;
export declare const CloseButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, never>> & string & Omit<import("react").ForwardRefExoticComponent<import("../../components/IconPlacement").IconPlacementProps & import("react").RefAttributes<HTMLButtonElement>>, keyof import("react").Component<any, {}, any>>;
export type Dimension = 's' | 'm' | 'l';
export declare const HintWrapper: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const HintDialog: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    $dimension: Dimension;
    $isMobile: boolean;
}>> & string;
export declare const HintContent: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const Portal: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("../../components/PositionInPortal").PositionInPortalProps & {
    children?: import("react").ReactNode;
}, "ref"> & {
    ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
}, {
    $flexDirection?: string | undefined;
}>> & string & Omit<({ targetElement, rootRef, fullContainerWidth, ...props }: import("react").PropsWithChildren<import("../../components/PositionInPortal").PositionInPortalProps>) => import("react").ReactPortal, keyof import("react").Component<any, {}, any>>;
export declare const FakeTarget: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
//# sourceMappingURL=style.d.ts.map