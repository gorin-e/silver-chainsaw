import * as React from 'react';
import type { css } from 'styled-components';
import type { RefCallback, RefObject } from '../../components/common/utils/handleRef';
import type { Dimension } from './style';
import type { HintPositionType } from './utils';
type Trigger = 'click' | 'hover';
export interface HintProps extends React.HTMLAttributes<HTMLDivElement> {
    /** Видимость компонента */
    visible: boolean;
    /** Колбек на изменение видимости хинта
     *
     * Если visibilityTrigger = 'hover', при ховере/фокусе на target элементе колбек вызовется со значением visible=true,
     * при потере ховера/фокуса на target элементе колбек вызовется со значением visible=false.
     *
     * Если visibilityTrigger = 'click', при клике на target элемент или нажатии клавиш Space/Enter на
     * target элементе колбек вызовется со значением visible=true,
     * при клике на крестик внутри хинта/клике вне хинта и target элемента/нажатии клавиши Escape
     * колбек вызовется со значением visible=false.
     */
    onVisibilityChange?: (visible: boolean) => void;
    /** Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание */
    renderContent: () => React.ReactNode;
    /** Расположение хинта */
    hintPosition?: HintPositionType;
    /**
     * @deprecated Помечено как deprecated в версии 4.11.1, будет удалено в версии 9.х.х.
     * Взамен используйте rootRef пропсу на DropdownProvider.
     *
     * Контейнер, в котором будет отрисован тултип через React.createPortal.
     * По умолчанию тултип отрисовывается в document.body
     **/
    container?: never;
    /** Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит */
    targetElement?: Element | null;
    /** Триггер появления компонента (событие, которое вызывает появление хинта) */
    visibilityTrigger?: Trigger;
    /** Размер компонента */
    dimension?: Dimension;
    /** Ссылка на тултип */
    hintRef?: RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null;
    /** ClassName для внешнего контейнера (AnchorWrapper) */
    anchorClassName?: string;
    /** Id для внешнего контейнера (AnchorWrapper) */
    anchorId?: string;
    /** Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper) */
    anchorCssMixin?: ReturnType<typeof css>;
    /** Объект локализации - позволяет перезадать текстовые константы используемые в компоненте,
     * по умолчанию значения констант берутся из темы в соответствии с параметром currentLocale, заданном в теме
     **/
    locale?: {
        /** Атрибут aria-label, описывающий назначение кнопки с крестиком, закрывающей хинт */
        closeButtonAriaLabel?: string;
    };
    /** Появление хинта не приводит к перемещению фокуса */
    preventFocusSteal?: boolean;
}
export declare const Hint: React.FC<HintProps>;
export {};
//# sourceMappingURL=index.d.ts.map