"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react");const DropdownContext=e.createContext({});exports.DropdownContext=DropdownContext,exports.DropdownProvider=({rootRef,...props})=>{const[dropdowns,setDropdowns]=e.useState([]),[currentActiveMenu,setCurrentActiveMenu]=e.useState(void 0),activateMenu=e.useCallback(menuRef=>{setCurrentActiveMenu(menuRef)},[]),deactivateMenu=e.useCallback(menuRef=>{setCurrentActiveMenu(prevValue=>prevValue===menuRef?void 0:prevValue)},[]),removeDropdown=e.useCallback(removeDropdown=>{setDropdowns(prevDrops=>{const index=prevDrops.indexOf(removeDropdown);return index>-1?prevDrops.slice(0,index):prevDrops})},[]),addDropdown=e.useCallback(newDropdown=>{setDropdowns(prevDrops=>[...prevDrops,newDropdown])},[]),providerValue=e.useMemo(()=>({addDropdown,removeDropdown,dropdowns,rootRef,activateMenu,deactivateMenu,currentActiveMenu}),[addDropdown,removeDropdown,dropdowns,rootRef,activateMenu,deactivateMenu,currentActiveMenu]);return jsxRuntime.jsx(DropdownContext.Provider,{value:providerValue,children:props.children})},exports.useDropdown=function(dropdownRef){const{dropdowns=[],addDropdown,removeDropdown,activateMenu,deactivateMenu,currentActiveMenu}=e.useContext(DropdownContext),dropdownIndex=dropdowns.indexOf(dropdownRef);return{addDropdown,removeDropdown,dropdowns:dropdownIndex>-1?dropdowns.slice(dropdownIndex+1,dropdowns.length):[],activateMenu,deactivateMenu,currentActiveMenu}},exports.useDropdownsClickOutside=(e,dropdowns)=>!dropdowns.some(element=>element.current&&element.current.contains(e.target));
//# sourceMappingURL=DropdownProvider.cjs.js.map
