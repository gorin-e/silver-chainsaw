import type { HTMLAttributes, ReactNode, RefObject } from 'react';
import { css } from 'styled-components';
import type { MenuModelItemProps } from '../../components/Menu/MenuItem';
import type { MenuDimensions } from '../../components/Menu/types';
import type { RenderDirection } from '../../components/Menu/utils';
export declare const getItemHeight: (dimension?: MenuDimensions) => 32 | 40 | 48;
export interface RenderPanelProps {
    /** Размер компонента */
    dimension: MenuDimensions;
    /** Позволяет добавлять миксин для панели, созданный с помощью styled css  */
    menuActionsPanelCssMixin?: ReturnType<typeof css>;
}
export interface MenuProps extends HTMLAttributes<HTMLDivElement> {
    /** Размер Меню */
    dimension?: MenuDimensions;
    /** Активная секция Menu */
    active?: string | null;
    /** Секция в состоянии preselected  */
    preselected?: string;
    /** выбранная секция Menu */
    selected?: string | Array<string>;
    /** выбранная по умолчанию секция Menu */
    defaultSelected?: string | Array<string>;
    /** Обработчик активации (hover) item в меню */
    onActivateItem?: (id?: string) => void;
    /** Обработчик выбора item в меню */
    onSelectItem?: (id: string) => void;
    /** Обработчик выбора item в меню */
    onDeselectItem?: (id: string) => void;
    /** Модель данных, с рендер-пропсами*/
    model: Array<MenuModelItemProps>;
    /** Задает максимальную высоту меню (с учетом наличия/отсутствия верхней/нижней панели) */
    maxHeight?: string | number;
    /** Позволяет добавить панель сверху над выпадающим списком */
    renderTopPanel?: (props: RenderPanelProps) => ReactNode;
    /** Позволяет добавить панель внизу под выпадающим списком */
    renderBottomPanel?: (props: RenderPanelProps) => ReactNode;
    /**
     * @deprecated Помечено как deprecated в версии 4.9.1, будет удалено в 10.x.x версии.
     * Взамен используйте disableSelectedOptionHighlight
     *
     * Возможность множественного выбора (опции с Checkbox)
     **/
    multiSelection?: boolean;
    /** Количество отображаемых пунктов меню */
    rowCount?: number;
    /** Возможность отключить подсветку выбранной опции
     * (например, при множественном выборе, когда у каждой опции есть Checkbox) */
    disableSelectedOptionHighlight?: boolean;
    /** Отключает функцию выбора опции при нажатии на пробел */
    disableSelectionOnSpace?: boolean;
    /** Отключает функцию выбора опции при нажатии на Enter */
    disableSelectionOnEnter?: boolean;
    onForwardCycleApprove?: () => boolean;
    onBackwardCycleApprove?: () => boolean;
    /** ссылка на контейнер, в котором находится Menu*/
    containerRef?: RefObject<HTMLElement>;
    /** Включение виртуального скролла для меню.
     * Максимальная высота меню рассчитывается исходя из высоты 1 пункта, если параметр 'auto', то в расчет идет
     * высота согласно dimension
     */
    virtualScroll?: {
        /** Фиксированная высота 1 пункта меню, для правильного функционирования виртуального скролла
         * все строки должны быть одной фиксированной высоты
         */
        itemHeight: 'auto' | number;
    };
    /**
     * Сторона от родительского меню, в которой по умолчанию будет появляться дочернее меню при наличии места
     * */
    subMenuRenderDirection?: RenderDirection;
    /** @internal
     * Ссылка на родительское меню для subMenu */
    parentMenuRef?: RefObject<HTMLElement>;
    /** @internal
     * Обработчик события при попытке закрыть subMenu */
    onCloseQuery?: () => void;
    /**
     * Признак необходимости активировать меню сразу при появлении
     */
    defaultIsActive?: boolean;
    /** Клик по меню не приводит к перемещению фокуса */
    preventFocusSteal?: boolean;
    /** Признак включения режима с использованием состояния preselected */
    preselectedModeActive?: boolean;
    /** Обработчик события preselected */
    onPreselectItem?: (id?: string) => void;
    /** Обработчик нажатия клавиши на активном меню */
    onMenuKeyDown?: (e: KeyboardEvent) => void;
}
export declare const Menu: import("react").ForwardRefExoticComponent<MenuProps & import("react").RefAttributes<HTMLDivElement | null>>;
export type { MenuDimensions } from '../../components/Menu/types';
//# sourceMappingURL=index.d.ts.map