import{jsxs,jsx}from"react/jsx-runtime";import{forwardRef,Children}from"react";import styled from"styled-components";import{paddings,styleTextMixin,colorTextMixin,backgroundColor}from"./menuItemMixins.es.js";import{Chevron}from"./styled.es.js";import{refSetter}from"../common/utils/refSetter.es.js";const stopEventHandler=e=>{e.preventDefault(),e.stopPropagation()},MenuItem=forwardRef(({children,expandIcon=jsx(Chevron,{}),hasSubmenu,onHover,disabled,readOnly,hovered,dimension="l",selected=!1,preselected=!1,selfRef,onMouseDown,onLeave,containerRef,...props},ref)=>{const handleMouseDown=disabled?stopEventHandler:onMouseDown,resolvedRef=selfRef?refSetter(ref,selfRef):ref;return jsxs(Item,{ref:resolvedRef,$dimension:dimension,$preselected:preselected,$selected:selected,$hovered:hovered,"data-preselected":preselected,"data-hovered":hovered,"data-disabled":disabled,"data-readonly":readOnly,"data-dimension":dimension,onMouseEnter:e=>{onHover?.(e),props.onMouseEnter?.(e)},onMouseLeave:e=>{onLeave?.(e),props.onMouseLeave?.(e)},onMouseMove:e=>{onHover?.(e),props.onMouseMove?.(e)},onMouseDown:handleMouseDown,...props,children:[Children.toArray(children).map((child,index)=>"string"==typeof child?jsx(TextWrapper,{children:child},child+index):child),hasSubmenu&&expandIcon]})});MenuItem.displayName="MenuItem";const Item=styled.div`
  display: flex;
  align-items: center;
  user-select: none;
  position: relative;
  justify-content: space-between;
  outline: none;
  white-space: pre;
  margin: 0;
  cursor: pointer;
  box-sizing: border-box;
  ${paddings}
  ${styleTextMixin}
  ${colorTextMixin}
  ${backgroundColor}

  &&[data-disabled='true'] {
    cursor: not-allowed;
    background-color: var(--admiral-color-Special_ElevatedBG, ${p=>p.theme.color["Special/Elevated BG"]});
    color: var(--admiral-color-Neutral_Neutral30, ${p=>p.theme.color["Neutral/Neutral 30"]});
    && *[fill^='#'] {
      fill: var(--admiral-color-Neutral_Neutral30, ${p=>p.theme.color["Neutral/Neutral 30"]});
    }
    && input[type='checkbox'] + * [fill^='#'] {
      fill: var(--admiral-color-Neutral_Neutral00, ${p=>p.theme.color["Neutral/Neutral 00"]});
    }
  }

  &&[data-readonly='true'] {
    cursor: default;
  }
`,TextWrapper=styled.span`
  overflow: hidden;
  text-overflow: ellipsis;
`;export{MenuItem};
//# sourceMappingURL=MenuItem.es.js.map
