import{jsxs,Fragment,jsx}from"react/jsx-runtime";import styled from"styled-components";import{usePrevious}from"../common/hooks/usePrevious.es.js";import{useState,useCallback,useEffect,useMemo}from"react";const Spacer=styled.div`
  display: flex;
  flex: 0 0 auto;
`,VirtualBody=({scrollContainerRef,itemHeight,rowCount=6,aheadItemsCount=3,model,activeId,selected,onRenderItem})=>{const[scrollTop,setScrollTop]=useState(0),[partition,setPartition]=useState({startIndex:0,endIndex:rowCount,topPadding:"",bottomPadding:"",needAddListener:!1}),prevValue=usePrevious({activeId}),handleScroll=useCallback(e=>{requestAnimationFrame(()=>{e.target&&setScrollTop(e.target.scrollTop)})},[scrollContainerRef]);useEffect(()=>{const scrollContainer=scrollContainerRef.current;return setScrollTop(scrollContainer?.scrollTop||0),scrollContainer?.addEventListener("scroll",handleScroll),()=>scrollContainer?.removeEventListener("scroll",handleScroll)},[handleScroll]),useEffect(()=>{partition.needAddListener&&(setTimeout(()=>scrollContainerRef?.current?.addEventListener("scroll",handleScroll)),setPartition({...partition,needAddListener:!1}))},[partition,scrollContainerRef]);const calcPartition=useCallback(start=>{const itemCount=model.length,startIndex=Math.max(0,start);let visibleNodeCount=rowCount+2*aheadItemsCount;visibleNodeCount=Math.min(itemCount-startIndex,visibleNodeCount);return{startIndex,endIndex:startIndex+visibleNodeCount,topPadding:startIndex*itemHeight+"px",bottomPadding:(itemCount-startIndex-visibleNodeCount)*itemHeight+"px"}},[itemHeight,aheadItemsCount,model,rowCount]);useEffect(()=>{const start=Math.floor(scrollTop/itemHeight-aheadItemsCount),partition={...calcPartition(start),needAddListener:!1};setPartition(partition)},[scrollTop,calcPartition]),useEffect(()=>{if(!activeId||!prevValue)return;if(prevValue.activeId===activeId)return;const index=model.findIndex(item=>item.id===activeId);-1!==index&&(index<partition.startIndex||index>partition.endIndex)&&(scrollContainerRef?.current?.removeEventListener("scroll",handleScroll),setPartition({...calcPartition(index),needAddListener:!0}))},[activeId,partition,calcPartition,scrollContainerRef]);const visibleChildren=useMemo(()=>[...model].slice(partition.startIndex,partition.endIndex).map((item,index)=>onRenderItem?.(item,index)),[model,activeId,selected,partition]);return jsxs(Fragment,{children:[jsx(Spacer,{style:{minHeight:partition.topPadding}}),visibleChildren,jsx(Spacer,{style:{minHeight:partition.bottomPadding}})]})};export{VirtualBody};
//# sourceMappingURL=VirtualBody.es.js.map
