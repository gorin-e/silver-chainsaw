/// <reference types="react" />
import type { ItemDimension } from './menuItemMixins';
export interface RenderOptionProps {
    key?: string | number;
    /** Активная секция MenuItems */
    selected?: boolean;
    /** Секция в состоянии preselected */
    preselected?: boolean;
    /** Акцентная секция MenuItems */
    hovered?: boolean;
    /** Обработчик клика по item */
    onClick?: React.MouseEventHandler<HTMLElement>;
    /** Обработчик наведения мыши на item */
    onHover?: React.MouseEventHandler<HTMLElement>;
    /** обработчик выхода мыши за пределы item */
    onLeave?: React.MouseEventHandler<HTMLElement>;
    onMouseDown?: React.MouseEventHandler<HTMLElement>;
    /** ссылка на контейнер, в котором находится Menu*/
    containerRef?: React.RefObject<HTMLElement>;
    expandIcon?: React.ReactNode;
    hasSubmenu?: boolean;
    /**
     * @deprecated Помечено как deprecated в версии 8.17.0, будет удалено в 10.x.x версии.
     *
     * ссылка на элемент, при работе через renderProp
     */
    selfRef?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null;
    /** Отключение секции */
    disabled?: boolean;
    /** Только для чтения */
    readOnly?: boolean;
    /** Размер MenuItems */
    dimension?: ItemDimension;
}
export interface MenuModelItemProps {
    id: string;
    render: ((options: RenderOptionProps) => React.ReactNode) | React.ReactNode;
    disabled?: boolean;
    readOnly?: boolean;
    subItems?: Array<MenuModelItemProps>;
    expandIcon?: React.ReactNode;
    dimension?: ItemDimension;
}
export type MenuItemProps = React.ComponentPropsWithoutRef<'div'> & RenderOptionProps;
export declare const MenuItem: import("react").ForwardRefExoticComponent<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & RenderOptionProps & import("react").RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=MenuItem.d.ts.map