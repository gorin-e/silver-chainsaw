"use strict";var jsxRuntime=require("react/jsx-runtime"),styled=require("styled-components"),MenuItem=require("./MenuItem.cjs.js"),index=require("../form/CheckboxField/index.cjs.js"),e=require("react");function _interopDefault(e){return e&&e.__esModule?e:{default:e}}var styled__default=_interopDefault(styled);const checkboxTreeToMap=(checkboxTree,level=0,dependencies)=>checkboxTree.reduce((acc,item)=>{const key=item.id,currentNode={level,node:item};if(acc.set(key,currentNode),dependencies&&!item.children&&dependencies.forEach(dependency=>dependency.push(key)),item.children){const allDependencies=dependencies?[...dependencies]:[],itemDependencies=[];currentNode.dependencies=itemDependencies,acc.set(key,currentNode),allDependencies.push(itemDependencies);const map=checkboxTreeToMap(item.children,level+1,allDependencies);return new Map([...acc,...map])}return acc},new Map),paddingLeft=styled.css`
  padding-left: ${({dimension,$level=0})=>"s"===dimension?12+28*$level:16+32*$level}px;
`,CheckboxGroupMenuItem=styled__default.default(MenuItem.MenuItem)`
  ${paddingLeft}
`,MenuItemWithCheckbox=e.forwardRef(({checked,indeterminate,checkboxRef,level=0,children,dimension="l",...props},ref)=>jsxRuntime.jsx(CheckboxGroupMenuItem,{dimension,$level:level,ref,...props,children:jsxRuntime.jsx(index.CheckboxField,{dimension:"s"===dimension?"s":"m",checked:!!checked,indeterminate,hovered:props.hovered,disabled:props.disabled,readOnly:props.readOnly,ref:checkboxRef,onChange:()=>!1,children})}));exports.MenuItemWithCheckbox=MenuItemWithCheckbox,exports.checkboxTreeToMap=checkboxTreeToMap;
//# sourceMappingURL=MenuItemWithCheckbox.cjs.js.map
