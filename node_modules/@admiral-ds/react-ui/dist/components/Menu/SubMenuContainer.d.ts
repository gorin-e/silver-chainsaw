/// <reference types="react" />
import type { RenderDirection } from './utils';
export declare const AnchorWrapper: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const Portal: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<Omit<import("../../components/PositionInPortal").PositionInPortalProps & {
    children?: import("react").ReactNode;
}, "ref"> & {
    ref?: import("react").RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined;
}, {
    $flexDirection?: string | undefined;
}>> & string & Omit<({ targetElement, rootRef, fullContainerWidth, ...props }: import("react").PropsWithChildren<import("../../components/PositionInPortal").PositionInPortalProps>) => import("react").ReactPortal, keyof import("react").Component<any, {}, any>>;
export declare const FakeTarget: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export interface SubMenuProps extends React.HTMLAttributes<HTMLDivElement> {
    /** Пункт меню, относительно которого будет позиционироваться */
    targetElement: HTMLElement | null;
    /**
     *  Обработчик события при клике вне компонента
     */
    onClickOutside?: (e: Event) => void;
    /**
     * Сторона от родительского меню, в которой будет появляться дочернее меню при наличии места
     * */
    defaultRenderDirection?: RenderDirection;
}
export declare const SubMenuContainer: {
    ({ targetElement, children, onClickOutside, defaultRenderDirection, ...props }: SubMenuProps): import("react/jsx-runtime").JSX.Element | null;
    displayName: string;
};
//# sourceMappingURL=SubMenuContainer.d.ts.map