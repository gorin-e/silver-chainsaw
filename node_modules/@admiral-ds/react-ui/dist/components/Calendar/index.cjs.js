"use strict";var jsxRuntime=require("react/jsx-runtime"),e=require("react"),constants=require("./constants.cjs.js"),validator=require("./validator.cjs.js"),Years=require("./components/Years.cjs.js");require("./components/Button.cjs.js"),require("styled-components"),require("../themes/common/locales.cjs.js"),require("../Typography/typography.cjs.js"),require("../Typography/defaultTypographyMixin.cjs.js");var dateUtils=require("./date-utils.cjs.js");require("./styled/DayComponent.cjs.js");var DayNames=require("./components/DayNames.cjs.js"),Month=require("./components/Month.cjs.js"),Months=require("./components/Months.cjs.js"),Panel=require("./components/Panel.cjs.js");require("./styled/WeekComponent.cjs.js");var CalendarComponent=require("./styled/CalendarComponent.cjs.js");const Calendar=e.forwardRef(({viewDate,onViewDateChange,startDate,endDate,validator:validator$1,minDate,maxDate,selected,range,filterDate,currentActiveView,currentActiveViewImportant,locale,onChange,onDateIncreaseDecrease,onMonthSelect,onYearSelect,onViewEnter,onViewLeave,onViewMonthSelect,onViewYearSelect,highlightSpecialDay=()=>{},...props},ref)=>{const getInitialViewDate=()=>{const current=new Date;return current.setHours(0,0,0,0),viewDate||(selected||(minDate&&dateUtils.before(current,minDate)?minDate:maxDate&&dateUtils.after(current,maxDate)?maxDate:current))},[viewDateState,setViewDateState]=e.useState(getInitialViewDate()),viewDateInner=viewDate??viewDateState,handleViewDateChange=newDate=>{setViewDateState(newDate),onViewDateChange?.(newDate)},[activeDate,setActiveDate]=e.useState(null),[yearsView,setYearsView]=e.useState(!1),[monthsView,setMonthsView]=e.useState(!1);e.useEffect(()=>{"MONTH"===currentActiveView&&(setYearsView(!1),setMonthsView(!0)),"YEAR"===currentActiveView&&(setMonthsView(!1),setYearsView(!0)),"DAY"===currentActiveView&&(setYearsView(!1),setMonthsView(!1))},[currentActiveView]),e.useEffect(()=>{handleViewDateChange(getInitialViewDate())},[selected]),e.useEffect(()=>{range&&startDate&&(changeYear(startDate.getFullYear()),changeMonth(startDate.getMonth()))},[]),e.useEffect(()=>{yearsView?onViewEnter&&onViewEnter("YEAR"):onViewLeave&&onViewLeave("YEAR")},[yearsView]),e.useEffect(()=>{monthsView?onViewEnter&&onViewEnter("MONTH"):onViewLeave&&onViewLeave("MONTH")},[monthsView]);const getValidator=()=>validator$1||validator.getDefaultDateValidator(minDate,maxDate),handleYearsViewShow=()=>{currentActiveViewImportant||(setYearsView(!0),setMonthsView(!1)),onViewYearSelect&&onViewYearSelect()},handleYearsViewHide=()=>{currentActiveViewImportant||setYearsView(!1),onViewYearSelect&&onViewYearSelect()},handleMonthsViewShow=()=>{currentActiveViewImportant||(setYearsView(!1),setMonthsView(!0)),onViewMonthSelect&&onViewMonthSelect()},handleMonthsViewHide=()=>{currentActiveViewImportant||setMonthsView(!1),onViewMonthSelect&&onViewMonthSelect()},changeYear=year=>handleViewDateChange(dateUtils.setYear(viewDateInner,year)),changeMonth=month=>handleViewDateChange(dateUtils.setMonth(viewDateInner,month)),increaseYear=()=>{const increase=dateUtils.addYears(viewDateInner,yearsView?constants.DEFAULT_YEAR_COUNT:1);onDateIncreaseDecrease&&onDateIncreaseDecrease(increase),handleViewDateChange(increase)},decreaseYear=()=>{const decrease=dateUtils.subYears(viewDateInner,yearsView?constants.DEFAULT_YEAR_COUNT:1);onDateIncreaseDecrease&&onDateIncreaseDecrease(decrease),handleViewDateChange(decrease)},increaseMonth=()=>{const increase=dateUtils.addMonths(viewDateInner,1);onDateIncreaseDecrease&&onDateIncreaseDecrease(increase),handleViewDateChange(increase)},decreaseMonth=()=>{const decrease=dateUtils.subMonths(viewDateInner);onDateIncreaseDecrease&&onDateIncreaseDecrease(decrease),handleViewDateChange(decrease)},handleDayMouseEnter=day=>setActiveDate(day),handleMonthMouseLeave=()=>setActiveDate(null),handleDayClick=(day,event)=>{let date=day;!range&&dateUtils.equal(selected,date)||(date=dateUtils.changeTime(date,selected),range?(startDate||endDate?startDate&&!endDate?dateUtils.before(date,startDate)?onChange([date,null],event):onChange([startDate,date],event):!startDate&&endDate&&(dateUtils.before(date,endDate)?onChange([date,endDate],event):onChange([date,null],event)):onChange([date,null],event),startDate&&endDate&&onChange([date,null],event)):onChange(date,event))},handleYearClick=date=>{changeYear(date.getFullYear()),!currentActiveViewImportant&&setYearsView(!1),onYearSelect&&onYearSelect(date)},handleMonthClick=date=>{changeMonth(date.getMonth()),!currentActiveViewImportant&&setMonthsView(!1),onMonthSelect&&onMonthSelect(date)};return jsxRuntime.jsxs(CalendarComponent.CalendarComponent,{$yearsView:yearsView,$monthsView:monthsView,...props,ref,children:[jsxRuntime.jsx(Panel.Panel,{viewDate:viewDateInner,minDate,maxDate,yearsView,monthsView,locale,onYearsViewShow:handleYearsViewShow,onYearsViewHide:handleYearsViewHide,onMonthsViewShow:handleMonthsViewShow,onMonthsViewHide:handleMonthsViewHide,onNext:yearsView?increaseYear:increaseMonth,onPrevious:yearsView?decreaseYear:decreaseMonth}),yearsView&&jsxRuntime.jsx(Years.Years,{viewDate:viewDateInner,startDate,endDate,selected,range,validator:getValidator(),onClick:handleYearClick}),monthsView&&jsxRuntime.jsx(Months.Months,{viewDate:viewDateInner,startDate,endDate,selected,range,validator:getValidator(),onClick:handleMonthClick}),!yearsView&&!monthsView&&jsxRuntime.jsxs(jsxRuntime.Fragment,{children:[jsxRuntime.jsx(DayNames.DayNames,{date:viewDateInner}),jsxRuntime.jsx(Month.Month,{day:viewDateInner,startDate,endDate,selected,activeDate,range,validator:getValidator(),filterDate,onMouseEnter:handleDayMouseEnter,onMouseLeave:handleMonthMouseLeave,onClick:handleDayClick,highlightSpecialDay})]})]})});Calendar.displayName="Calendar",exports.Calendar=Calendar;
//# sourceMappingURL=index.cjs.js.map
